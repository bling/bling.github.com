<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Testing on bling on software</title>
    <link>http://bling.github.io/categories/testing/</link>
    <description>Recent content in Testing on bling on software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Dec 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://bling.github.io/categories/testing/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Auto Mocking NSubstitute with Castle Windsor</title>
      <link>http://bling.github.io/blog/2010/12/11/auto-mocking-nsubstitute-with-castle/</link>
      <pubDate>Sat, 11 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2010/12/11/auto-mocking-nsubstitute-with-castle/</guid>
      <description>&lt;div class=&#39;post&#39;&gt;
&lt;p&gt;I was debating whether to make this blog post because it’s so damn simple to implement, but hey, if it saves someone else time, I did some good.&lt;/p&gt; &lt;p&gt;First of all, register an ILazyComponentLoader into Windsor:&lt;/p&gt;&lt;pre style=&#34;border-bottom: #cecece 1px solid; border-left: #cecece 1px solid; padding-bottom: 5px; background-color: #fbfbfb; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #cecece 1px solid; border-right: #cecece 1px solid; padding-top: 5px&#34;&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;var c = &lt;span style=&#34;color: #0000ff&#34;&gt;new&lt;/span&gt; WindsorContainer();
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;c.Register(Component.For&amp;lt;LazyComponentAutoMocker&amp;gt;());&lt;/pre&gt;&lt;/pre&gt;
&lt;p&gt;Then, the implementation of LazyComponentAutoMocker is simply this:&lt;/p&gt;&lt;pre style=&#34;border-bottom: #cecece 1px solid; border-left: #cecece 1px solid; padding-bottom: 5px; background-color: #fbfbfb; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #cecece 1px solid; border-right: #cecece 1px solid; padding-top: 5px&#34;&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #0000ff&#34;&gt;class&lt;/span&gt; LazyComponentAutoMocker : ILazyComponentLoader
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;{
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;  &lt;span style=&#34;color: #0000ff&#34;&gt;public&lt;/span&gt; IRegistration Load(&lt;span style=&#34;color: #0000ff&#34;&gt;string&lt;/span&gt; key, Type service, IDictionary arguments)
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;  {
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;    &lt;span style=&#34;color: #0000ff&#34;&gt;return&lt;/span&gt; Component.For(service).Instance(Substitute.For(&lt;span style=&#34;color: #0000ff&#34;&gt;new&lt;/span&gt;[] { service }, &lt;span style=&#34;color: #0000ff&#34;&gt;null&lt;/span&gt;));
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;  }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;}&lt;/pre&gt;&lt;/pre&gt;
&lt;p&gt;And you’re done!&amp;nbsp; Here’s a simple unit test example using &lt;strong&gt;only&lt;/strong&gt; the code from above:&lt;/p&gt;&lt;pre style=&#34;border-bottom: #cecece 1px solid; border-left: #cecece 1px solid; padding-bottom: 5px; background-color: #fbfbfb; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #cecece 1px solid; border-right: #cecece 1px solid; padding-top: 5px&#34;&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;[Test]
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #0000ff&#34;&gt;void&lt;/span&gt; IDictionary_Add_Invoked()
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;{
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;  var dict = c.Resolve&amp;lt;IDictionary&amp;gt;();
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;  dict.Add(1, 1);
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;  dict.Received().Add(1, 1);
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&#39;Courier New&#39;,courier,monospace; font-size: 12px&#34;&gt;}&lt;/pre&gt;&lt;/pre&gt;
&lt;p&gt;That was almost too easy.&lt;/p&gt;  &lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class=&#39;comments&#39;&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Randy&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
For what it&amp;#39;s worth, I found this helpful. I&amp;#39;m new to Castle Windsor as well as NSubstitute. This post was able to get me going a lot quicker than sifting through documentation. Thanks.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>That Immutable Thing</title>
      <link>http://bling.github.io/blog/2010/11/08/that-immutable-thing/</link>
      <pubDate>Mon, 08 Nov 2010 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2010/11/08/that-immutable-thing/</guid>
      <description>&lt;div class=&#39;post&#39;&gt;
&lt;p&gt;Do you have some sort of ImmutableAttribute in your domain that you use to mark classes as immutable?&amp;#160; Have you ever needed to enforce that contract?&amp;#160; Checking for readonly fields isn’t enough?&amp;#160; Well, this weekend I had a code spike that helped solve this problem in my current project.&lt;/p&gt;  &lt;p&gt;For this project, I’m using the &lt;a href=&#34;http://normproject.org&#34;&gt;NoRM&lt;/a&gt; driver for &lt;a href=&#34;http://www.mongodb.org/&#34;&gt;MongoDB&lt;/a&gt;, and one of the limitations of the serializer is that all types must be classes, must have a default constructor, and all properties have a public setter.&amp;#160; So, now the domain has a bunch of classes like this:&lt;/p&gt;  &lt;pre style=&#34;border-bottom: #cecece 1px solid; border-left: #cecece 1px solid; padding-bottom: 5px; background-color: #fbfbfb; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #cecece 1px solid; border-right: #cecece 1px solid; padding-top: 5px&#34;&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #0000ff&#34;&gt;class&lt;/span&gt; UserCreatedEvent : IEvent
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;{
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;  &lt;span style=&#34;color: #0000ff&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #0000ff&#34;&gt;string&lt;/span&gt; Name { &lt;span style=&#34;color: #0000ff&#34;&gt;get&lt;/span&gt;; &lt;span style=&#34;color: #0000ff&#34;&gt;set&lt;/span&gt;; }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;  &lt;span style=&#34;color: #0000ff&#34;&gt;public&lt;/span&gt; UserCreatedEvent() { }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;  &lt;span style=&#34;color: #0000ff&#34;&gt;public&lt;/span&gt; UserCreatedEvent(&lt;span style=&#34;color: #0000ff&#34;&gt;string&lt;/span&gt; name) { Name = name; }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;}&lt;/pre&gt;&lt;/pre&gt;

&lt;p&gt;That God for code snippets (or Resharper templates).&amp;#160; With so many classes like this that need to get serialized, I wanted to extra sure that no code ever calls the setter method for the Name property.&amp;#160; Thankfully, with some help of &lt;a href=&#34;https://github.com/jbevain/cecil&#34;&gt;Mono.Cecil&lt;/a&gt;, it’s possible.&lt;/p&gt;
&lt;p&gt;First off, you need to define &lt;em&gt;ImmutableAttribute&lt;/em&gt; and that add that do classes, and in my case, it is historical domain events that get serialized to an event store.&lt;/p&gt;
&lt;p&gt;Then, you just write a unit test which leverages the power of Mono.Cecil.&amp;#160; It turned out to be pretty simple.&amp;#160; Here’s the code:&lt;/p&gt;

&lt;pre style=&#34;border-bottom: #cecece 1px solid; border-left: #cecece 1px solid; padding-bottom: 5px; background-color: #fbfbfb; min-height: 40px; padding-left: 5px; width: 650px; padding-right: 5px; overflow: auto; border-top: #cecece 1px solid; border-right: #cecece 1px solid; padding-top: 5px&#34;&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;using&lt;/span&gt; System.Collections.Generic;
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;using&lt;/span&gt; System.Linq;
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;using&lt;/span&gt; Mono.Cecil;
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;using&lt;/span&gt; Mono.Cecil.Cil;
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;using&lt;/span&gt; NUnit.Framework;
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;span style=&#34;color: #0000ff&#34;&gt;namespace&lt;/span&gt; blingcode
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;{
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;    [TestFixture]
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;    &lt;span style=&#34;color: #0000ff&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #0000ff&#34;&gt;class&lt;/span&gt; ImmutabilityTests
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;    {
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        &lt;span style=&#34;color: #0000ff&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #0000ff&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #0000ff&#34;&gt;readonly&lt;/span&gt; MethodDefinition[] _setterMethods;
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        &lt;span style=&#34;color: #0000ff&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #0000ff&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #0000ff&#34;&gt;readonly&lt;/span&gt; AssemblyDefinition[] _assemblies;
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        &lt;span style=&#34;color: #0000ff&#34;&gt;static&lt;/span&gt; ImmutabilityTests()
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        {
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            _assemblies = &lt;span style=&#34;color: #0000ff&#34;&gt;new&lt;/span&gt;[]
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            {
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                AssemblyDefinition.ReadAssembly(&lt;span style=&#34;color: #0000ff&#34;&gt;typeof&lt;/span&gt;(Something).Assembly.Location),
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            };
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            _setterMethods = _assemblies
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                .SelectMany(a =&amp;gt; a.Modules)
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                .SelectMany(m =&amp;gt; m.Types)
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                .Where(t =&amp;gt; t.CustomAttributes.Any(attr =&amp;gt; attr.AttributeType.Name.Contains(&amp;quot;&lt;span style=&#34;color: #8b0000&#34;&gt;ImmutableAttribute&lt;/span&gt;&amp;quot;)))
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                .SelectMany(t =&amp;gt; t.Properties)
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                .Where(p =&amp;gt; p.SetMethod != &lt;span style=&#34;color: #0000ff&#34;&gt;null&lt;/span&gt;)
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                .Select(m =&amp;gt; m.SetMethod)
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                .ToArray();
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        [Test]
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        &lt;span style=&#34;color: #0000ff&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #0000ff&#34;&gt;void&lt;/span&gt; ClassesWith_ImmutableAttribute_ShouldNotUse_PropertySetters()
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        {
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            AssertForViolations(_assemblies
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                                    .SelectMany(a =&amp;gt; a.Modules)
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                                    .SelectMany(m =&amp;gt; m.Types)
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                                    .Where(t =&amp;gt; t.IsClass)
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                                    .SelectMany(t =&amp;gt; t.Methods));
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        [Test]
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        &lt;span style=&#34;color: #0000ff&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #0000ff&#34;&gt;void&lt;/span&gt; ThisFixtureActuallyWorks()
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        {
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            var assembly = AssemblyDefinition.ReadAssembly(&lt;span style=&#34;color: #0000ff&#34;&gt;typeof&lt;/span&gt;(ImmutabilityTests).Assembly.Location);
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            var type = assembly.Modules.SelectMany(m =&amp;gt; m.Types)
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                .Where(t =&amp;gt; t.IsClass &amp;amp;&amp;amp; t.FullName.Contains(GetType().FullName)).First();
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            &lt;span style=&#34;color: #0000ff&#34;&gt;try&lt;/span&gt;
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            {
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                AssertForViolations(type.Methods);
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            &lt;span style=&#34;color: #0000ff&#34;&gt;catch&lt;/span&gt; (AssertionException)
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            {
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                Assert.Pass();
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        &lt;span style=&#34;color: #0000ff&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #0000ff&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #0000ff&#34;&gt;void&lt;/span&gt; AssertForViolations(IEnumerable&amp;lt;MethodDefinition&amp;gt; potentialMethods)
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        {
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            &lt;span style=&#34;color: #0000ff&#34;&gt;foreach&lt;/span&gt; (var method &lt;span style=&#34;color: #0000ff&#34;&gt;in&lt;/span&gt; potentialMethods.Where(m =&amp;gt; m.HasBody))
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            {
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                &lt;span style=&#34;color: #0000ff&#34;&gt;foreach&lt;/span&gt; (Instruction ins &lt;span style=&#34;color: #0000ff&#34;&gt;in&lt;/span&gt; method.Body.Instructions.Where(ins =&amp;gt; ins.OpCode == OpCodes.Callvirt))
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                {
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                    MemberReference mr = ins.Operand &lt;span style=&#34;color: #0000ff&#34;&gt;as&lt;/span&gt; MemberReference;
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                    &lt;span style=&#34;color: #0000ff&#34;&gt;if&lt;/span&gt; (mr != &lt;span style=&#34;color: #0000ff&#34;&gt;null&lt;/span&gt;)
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                    {
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                        var result = _setterMethods.FirstOrDefault(m =&amp;gt; m.FullName == mr.FullName);
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                        &lt;span style=&#34;color: #0000ff&#34;&gt;if&lt;/span&gt; (result != &lt;span style=&#34;color: #0000ff&#34;&gt;null&lt;/span&gt;)
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                        {
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                            &lt;span style=&#34;color: #0000ff&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #0000ff&#34;&gt;new&lt;/span&gt; AssertionException(result + &amp;quot;&lt;span style=&#34;color: #8b0000&#34;&gt; was invoked by &lt;/span&gt;&amp;quot; + method + &amp;quot;&lt;span style=&#34;color: #8b0000&#34;&gt;, even though the type has the Immutable attribute.&lt;/span&gt;&amp;quot;);
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                        }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                    }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;                }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        &lt;span style=&#34;color: #0000ff&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #0000ff&#34;&gt;void&lt;/span&gt; InvokeCardSetters()
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        {
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            &lt;span style=&#34;color: #008000&#34;&gt;// this only exists to test that the test does indeed work&lt;/span&gt;
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            var c = &lt;span style=&#34;color: #0000ff&#34;&gt;new&lt;/span&gt; SomeImmutableClass();
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;            c.SomeImmutableValue = 123;
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;        }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #ffffff; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;    }
&lt;/pre&gt;&lt;pre style=&#34;background-color: #fbfbfb; margin: 0em; width: 100%; font-family: consolas,&amp;#39;Courier New&amp;#39;,courier,monospace; font-size: 12px&#34;&gt;}&lt;/pre&gt;&lt;/pre&gt;

&lt;p&gt;Nothing too complicated.&amp;#160; The main thing to look for is the &lt;strong&gt;callvirt&lt;/strong&gt; method, which the C# compiler always generates for classes.&amp;#160; Then, you match the operand to the method definition and viola!&lt;/p&gt;  &lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>How to Advocate Test Driven Development (TDD)</title>
      <link>http://bling.github.io/blog/2010/04/05/how-to-advocate-test-driven-development/</link>
      <pubDate>Mon, 05 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2010/04/05/how-to-advocate-test-driven-development/</guid>
      <description>&lt;div class=&#39;post&#39;&gt;
It seems that everywhere you read you will find blog posts asserting that it is difficult to convince others to use TDD, and that everyone talking about TDD is already a believer preaching to other believers.&amp;nbsp; So what&#39;s the best way convince others?&lt;br /&gt;
&lt;br /&gt;
I recently convinced a good buddy of me to starting doing TDD in his web development.&amp;nbsp; It took a while, but finally he &#34;saw the light.&#34;&amp;nbsp; He tried to relay the information to his coworker, and his coworker didn&#39;t react as positively, citing the common &#34;I don&#39;t want to waste time writing test code when I know my stuff works.&#34;&lt;br /&gt;
&lt;br /&gt;
There are many many &lt;b&gt;MANY&lt;/b&gt; hurdles of overcome to begin writing software using TDD.&amp;nbsp; I won&#39;t go into great detail since you can easily find relevant posts on the web, but basically, if you &lt;i&gt;have&lt;/i&gt; successfully transitioned to TDD that also implies that you have in one way or another adopted&amp;nbsp;&lt;a href=&#34;http://butunclebob.com/ArticleS.UncleBob.PrinciplesOfOod&#34;&gt;S.O.L.I.D. principles&lt;/a&gt; in software design.&lt;br /&gt;
&lt;br /&gt;
The reason I say this is because it is literally impossible to do TDD otherwise.&amp;nbsp; It is just plain &lt;b&gt;painful&lt;/b&gt;.&amp;nbsp; I&#39;ve been there.&amp;nbsp; It is so painful you shout in your head WTF are people thinking, how does this make my job easier?!&lt;br /&gt;
&lt;br /&gt;
Usually when this happens, you&#39;ll probably notice that most (or all) of the SOLID principles have been violated one way or another.&lt;br /&gt;
&lt;br /&gt;
&amp;lt;sarcasm&amp;gt;&lt;br /&gt;
&lt;ul&gt;&lt;li&gt;Single Responsibility Principle&lt;/li&gt;

&lt;ul&gt;&lt;li&gt;You mean 1 class to rule them all right?&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Open Closed Principle&lt;/li&gt;

&lt;ul&gt;&lt;li&gt;Does this have something to do with sockets?&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Liskov Substitution Principle&lt;/li&gt;

&lt;ul&gt;&lt;li&gt;I thought the point of Object Oriented Programming is that &lt;i&gt;everything&lt;/i&gt; is an object!&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Interface Segregation Principle&lt;/li&gt;

&lt;ul&gt;&lt;li&gt;What&#39;s an interface?&lt;br /&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;li&gt;Dependency Inversion Principle&lt;/li&gt;

&lt;ul&gt;&lt;li&gt;I don&#39;t get it...I only have 1 super object anyway, I don&#39;t have dependencies.&lt;/li&gt;
&lt;/ul&gt;&lt;/ul&gt;&amp;lt;/sarcasm&amp;gt;&lt;br /&gt;
&lt;br /&gt;
Notice that even though this post was supposed to be about how to advocate TDD, I ended up talking about SOLID instead for a bit.&amp;nbsp; What am I trying to get at?&lt;br /&gt;
&lt;br /&gt;
TDD spans from the individual to the team to the organization.&amp;nbsp; You need to be able to tackle it from all points of view.&amp;nbsp; The obsession of the word &#39;test&#39; has hurt TDD quite a bit.&amp;nbsp; Anyone who&#39;s spent any reasonable amount of time will assert that tests are just a means to drive the design.&amp;nbsp; Tests should read like a story (well to programmer eyes), and yes, I said read, as in &lt;i&gt;readable!&lt;/i&gt;&lt;br /&gt;
&lt;br /&gt;
At the individual level, you must convince them it forces you to design better code, because testing against badly designed code is not worth the pain/annoyance.&amp;nbsp; You must assert that better designed code is good because it also means being more maintainable and less bugs.&lt;br /&gt;
&lt;br /&gt;
At the team level, you must convince that collective code ownership is a good thing.&amp;nbsp; There should never be a situation where &#34;Bob&#39;s on vacation, we&#39;ll need to put a hold on Project A because only he knows it&#34;.&amp;nbsp; Tests serve as a way on how to interact with a specific service, and are a jump-start to figuring out how to actually &lt;b&gt;use&lt;/b&gt; a particular service.&amp;nbsp; Moreover, collective code ownership is a means of sharing and distributing knowledge.&lt;br /&gt;
&lt;br /&gt;
At the organizational level, you must convince managers that you are a professional software developer, and that it is your job to produce high quality work.&amp;nbsp; And if what is required to produce high quality work involves writing proper unit tests, following SOLID principles, and even other agile practices like pair programming, then you should be allowed (and optimally encouraged) to do so.&amp;nbsp; Now TDD might not work for everyone, or every organization, but I think everyone owes it to themselves to give it a fair chance.&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Improving Your Unit Testing Skills</title>
      <link>http://bling.github.io/blog/2009/10/19/improving-your-unit-testing-skills/</link>
      <pubDate>Mon, 19 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2009/10/19/improving-your-unit-testing-skills/</guid>
      <description>&lt;p&gt;Unit testing is &lt;em&gt;hard&lt;/em&gt;!  I came to this sad realization when my code which had a large test suite with near 100% code coverage, with every thought-of requirement unit tested, failed during integration testing.&lt;/p&gt;

&lt;p&gt;How is that possible?  I thought to myself.  Easy&amp;hellip;my unit tests were incomplete.&lt;/p&gt;

&lt;p&gt;Writing software is pretty complex stuff.  This is pretty evident in the level of difficulty in determining how good a software developer is.  Do you measure them based on lines of code?  Can you measure on time to completion of tasks?  Or maybe the feature to bugs coming back ratio?  If writing features alone can be this complicated, surely unit testing is just as (or more) complicated.&lt;/p&gt;

&lt;p&gt;First, you must be in a place where you can even &lt;em&gt;start&lt;/em&gt; testing your code.  Are you using dependency injection?  Are your components decoupled?  Do you understand mocking and can you use mocking frameworks?  You need an understanding of &lt;em&gt;all&lt;/em&gt; these concepts before you can even begin to unit test effectively.  Sure, you can unit test without these prerequisites, but the result will likely be pain and more pain because the you&amp;rsquo;ll be spending 90% of your time setting up a test rather than running it.&lt;/p&gt;

&lt;p&gt;But back to the point of this post.  Unit testing is hard because it&amp;rsquo;s one of those things where you&amp;rsquo;ll never really know how to do it properly until you&amp;rsquo;ve tried it.  And that assumes you&amp;rsquo;ve even made the step to do testing at all.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m at the point where my experience with writing unit tests allows me to set them up quickly with relative ease, and perform very concise tests where anyone reading the unit test would say &amp;ldquo;oh, he&amp;rsquo;s testing this requirement.&amp;rdquo;  However, the problem is that there&amp;rsquo;s still 2 problems that are hard to fix:
1. Is the test &lt;em&gt;actually&lt;/em&gt; correct?
2. Do the tests cover &lt;em&gt;all&lt;/em&gt; scenarios?&lt;/p&gt;

&lt;p&gt;(1) is obvious.  If the test is wrong then you might as well not run it all.  You must make it absolute goal to trust your unit tests.  If something fails, it should mean there&amp;rsquo;s a serious problem going on.  You can&amp;rsquo;t have &amp;ldquo;oh that&amp;rsquo;s ok, it&amp;rsquo;ll fail half the time, just ignore it.&amp;rdquo;&lt;/p&gt;

&lt;p&gt;(2) is also obvious.  If you don&amp;rsquo;t cover all scenarios, then your unit tests aren&amp;rsquo;t complete.&lt;/p&gt;

&lt;p&gt;In my case, I actually made both errors.  The unit test in question was calculating the time until minute X.  So in my unit test, I set the current time to 45 minutes.  The target time was 50 minutes.  5 minutes until minute 50, test passed.  Simple right?  Any veteran developer will probably know what I did wrong.  Yep&amp;hellip;if the current time was 51 minutes, I ended up with a negative result.  The test was wrong in that it only tested half of the problem.  It never accounted for time wrapping.  The test was also incomplete, since it didn&amp;rsquo;t test all scenarios.&lt;/p&gt;

&lt;p&gt;Fixing the bug was obviously very simple, but it was still ego shattering knowing that all the confidence I had previously was all false.  I went back to check out other scenarios, and was able to come up with some archaic scenarios where my code failed.  And this is probably another area where novice coders will do, where experienced coders will not: I only coded tests per-requirement.  What happens when 2 requirements collide with each other?  Or, what happens when 2 or more requirements must happen at the same time?  With this thinking I was able to come up with a scenario which led to 4 discrete requirements occurring at the same time.  Yeah&amp;hellip;not fun.&lt;/p&gt;

&lt;p&gt;Basically, in summary:
- Verify that your tests are correct.
- Strive to test for less than, equal, and greater than when applicable.
- Cross reference all requirements against each other, and chain them if necessary.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>TDD is Design…Unit Testing Legacy Code</title>
      <link>http://bling.github.io/blog/2009/10/07/tdd-is-designunit-testing-legacy-code/</link>
      <pubDate>Wed, 07 Oct 2009 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2009/10/07/tdd-is-designunit-testing-legacy-code/</guid>
      <description>&lt;div class=&#39;post&#39;&gt;
I’ve been listening to a bunch of podcasts lately and I came across a gem that was pretty darn useful.&amp;nbsp; It’s pretty old I suppose in technology standards, since it was recorded January 12, 2009, but it’s still worth a listen.&amp;nbsp; Scott Hanselman talks with Scott Bellware about TDD and design.&amp;nbsp; Find it &lt;a href=&#34;http://hanselminutes.com/default.aspx?showID=164&#34;&gt;here&lt;/a&gt;.&lt;br /&gt;
I’m merely reiterating what Scott has already said in the podcast, but it’s different when I can personally say that I’m joining the ranks of countless others who have seen the benefits of TDD.&lt;br /&gt;
&lt;br /&gt;
Now I can’t say that I’m a 100% TDD practitioner since I’m still learning how to write tests before code effectively, but I’ve already seen the improvements in &lt;b&gt;design&lt;/b&gt; in my code many times over just by merely writing unit tests.  At this point I&#39;d say half of my tests are written first, and the other after are after the fact.&lt;br /&gt;
&lt;br /&gt;
I’ve been through many phases of writing unit tests, it it took me &lt;b&gt;a long time&lt;/b&gt; to get it right (and I’m sure I have tons more to go).&amp;nbsp; It takes some experience to figure out how to properly write unit tests, and as a by-product how to make classes easily testable.&amp;nbsp; Code quality and testability go hand-in-hand, so if you find something difficult to test, it’s probably because it was badly designed to start.&lt;br /&gt;
&lt;br /&gt;
The first time I was introduced to unit testing in a work setting was when I was writing C++…and man it was ugly, not because it was C++, but because everything was tightly coupled and everything was a singleton.&amp;nbsp; The fixture setup was outrageous, and it was common to ::Sleep(5000) to make tests pass.&amp;nbsp; Needless to say, my first experience with unit testing was extremely painful.&lt;br /&gt;
&lt;br /&gt;
After a job switch and back to the C# world, I started reading more blogs, listening to more podcasts, and experimenting more.&amp;nbsp; I was given a project to prototype, and for phase 1 it was an entirely DDD experience with I got the opportunity to experiment with writing unit tests the “proper” way with dependency injection and mocking frameworks.&lt;br /&gt;
&lt;blockquote&gt;Unit tests are easy to write when you have highly decoupled components.&lt;br /&gt;
&lt;/blockquote&gt;Prototype was finished, and now I was back on the main project, and given a critical task to complete in 2 weeks.&amp;nbsp; I had to modify a class which was 10,000 lines long, which has &lt;b&gt;mega&lt;/b&gt; dependencies on everything else in the project.&amp;nbsp; Anything I touched could potentially break something else.&amp;nbsp; And of course…no unit tests whatsoever.&amp;nbsp; I like challenges and responsibility – but this was close to overkill.&amp;nbsp; This thing produces revenue for the company daily so I &lt;i&gt;really&lt;/i&gt; don’t want to mess anything up.&lt;br /&gt;
&lt;br /&gt;
First thing I realized was that there’s no way I could possibly write any unit test for something like this.&amp;nbsp; If the class file was 10,000 lines long, you can imagine the average line count for methods.&lt;br /&gt;
&lt;br /&gt;
And of course, the business team didn’t make things easy on me by asking that this feature be turned off in production, but turned on for QA.&amp;nbsp; So, the best option was to refactor the existing logic out to a separate class, extract an interface, implement the new implementation, and swap between the 2 implementations dynamically.&lt;br /&gt;
&lt;br /&gt;
After 4 days of analyzing and reading code to make sure I have a very detailed battle plan, I started extracting the feature to a new class.&amp;nbsp; The first iteration of the class was &lt;b&gt;UGLY&lt;/b&gt;.&amp;nbsp; I extracted out the feature I was changing to a separate class, but the method names were archaic and didn’t have any good “flow” to them.&amp;nbsp; I felt that I had to comment my unit tests just so whoever’s reading them could understand what’s happening, which brings up a point.&lt;br /&gt;
&lt;blockquote&gt;If you need to comment your unit tests, you need to redesign the API&lt;br /&gt;
&lt;/blockquote&gt;It took many iterations and refactoring of the interface to get it to the point where I found acceptable.&amp;nbsp; If you compared the 1st batch of unit tests to the last batch of unit tests it is like night and day.&amp;nbsp; The end result were unit tests which typically followed a 3-line pattern of setup/execute/verify.&amp;nbsp; Brain dead simple.&lt;br /&gt;
&lt;br /&gt;
The last thing to do was to reintegrate the class into the original class.&amp;nbsp; For this I was back to compile/run/debug/cross-fingers, but I had full confidence that whenever I called anything in the extracted class it would work.&lt;br /&gt;
&lt;br /&gt;
An added benefit is that I didn’t add another 500 lines of code to the already gigantic class.&amp;nbsp; Basically, in summary:    &lt;br /&gt;
&lt;br /&gt;
&lt;ul&gt;&lt;li&gt;&lt;span style=&#34;color: #4c4c4c;&#34;&gt;Get super mega long legacy code class files&lt;/span&gt; &lt;/li&gt;
&lt;li&gt;Extract feature into separate file as close to original implementation as possible (initially will be copy-paste)&lt;/li&gt;
&lt;li&gt;Run and make sure things don’t die&lt;/li&gt;
&lt;li&gt;Write unit tests for extracted class (forces you to have a better understanding of the code modifications, and the requirements)&lt;/li&gt;
&lt;li&gt;Make sure unit tests cover all possible scenarios of invocation from original class&lt;/li&gt;
&lt;li&gt;Start refactoring and redesigning to better testability, while maintaining all previous tests&lt;/li&gt;
&lt;li&gt;Done!&amp;nbsp; Repeat as necessary!&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Getting code coverage working on TeamCity 5 with something other than NUnit</title>
      <link>http://bling.github.io/blog/2009/09/13/getting-code-coverage-working-on/</link>
      <pubDate>Sun, 13 Sep 2009 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2009/09/13/getting-code-coverage-working-on/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ve been experimenting lately with &lt;a href=&#34;http://www.jetbrains.net/confluence/display/TW/TeamCity+EAP?eap&#34;&gt;TeamCity 5 EAP&lt;/a&gt; and so far it&amp;rsquo;s been a pretty awesome experience.  I was up and running within minutes and I was swarmed with beautiful graphs and statistics with specifics even per-test.  Getting something like that up with &lt;a href=&#34;http://ccnet.thoughtworks.com/&#34;&gt;CC.NET&lt;/a&gt; is not a trivial task.&lt;/p&gt;

&lt;p&gt;Anywho, with TC5 code coverage is one of the cool new features added for .NET, but unfortunately only &lt;a href=&#34;http://nunit.org&#34;&gt;NUnit&lt;/a&gt; is supported.  Not that that&amp;rsquo;s a bad thing, but some people  prefer to use other testing tools.  Two notable contenders are &lt;a href=&#34;http://xunit.codeplex.com&#34;&gt;xUnit.net&lt;/a&gt; and &lt;a href=&#34;http://www.gallio.org&#34;&gt;MbUnit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;I like the fact (pun intended) that xUnit.net makes it a point to prevent you from doing bad practices (like &lt;code&gt;[ExpectedException]&lt;/code&gt;), and I like how MbUnit is so bleeding edge with useful features (like &lt;code&gt;[Parallelizable]&lt;/code&gt; and a vast availability of assertions).&lt;/p&gt;

&lt;p&gt;And with that I set up to figure out how to get TC working with Gallio, but the following should work with any test runner.&lt;/p&gt;

&lt;p&gt;It certainly was a pain to set up because it took a lot of trial and error but eventually I figured it out.  I analyzed the build logs provided in each build report and noticed something interesting&amp;hellip;specifically:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;[13:51:23]: ##teamcity[importData type=’dotNetCoverage’ tool=’ncover’ file=’C:\TeamCity5\buildAgent\temp\buildTmp\tmp1C93.tmp’]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;span class=&#34;k&#34;&gt;[13:51:30]: ##teamcity[buildStatisticValue key=’CodeCoverageL’ value=’94.85067’]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;[13:51:30]: ##teamcity[buildStatisticValue key=’CodeCoverageM’ value=’97.32143’]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;[13:51:30]: ##teamcity[buildStatisticValue key=’CodeCoverageC’ value=’98.68421’]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;[13:51:30]: ##teamcity[buildStatisticValue key=’CodeCoverageAbsLCovered’ value=’921.0’]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;[13:51:30]: ##teamcity[buildStatisticValue key=’CodeCoverageAbsMCovered’ value=’218.0’]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;[13:51:30]: ##teamcity[buildStatisticValue key=’CodeCoverageAbsCCovered’ value=’75.0’]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;[13:51:30]: ##teamcity[buildStatisticValue key=’CodeCoverageAbsLTotal’ value=’971.0’]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;[13:51:30]: ##teamcity[buildStatisticValue key=’CodeCoverageAbsMTotal’ value=’224.0’]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;[13:51:30]: ##teamcity[buildStatisticValue key=’CodeCoverageAbsCTotal’ value=’76.0’]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The first message happens after NCover.Console is done its thing.  After NCoverExplorer is done its thing, the statistics are published.  I set out to mimic this functionality with Gallio, but what&amp;rsquo;s described here should work with any test runner.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Disable code coverage in TC.  We&amp;rsquo;re doing it manually instead.&lt;/li&gt;
&lt;li&gt;In your build script, run your unit tests with NCover and generate a coverage.xml report.&lt;/li&gt;
&lt;li&gt;Run NCoverExplorer on coverage.xml and generate reports ncoverexplorer.xml and index.html.&lt;/li&gt;
&lt;li&gt;Create a zip file of index.html and name it coverage.zip.&lt;/li&gt;
&lt;li&gt;Configure coverage.zip to be an artifact in your TC configuration (this is to enable the tab).&lt;/li&gt;
&lt;li&gt;Parse out ncoverexplorer.xml with XPath and output the statistics.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Certainly a lot of things to do just for the sake of pretty statistics reporting&amp;hellip;.but it was the weekend and I was bored.  With the help of &lt;a href=&#34;http://msbuildtasks.tigris.org/&#34;&gt;MSBuildCommunityTasks&lt;/a&gt;, the zip file and XML parsing was made a lot easier.&lt;/p&gt;

&lt;p&gt;After that, viola!  Code coverage + Gallio on TeamCity 5!!!&lt;/p&gt;

&lt;p&gt;Unfortunately, NCoverExplorer&amp;rsquo;s report only reports the # total of classes and nothing about unvisited or covered, so for those values I set to 0/0/0 (BTW, you need all values present for the statistics to show).  A task for next weekend!!!&lt;/p&gt;

&lt;p&gt;(Edit: I suppose I could should also mention that you could technically avoid all the trouble above and hack it with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;#if NUNIT

using TestFixtureAttribute = NUnit.Framework.TestFixtureAttribute;

using TestAttribute = NUnit.Framework.TestAttribute;

#endif
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And it&amp;rsquo;ll work just fine as well).&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>