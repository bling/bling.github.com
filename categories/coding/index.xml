<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding on bling on software</title>
    <link>http://bling.github.io/categories/coding/</link>
    <description>Recent content in Coding on bling on software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 19 Apr 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://bling.github.io/categories/coding/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>On TypeScript</title>
      <link>http://bling.github.io/blog/2013/04/19/on-typescript/</link>
      <pubDate>Fri, 19 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2013/04/19/on-typescript/</guid>
      <description>

&lt;h1 id=&#34;what-s-the-deal:2eaa3d5702d7bfa3dcdaf47ea31e215c&#34;&gt;What&amp;rsquo;s the deal?&lt;/h1&gt;

&lt;p&gt;For the past week I&amp;rsquo;ve been fortunate to work on an internal project which was purely greenfield and built on Node/Express on the backend, and AngularJS on the front-end.  It was a ton of fun and I learned a lot in the process, most particularly TypeScript and CoffeeScript.&lt;/p&gt;

&lt;p&gt;TypeScript was of interest because the application I was writing contained some pretty complex calculations.  The existing implementation was in Java, and at first glance it seemed like it would be a good idea to have some type safety whilst reimplementing the algorithm.&lt;/p&gt;

&lt;h1 id=&#34;getting-started:2eaa3d5702d7bfa3dcdaf47ea31e215c&#34;&gt;Getting Started&lt;/h1&gt;

&lt;p&gt;I don&amp;rsquo;t know why there&amp;rsquo;s this misconception that you need to have Microsoft tooling to use Typescript, but it is 100% false and a myth.  To install it you just run &lt;code&gt;npm install typescript&lt;/code&gt;.  Yes!  It&amp;rsquo;s just a standard node package.  Once it&amp;rsquo;s installed you have access to a &lt;code&gt;tsc&lt;/code&gt; command, similar to how you would use the &lt;code&gt;coffee&lt;/code&gt;, i.e. you give it input, and it spits output.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve ever been to &lt;a href=&#34;http://typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt;&amp;rsquo;s website, you will have seen the rather impressive playground where you can see side by side Javascript vs Typescript.  This is a trick!  It gives you the illusion that you can simply annotate variables with types and it will automatically check only those types.  This is only half true.  Let&amp;rsquo;s look at a innocent Node application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That is just plain &amp;lsquo;ol Javascript, and if the claim that all Javascript is valid Typescript, this should compile fine.  Except that it doesn&amp;rsquo;t&amp;hellip;we are greeted with the following error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;The name &amp;#39;require&amp;#39; does not exist in the current scope.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As it turns out, if you&amp;rsquo;re using Typescript you need to tell the compiler of &lt;em&gt;every&lt;/em&gt; object and function that you&amp;rsquo;re using.  In the above example, the compiler doesn&amp;rsquo;t know anything about &lt;code&gt;require&lt;/code&gt;, so it threw an error.&lt;/p&gt;

&lt;p&gt;The way to correct this is with definition files.  These are like header files and they define the API of a module.  The pseudo standard for definition files currently lives in a GitHub repository named &lt;a href=&#34;https://github.com/borisyankov/DefinitelyTyped&#34;&gt;DefinitedlyTyped&lt;/a&gt;.  This contains definition files for many popular libraries and is actively updated by the community.&lt;/p&gt;

&lt;p&gt;Once you have a definition file, you add &lt;code&gt;///&amp;lt;reference path=&amp;quot;./d.ts/requirejs/require.d.ts&amp;quot;/&amp;gt;&lt;/code&gt; to the top of the file, and the code will compile.&lt;/p&gt;

&lt;p&gt;The second option is to add &lt;code&gt;declare var require: any;&lt;/code&gt; to the top of the file, effectively telling the compiler to ignore anything to do with that variable.&lt;/p&gt;

&lt;p&gt;Either way, this was completely different from my initial expectations.  I thought that I would be able to take a large application, rename everything from &lt;code&gt;js&lt;/code&gt; to &lt;code&gt;ts&lt;/code&gt;, and then slowly upgrade the code to Typescript.  This is obviously not possible.  For this to work, you would need to define an application definition file, which references all other definition files (or declare variables for those that do not have definition files), and then for &lt;em&gt;every file in your project&lt;/em&gt;, you would ///reference the application definition file.&lt;/p&gt;

&lt;p&gt;I suppose this is a necessary evil for type checking, although it would have been nice to have this baked into the compiler to ease the migration path of existing applications.&lt;/p&gt;

&lt;h1 id=&#34;clean-output:2eaa3d5702d7bfa3dcdaf47ea31e215c&#34;&gt;Clean output&lt;/h1&gt;

&lt;p&gt;One of the nice things about TypeScript is that the output is very clean and predictable.  For example, here is an empty class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will compile to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All classes are done so with an immediately executed anonymous function.  If you define &lt;code&gt;Foo&lt;/code&gt; as &lt;code&gt;export class Foo&lt;/code&gt;, then the output will have an extra line at the bottom: &lt;code&gt;exports.Foo = Foo;&lt;/code&gt;.  In other words, it&amp;rsquo;s got first class support for the CommonJS syntax (as well as AMD).&lt;/p&gt;

&lt;h1 id=&#34;competing-thought-processes:2eaa3d5702d7bfa3dcdaf47ea31e215c&#34;&gt;Competing thought processes&lt;/h1&gt;

&lt;p&gt;For people coming from C#, it will feel very comfortable, because it is &lt;em&gt;extremely&lt;/em&gt; similar to C#.  You have classes, methods, modules (aka namespaces), just like you have in C#.  If you try to use a method that doesn&amp;rsquo;t exist, the compiler will complain.  These features are the bread and butter of compiled languages and people coming from Visual Studio (the majority of the audience) will feel very comfortable.&lt;/p&gt;

&lt;p&gt;Then why is it that I did &lt;em&gt;not&lt;/em&gt; enjoy writing in Typescript?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m about 99% sure that I was just so used to working in untyped Javascript that I became annoyed that I had to &amp;ldquo;annotate yet another variable&amp;rdquo;.  TypeScript doesn&amp;rsquo;t force you to annotate every variable, in fact, you could annotate nothing and it&amp;rsquo;ll still compile (as long as you have the definition files).  But if you&amp;rsquo;re going to use TypeScript it seems silly not to use types.&lt;/p&gt;

&lt;p&gt;But what this comes down to is the classic static vs dynamic languages.  Static proponents will state that the compiler saves you from a lot of mistakes earlier on.  Dynamic proponents will state that &amp;ldquo;if it quacks like a duck, it&amp;rsquo;s a duck, I shouldn&amp;rsquo;t need to declare it&amp;rdquo;.  They&amp;rsquo;re both right.&lt;/p&gt;

&lt;p&gt;Either way, given an open mind and some time, you can be productive in either environment, and makes you a better developer in the end.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>.NET/WPF to HTML/CSS/Javscript</title>
      <link>http://bling.github.io/blog/2013/04/13/dot-net-slash-wpf-to-html-slash-css-slash-javscript/</link>
      <pubDate>Sat, 13 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2013/04/13/dot-net-slash-wpf-to-html-slash-css-slash-javscript/</guid>
      <description>

&lt;h1 id=&#34;in-the-beginning:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;In the beginning&amp;hellip;&lt;/h1&gt;

&lt;p&gt;For the vast majority of my career I&amp;rsquo;d say I was a Microsoft guy.  I took Java in university and toyed around with Linux at home, but what paid the bills was my knowledge and expertise in Microsoft technologies that I&amp;rsquo;ve built up over the years.&lt;/p&gt;

&lt;p&gt;Then Metro and Windows 8 came, and the writing was on the wall.  Microsoft really screwed up.  In their efforts to play catch up, they alienated their business customers and came up with solutions that consumers did not want.  Despite their best efforts they could not stop the avalanche that was Node and HTML5.  Everyone was moving to HTML5, and even Microsoft themselves could not ignore this as now they&amp;rsquo;re supporting hosting Node on Azure.&lt;/p&gt;

&lt;p&gt;People who have been in the industry for a long time will say this is just the same desktop vs web debacle and that it is cyclical and that people will realize that the web isn&amp;rsquo;t good enough and go back to desktop applications.  But I think this time is different.  This time around, the browser has hardware acceleration.&lt;/p&gt;

&lt;p&gt;Performance has always been the deciding factor for going back to the desktop.  I don&amp;rsquo;t think that argument holds true anymore.  It&amp;rsquo;s clear you can build some amazing applications on the web now that perform well.  You can build an IDE in the browser, like &lt;a href=&#34;http://c9.io&#34;&gt;Cloud9&lt;/a&gt;, or you could create impressive animations like &lt;a href=&#34;http://famo.us&#34;&gt;Famous&lt;/a&gt; demonstrates.  And even 3D games are possible now.&lt;/p&gt;

&lt;p&gt;The web is here to stay, and with more and more people having phones and tablets as their primary computing devices (and &lt;em&gt;not&lt;/em&gt; a desktop), naturally the technologies we use to build around these devices become more important, i.e. technologies that are cross platform and work on every device from phone to desktop.&lt;/p&gt;

&lt;p&gt;So what happens when you throw a C#/WPF guru into the water with no knowledge of HTML, CSS, or Javascript?&lt;/p&gt;

&lt;h1 id=&#34;and-then-there-was-pain:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;And then there was pain&amp;hellip;&lt;/h1&gt;

&lt;p&gt;From Friday to Monday, I went from a Windows 7 machine with Visual Studio, Resharper, PowerShell, Blend to a OSX machine.  I left out the tools on purpose, because literally I had none.  The only thing I knew was that I would be working on HTML/Javascript and I&amp;rsquo;d have to bring my own knives to the kitchen.&lt;/p&gt;

&lt;p&gt;Except that I had no knives&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;baby-steps:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Baby steps&lt;/h1&gt;

&lt;p&gt;I was comfortable with the command line, since I&amp;rsquo;m a huge Linux fan and prefer a CLI over a GUI most of the time.  But it became clear that I had acquired quite a bit of PowerShell knowledge in my previous efforts to force myself to learn it, i.e. replace &lt;code&gt;cmd.exe&lt;/code&gt; with &lt;code&gt;powershell.exe&lt;/code&gt;.  When I tried to do &lt;code&gt;ls | % { $_.Length }&lt;/code&gt; I was in for a sad realization&amp;hellip;these aren&amp;rsquo;t objects anymore.  Damn, all that muscle memory can&amp;rsquo;t be used here.  Damn you vendor lock in!&lt;/p&gt;

&lt;p&gt;But as you can see, I still used &lt;code&gt;ls&lt;/code&gt; instead of &lt;code&gt;dir&lt;/code&gt; or &lt;code&gt;gcm&lt;/code&gt;, so I was already in this weird world of mixing UNIX with PowerShell, and moving back to UNIX wasn&amp;rsquo;t too bad since I didn&amp;rsquo;t have to remember a whole new set of commands for common use cases.  Although it annoys me from time to time that I cannot just &lt;code&gt;(get-date).addweeks(3)&lt;/code&gt; from the command line anymore, I&amp;rsquo;m going to have to live without it.&lt;/p&gt;

&lt;p&gt;Next up was getting my environment set up.  A quick Google search showed that &lt;a href=&#34;https://github.com/mxcl/homebrew&#34;&gt;Homebrew&lt;/a&gt; was the hotness, so I installed it, and yes, it was pretty cool.  It still has a ways to go before it&amp;rsquo;s comparable to Linux package managers like &lt;code&gt;apt-get&lt;/code&gt; or my favorite, Archlinux&amp;rsquo;s &lt;code&gt;pacman&lt;/code&gt;, but that is understandable since OSX is not built from the ground up using package managers like Linux distributions typically are.  For the most part, it worked as advertised, and after &lt;code&gt;brew install git&lt;/code&gt; I was ready to check out the source code.&lt;/p&gt;

&lt;h1 id=&#34;making-the-first-commit:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Making the first commit&lt;/h1&gt;

&lt;p&gt;Naturally, the first thing I did was download &lt;a href=&#34;http://www.jetbrains.com/webstorm/&#34;&gt;Webstorm&lt;/a&gt;.  Programming without an IDE, yeah right!  I&amp;rsquo;m a professional!&lt;/p&gt;

&lt;p&gt;Alright, let&amp;rsquo;s get working.  Let&amp;rsquo;s start up Webstorm.  OK, it&amp;rsquo;s loading&amp;hellip;loading&amp;hellip;loading&amp;hellip;loading.  OK, great, that&amp;rsquo;s a little faster than Visual Studio, so I&amp;rsquo;m happy.  OK, it looks familiar.  It&amp;rsquo;s got a side bar with my files, it&amp;rsquo;s got navigation like Resharper, let&amp;rsquo;s start working!&lt;/p&gt;

&lt;p&gt;Blah blah blah, type type type, &lt;code&gt;this.&lt;/code&gt; bam!  What the hell?  Why did autocomplete just list everything in the project?  I&amp;rsquo;m in the current file and clearly it only has 4 properties defined.&lt;/p&gt;

&lt;h1 id=&#34;and-so-it-starts:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;And so it starts&lt;/h1&gt;

&lt;p&gt;As it turns out, &lt;code&gt;this.foo&lt;/code&gt; is the same as &lt;code&gt;this[&#39;foo&#39;]&lt;/code&gt; in Javascript, effectively making every object into a dictionary.  Webstorm&amp;rsquo;s take on this dynamic behavior is to give you every possible option in the project, effectively turning the feature into a glorified spell checker.  Webstorm has an option to disable this, so I did and now it behaved more like what I expected.  Nonetheless, one thing was crystal clear &amp;ndash; the &amp;ldquo;this dot&amp;rdquo; method of working (and discovering the API) is not possible anymore in the Javascript world.&lt;/p&gt;

&lt;p&gt;It was apparent now that the IDE was still in its infant stages.  It had some refactorings built in, but for the most part it was not remotely comparable to what was available in Resharper/C# or IntelliJ.&lt;/p&gt;

&lt;p&gt;I have always been a big proponent of tools.  And back in the .NET days I found it incredibly frustrating when some coworkers preferred working &lt;em&gt;without&lt;/em&gt; Resharper.  Yes, it was much faster.  But even so, even after waiting for Resharper during its sluggish moments, it saved you time in the end, which in my mind meant you were more efficient with your time.&lt;/p&gt;

&lt;p&gt;I consider myself lucky because if it weren&amp;rsquo;t for Webstorm being in its infant stages, I probably would not have done what I was going to do next&amp;hellip;venture into vim.&lt;/p&gt;

&lt;h1 id=&#34;vim:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Vim&lt;/h1&gt;

&lt;p&gt;I still can&amp;rsquo;t remember the exact reason why I decided to learn Vim.  The majority of my coworkers were using Sublime Text.  Maybe I was stubborn and wanted to be different.  Maybe I was curious and wanted to see why this 30 year old editor was still so popular.  Whatever the reason, I decided to use Vim code turkey and refused to open anything else up until I convinced myself that I gave it a fair chance.&lt;/p&gt;

&lt;p&gt;The rest is &lt;a href=&#34;http://bling.github.io/blog/2013/02/10/love-affair-with-vim/&#34;&gt;history&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t get me wrong, I was &lt;em&gt;hugely&lt;/em&gt; unproductive for the first couple weeks.  But I can confidently say that as a proficient Vim user that I am now, I am &lt;em&gt;far&lt;/em&gt; more efficient than I was before.&lt;/p&gt;

&lt;h1 id=&#34;how-much-is-your-time-worth:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;How much is your time worth?&lt;/h1&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://bling.github.io/img/editor-learning-curve.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I can vouch for this popular comic because I have tried every editor on there (yes even Emacs) and I can confirm that it is true.  There really is no contestant that can match the speed and flexibility of modal editing (and why most other editors out there have a vi emulation mode).  New users are often confused why the default mode in vim&amp;rsquo;s default mode is&amp;hellip;normal mode and not insert mode (like every other editor).&lt;/p&gt;

&lt;p&gt;As it turns out, the majority of our time as programmers are spent &lt;em&gt;reading and editing&lt;/em&gt; text, not writing it.  And that is why vim&amp;rsquo;s default mode is normal mode.  Right off the bat you have 26 different commands that you can use to operate on text.  Add a shift, and you have another 26 commands.  In normal mode, you have 52 unique operations that is a single/double keystroke away!&lt;/p&gt;

&lt;p&gt;Whether it&amp;rsquo;s vim, or emacs, or Sublime text, invest in your editor and learn what it can do for you.  Even if it&amp;rsquo;s just a couple seconds saved here and a couple seconds saved there, do realize that as programmers we stare at a text editor the vast majority of our working hours.  And all those seconds add up.&lt;/p&gt;

&lt;h1 id=&#34;javascipt-was-easy-to-learn:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Javascipt was easy to learn&lt;/h1&gt;

&lt;p&gt;Well, for me it was.  &lt;a href=&#34;http://jshint.com&#34;&gt;JSHint&lt;/a&gt; caught all the newbie mistakes.  C# already had lambdas and closures, so programming in the functional style of Javascript was weird at first, but ultimately it was a subset of the features available to C#.  Basically, if I were to program in C# like I did in Javascript, it would look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// this is effectively window&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;= &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                            &lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yes, there is variable hoisting, privileged vs public functions, truthy and falsey values, prototypical inheritance, etc. but like any language, this is just syntax.  You read tutorials, you try it out, you struggle against your previous habits, but then you figure it out.&lt;/p&gt;

&lt;h1 id=&#34;javascript-changed-the-way-i-think:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Javascript changed the way I think&lt;/h1&gt;

&lt;p&gt;There is something incredibly liberating to just add some random property to an existing object, or change its prototype altogether.  At first I fought against this quite heavily.  We need constants!  We need well defined interfaces!  But in the end, it didn&amp;rsquo;t matter.  We had some conventions, we followed them, and everything worked just fine.&lt;/p&gt;

&lt;p&gt;Over time all the things I thought I needed, like intellisense, well defined interfaces, static analysis, I didn&amp;rsquo;t actually need them.  Sure, they are nice to have around, but I was productive all the same without them.  And the users using our application didn&amp;rsquo;t care whether it was written in C#/WPF or in HTML/Javascript, as long as it did was it was supposed to do.&lt;/p&gt;

&lt;p&gt;Ultimately, what still mattered were architectural decisions.  We still had services, models, and views for properly separating data from business logic and presentation.  We had unit tests which tested all the functionality.  All of these concepts were very important in C# and WPF, and they are just as important here.&lt;/p&gt;

&lt;h1 id=&#34;javascript-made-me-a-better-developer:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Javascript made me a better developer&lt;/h1&gt;

&lt;p&gt;Writing in Javascript made me realize just how much I relied on IDEs and static analysis.  Sometimes I would purposely abuse the IDE to do the job faster.  For example, if I wanted to refactor something, rather than using refactoring tools, sometimes the easier way is to just delete code and then go through the error list one by one.  Obviously you can&amp;rsquo;t use this technique in Javascript.&lt;/p&gt;

&lt;p&gt;Another thing I would do is purposely write bad code, wait for Resharper to come up with the suggestion, and then auto-correct it.&lt;/p&gt;

&lt;p&gt;These were backwards patterns.&lt;/p&gt;

&lt;p&gt;With Javascript, I found myself being proactive again.  I understood the code more.  I used snippets a lot more.  And since I was using vim, I never &lt;em&gt;ever&lt;/em&gt; had to wait for the IDE anymore, which that in itself changed the way I worked.&lt;/p&gt;

&lt;h1 id=&#34;css-is-one-big-hack:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;CSS is one big hack&lt;/h1&gt;

&lt;p&gt;Going from XAML to CSS was extremely annoying and where I&amp;rsquo;ve struggled the most with the transition.  If you want to vertical center something in XAML, you set &lt;code&gt;VerticalAlignment=Center&lt;/code&gt; on it and you&amp;rsquo;re done.  How do you do that in CSS?  Well, you could hack it with &lt;code&gt;table-cell&lt;/code&gt;, or you could hack it with negative margins, or you could hack it with absolute positioning, or &lt;code&gt;line-height&lt;/code&gt; or something else.  But point is, they are all hacks.&lt;/p&gt;

&lt;p&gt;Coming from XAML, CSS is one big hack.  I want to create a grid that resizes to the window size, and is always 30% left side and 70% right side.  In XAML, I just do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;Grid&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;Grid.ColumnDefinitions&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;ColumnDefinition&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Width=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;3*&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;ColumnDefinition&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Width=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;7*&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/Grid.ColumnDefinitions&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In CSS, here&amp;rsquo;s one way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nf&#34;&gt;#left&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;30%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;100%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;#right&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;margin-left&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;30%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;100%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;100%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, more hacks.  And it&amp;rsquo;ll only work if the parent element has a size defined.&lt;/p&gt;

&lt;p&gt;Or you could do it this way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nf&#34;&gt;#left&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;absolute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;70%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;bottom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;#right&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;absolute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;30%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;bottom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But it&amp;rsquo;s not going to work if the parent element doesn&amp;rsquo;t have a position of &lt;code&gt;absolute&lt;/code&gt; or &lt;code&gt;relative&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once I let go of trying to be &amp;ldquo;correct&amp;rdquo; from a XAML point of view and just accepted that CSS is just hacks over top of a document model that was never designed to be used like it is today, I actually really enjoyed CSS.&lt;/p&gt;

&lt;p&gt;It became a fun challenge, to be presented with a UX design and then think about what kind of hacks I&amp;rsquo;d have to do to make it look exactly the same.  Pseudo elements became my new best friend.&lt;/p&gt;

&lt;p&gt;There was no such kind of fun in the XAML world &amp;ndash; if the UX designer could do something in Illustrator, I could do the same in Blend no problem.  There was no challenge.&lt;/p&gt;

&lt;p&gt;It was all fun and games until&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;enter-the-beast-internet-explorer:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Enter the beast&amp;hellip;Internet Explorer&lt;/h1&gt;

&lt;p&gt;If you charged X amount of dollars for a project, it should be X raised to the number of versions older than IE10 you have to support.  If it&amp;rsquo;s IE9, it&amp;rsquo;s X^1.  If it&amp;rsquo;s IE8, it&amp;rsquo;s X^2.  How about IE7, X^3 !&lt;/p&gt;

&lt;p&gt;That would cover the cost of sheer annoyance and frustration that developers and UX designers will have to face, not to mention the increased amount of time to support these older browsers.  Oh, you want to support responsive design?  Ooops, IE8 doesn&amp;rsquo;t support media queries.  Oh, you want to have shadows and gradients, well you&amp;rsquo;re only going to get mono colored boxes instead.  Oh, you want it to run fast?  Here, take a 20x performance hit instead.&lt;/p&gt;

&lt;p&gt;If you could do it, my recommendation for supporting IE is to have the page be one big fat button that spans the entire screen that says inside with two buttons: install Chrome, or install Firefox.  It worked for Flash and Silverlight!&lt;/p&gt;

&lt;h1 id=&#34;back-to-an-ide-maybe:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Back to an IDE&amp;hellip;maybe?&lt;/h1&gt;

&lt;p&gt;I never did venture back.  With my stubbornness to stick with Vim, I ended up installing plugins and optimizing my workflow around it.  I even created my own &lt;a href=&#34;http://bling.github.io/dotvim&#34;&gt;distribution&lt;/a&gt;.  Chrome became my pseudo-IDE and I used its debugging tools heavily.  I used &lt;a href=&#34;http://livereload.com&#34;&gt;LiveReload&lt;/a&gt; from time to time.  And coupled with a zsh terminal I had an extremely productive development environment.  In the end I didn&amp;rsquo;t have a reason to use Webstorm anymore because at this point it &lt;em&gt;slowed me down&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;programming-became-fun-again:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Programming became fun again&lt;/h1&gt;

&lt;p&gt;Perhaps the biggest change I experienced, once I got over the initial pains, was that I really enjoyed programming again.  When I was writing in Javascript, I felt like a hacker.  When I was programming in C#, I felt like a programmer.  Maybe this is temporary and I&amp;rsquo;ll feel the same way when my experience level in Javascript matches with C#.  But for now, I&amp;rsquo;m enjoying that feeling of rediscovering my inner child of building something from nothing.&lt;/p&gt;

&lt;h1 id=&#34;finale:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Finale&lt;/h1&gt;

&lt;p&gt;Wow.  I didn&amp;rsquo;t expect this blog post to be this long.  But if you got this far I hope you enjoyed the read, because I had fun writing about my experiences.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SnoopShell: Evolution</title>
      <link>http://bling.github.io/blog/2012/07/29/snoopshell-evolution/</link>
      <pubDate>Sun, 29 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2012/07/29/snoopshell-evolution/</guid>
      <description>

&lt;p&gt;It’s been a while since I last announced &lt;a href=&#34;http://blingcode.blogspot.com/2012/07/snoopshell-marriage-of-snoop-wpf-and.html&#34;&gt;SnoopShell&lt;/a&gt;, where I took some PowerShell and injected that into Snoop.  Well, I didn’t stop there!  I decided to continue working on it and adding more useful features.&lt;/p&gt;

&lt;p&gt;Well, a bunch of things have changed.  For one, it’s no longer targeted at .NET 4 and PS v3 anymore (and you’ll soon know why).  Second, there’s a bunch of new features!&lt;/p&gt;

&lt;h1 id=&#34;automatic-profile-loading:f539d02145ec1550ef0265d4aa3eab64&#34;&gt;Automatic Profile Loading&lt;/h1&gt;

&lt;p&gt;Upon startup, the shell will look for a couple well known locations and automatically dot-source them to load them into the current session.  This works the same as the standard $profile.  The filename needs to be &lt;code&gt;SnoopProfile.ps1&lt;/code&gt;, and the search paths are &lt;code&gt;%USERPROFILE%,&lt;/code&gt; the &lt;code&gt;WindowsPowerShell&lt;/code&gt;, and the &lt;code&gt;Scripts&lt;/code&gt; folder deployed with Snoop.exe.&lt;/p&gt;

&lt;p&gt;This is incredibly useful since you can write your own custom functions and scripts and have them available to you all the time.  As an added bonus, because of the dynamic nature of PowerShell, you can make modifications to the &lt;code&gt;SnoopProfile.ps1,&lt;/code&gt; save, and then invoke a &lt;code&gt;. $profile&lt;/code&gt; to reload the profile and update the session with your changes (all without restarting the application).&lt;/p&gt;

&lt;p&gt;That’s awesome sauce indeed ;-)&lt;/p&gt;

&lt;h1 id=&#34;powershell-provider:f539d02145ec1550ef0265d4aa3eab64&#34;&gt;PowerShell Provider&lt;/h1&gt;

&lt;p&gt;This was more of a for-fun thing at first just to see if I could do it.  Writing a PS provider is not fun at all, since it’s not very well documented and I actually needed some help from ILSpy to figure out how things really worked.  Nonetheless, it’s got some basic functionality that is helpful to navigate around.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://lh6.ggpht.com/-hpRCncySB3g/UBXOagD2xII/AAAAAAAAALs/qBCKmxV-B0M/s1600-h/image%25255B10%25255D.png&#34;&gt;&lt;img style=&#34;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&#34; title=&#34;image&#34; border=&#34;0&#34; alt=&#34;image&#34; src=&#34;http://lh6.ggpht.com/-QMqNxt2DmZ8/UBXOa1SVqwI/AAAAAAAAAL0/ULMweSOFso0/image_thumb%25255B8%25255D.png?imgmax=800&#34; width=&#34;654&#34; height=&#34;399&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Yep, the selected grid actually has a path, like how you would navigate the file system.  Let’s see what happens with a &lt;code&gt;cd&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://lh4.ggpht.com/-R3wQmpiA7dw/UBXObb7FNsI/AAAAAAAAAL8/z3mgZwnFLok/s1600-h/image%25255B15%25255D.png&#34;&gt;&lt;img style=&#34;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&#34; title=&#34;image&#34; border=&#34;0&#34; alt=&#34;image&#34; src=&#34;http://lh3.ggpht.com/-mdRas9rg4gs/UBXOb4W6z7I/AAAAAAAAAME/pNH-1jzMbGA/image_thumb%25255B11%25255D.png?imgmax=800&#34; width=&#34;654&#34; height=&#34;399&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Cool, you can &lt;code&gt;cd&lt;/code&gt; into the child “directory”, and it’ll automatically select the item in the tree view as well.  What if you’re lazy and don’t want to type?&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://lh3.ggpht.com/-QgZ0iBA1AKw/UBXOcPU9uDI/AAAAAAAAAMM/iy9qHsS0zHA/s1600-h/image%25255B20%25255D.png&#34;&gt;&lt;img style=&#34;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&#34; title=&#34;image&#34; border=&#34;0&#34; alt=&#34;image&#34; src=&#34;http://lh5.ggpht.com/-YV-f5-aPnP0/UBXOcRFGPkI/AAAAAAAAAMU/oo85Qg9fohU/image_thumb%25255B14%25255D.png?imgmax=800&#34; width=&#34;654&#34; height=&#34;399&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wildcards are supported.  And because the visual tree doesn’t exactly require unique names, I needed to trick it by adding a number after each duplicate item.  So the above matches the third Rectangle child of the Grid.&lt;/p&gt;

&lt;h1 id=&#34;code-injection:f539d02145ec1550ef0265d4aa3eab64&#34;&gt;Code Injection&lt;/h1&gt;

&lt;p&gt;One of the cool things about Javascript is that it’s so darn easy to test.  You make a change, save, reload, and you’ll immediately see if something worked or not.  This feedback loop is so fast it changes how you work and formulate ideas.&lt;/p&gt;

&lt;p&gt;In the static world, we don’t really have this luxury, and especially not when you’re working on a large project, which at work, takes just under a minute for a full rebuild.  And this is on a monster machine.  Because of this, we had to employ tricks and workarounds to speed things up, like messing with build configurations and build output paths to minimize duplicate work.  Despite that, it’s still a pain to wait for the application to start and all that jazz.&lt;/p&gt;

&lt;p&gt;What if we could do the super fast feedback loop development, in a static world?  Well, now you can!&lt;/p&gt;

&lt;p&gt;It starts with a simple function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-powershell&#34; data-lang=&#34;powershell&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;replace-command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;[string]&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$msg&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$action&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;[system.windows.messagebox]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;::&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;show&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$msg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetNewClosure&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$cmd&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new-object&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;galasoft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mvvmlight&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;relaycommand&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;no&#34;&gt;[system.action]&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;nv&#34;&gt;$selected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;target&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;command&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$cmd&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The above function will replace anything that has a &lt;code&gt;Command&lt;/code&gt; property on the target, like a Button or MenuItem, with a MessageBox showing a message.  For the curious, &lt;code&gt;GetNewClosure&lt;/code&gt; is needed so that $msg is available within the inner script block.  Unlike C#, closures are not automatic.&lt;/p&gt;

&lt;p&gt;Since PowerShell is dynamic, if you need to make a change, simply save the script, reload it with a dot-source, which will overwrite the existing function, and then set the target’s &lt;code&gt;Command&lt;/code&gt; property again.  Awesome!&lt;/p&gt;

&lt;p&gt;The only annoyance is converting PowerShell code back into C# code once you’re done.&lt;/p&gt;

&lt;h1 id=&#34;evolution:f539d02145ec1550ef0265d4aa3eab64&#34;&gt;Evolution&lt;/h1&gt;

&lt;p&gt;If you made it this far you didn’t forget about my comment about untargeting .NET 4 and PS v3.  Well, changes have been &lt;a href=&#34;https://github.com/cplotts/snoopwpf/commit/16030418b14778029d10e198b288b4efa9bad65c&#34;&gt;merged&lt;/a&gt; to the main branch!  Soon the masses will be able to experiment with supercharging their applications with PowerShell!&lt;/p&gt;

&lt;p&gt;I’ll likely continue working on my &lt;a href=&#34;https://github.com/bling/snoopwpf&#34;&gt;fork&lt;/a&gt; as there’s still more goodies I’d like to add.  Stay tuned!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>SnoopShell: The marriage of Snoop WPF and PowerShell</title>
      <link>http://bling.github.io/blog/2012/07/01/snoopshell-marriage-of-snoop-wpf-and/</link>
      <pubDate>Sun, 01 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2012/07/01/snoopshell-marriage-of-snoop-wpf-and/</guid>
      <description>&lt;div class=&#39;post&#39;&gt;
&lt;p&gt;I was given the opportunity to review a couple chapters of the excellent book &lt;a href=&#34;http://shop.oreilly.com/product/0636920024491.do&#34;&gt;PowerShell for Developers&lt;/a&gt;, written by my colleague &lt;a href=&#34;http://dougfinke.com/blog/&#34;&gt;Doug Finke&lt;/a&gt;.&amp;nbsp; One of the concepts in the book was embedding a PowerShell console into your application.&amp;nbsp; This idea is ingenious and we added this feature to our client’s software, and so far it has increased our productivity and opened the doors to many possibilities.&lt;/p&gt; &lt;p&gt;So what’s so cool about embedding a shell into your application?&amp;nbsp; Well, for starters, one of the immediate advantages is that it gives you the opportunity to test your application at run time.&amp;nbsp; If you are implementing the MVVM pattern then basically anything you can see in the UI is bound to some property in your view model.&amp;nbsp; What if you could expose an instance of your view model to the PowerShell console?&amp;nbsp; Yes, you would be able to interact with it directly, change values, and property change notification will kick in and update the UI.&lt;/p&gt; &lt;p&gt;The possibilities start to open up from there.&amp;nbsp; You can start scripting out common tasks – write once, run many times.&amp;nbsp; Or you can write a full fledge test suite as a script, give it to a QA tester, and have them run through it as a special kind of integration testing, one that happens with live, real data.&amp;nbsp; Or how about being able to modify code, &lt;em&gt;at runtime&lt;/em&gt;, to try out an implementation without need to recompile or restart the application?&amp;nbsp; Sounds pretty awesome to me!&lt;/p&gt; &lt;p&gt;With this, I started thinking why don’t I try and add this to Snoop?&amp;nbsp; It’s a staple tool for any WPF developer, and adding scripting capabilities to Snoop will make it even more useful.&lt;/p&gt; &lt;p&gt;So, I sat down for a weekend and took a shot at it.&amp;nbsp; And with that, SnoopShell was born!&lt;/p&gt; &lt;p&gt;My fork of Snoop can be found here: &lt;a href=&#34;https://github.com/bling/snoopwpf&#34;&gt;https://github.com/bling/snoopwpf&lt;/a&gt;&lt;/p&gt; &lt;p&gt;It’s still in super-duper alpha, so features/ideas are still getting formulated, but here’s a glimpse of what it can do now.&lt;/p&gt; &lt;p&gt;The $root variable points to the root of the tree.&amp;nbsp; As you can see, Snoop represents this as a ApplicationTreeItem, which has a bunch of properties, the important ones being IsSelected and IsExpanded.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://lh6.ggpht.com/-G1xK0p7454U/T_CIl9YKnlI/AAAAAAAAAJg/z4SEb20go04/s1600-h/image%25255B29%25255D.png&#34;&gt;&lt;img style=&#34;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&#34; title=&#34;image&#34; border=&#34;0&#34; alt=&#34;image&#34; src=&#34;http://lh4.ggpht.com/-NgT7mhbVSBY/T_CImZIe6NI/AAAAAAAAAJk/fkNeG2UGFH0/image_thumb%25255B17%25255D.png?imgmax=800&#34; width=&#34;640&#34; height=&#34;381&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Let’s try interacting with the object by setting the IsExpanded to true.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://lh4.ggpht.com/-uKcevwtnUO4/T_CImnGxyWI/AAAAAAAAAJo/5v1AZnM_SHw/s1600-h/image%25255B28%25255D.png&#34;&gt;&lt;img style=&#34;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&#34; title=&#34;image&#34; border=&#34;0&#34; alt=&#34;image&#34; src=&#34;http://lh6.ggpht.com/-STnkYWGudRU/T_CInKa1nyI/AAAAAAAAAJs/qk92Zjm3BWU/image_thumb%25255B16%25255D.png?imgmax=800&#34; width=&#34;640&#34; height=&#34;383&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;So far so good.&amp;nbsp; Now let’s find my username using Ctrl+Shift.&amp;nbsp; The $selected variable is automatically synchronized with the selected item in the tree.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://lh6.ggpht.com/-uUeaZMYbuDc/T_CInhNnmAI/AAAAAAAAAJw/Q--l4hrlEis/s1600-h/image%25255B27%25255D.png&#34;&gt;&lt;img style=&#34;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&#34; title=&#34;image&#34; border=&#34;0&#34; alt=&#34;image&#34; src=&#34;http://lh6.ggpht.com/-hnDhWbHtn8w/T_CIoIzVSCI/AAAAAAAAAJ0/BiqbUMnfigM/image_thumb%25255B15%25255D.png?imgmax=800&#34; width=&#34;640&#34; height=&#34;379&#34;&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Let’s do some black magic and change my name.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://lh6.ggpht.com/-hC4FVTnZDxc/T_CIoTrYfiI/AAAAAAAAAJ4/aQQGFbrxCzM/s1600-h/image%25255B26%25255D.png&#34;&gt;&lt;img style=&#34;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&#34; title=&#34;image&#34; border=&#34;0&#34; alt=&#34;image&#34; src=&#34;http://lh3.ggpht.com/-RqOCvfsU6cU/T_CIo6zvtcI/AAAAAAAAAJ8/e8XMWPj60BM/image_thumb%25255B14%25255D.png?imgmax=800&#34; width=&#34;640&#34; height=&#34;382&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;Finally, let’s find every ListBox in the application.&amp;nbsp; &lt;em&gt;Find-Item&lt;/em&gt; is used to recursively find everything in the visual tree which is a ListBox.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://lh6.ggpht.com/-nlycDcpP-bk/T_CIpXMcWxI/AAAAAAAAAKA/gIGruuduR9g/s1600-h/image%25255B25%25255D.png&#34;&gt;&lt;img style=&#34;background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px&#34; title=&#34;image&#34; border=&#34;0&#34; alt=&#34;image&#34; src=&#34;http://lh3.ggpht.com/-oAB7IIj6LLY/T_CIqDPWS6I/AAAAAAAAAKE/aX1DNZnIOVo/image_thumb%25255B13%25255D.png?imgmax=800&#34; width=&#34;640&#34; height=&#34;367&#34;&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;And from here, it’s as simple as grabbing the &lt;em&gt;DataContext&lt;/em&gt; of any control to get access to the view model.&lt;/p&gt; &lt;p&gt;By the way, this is targeting PowerShell V3, so you will need to have the RC installed.&lt;/p&gt; &lt;p&gt;Try it out and let me know what you think!&lt;/p&gt;  &lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>N2N: .NET 2 Node</title>
      <link>http://bling.github.io/blog/2012/06/03/n2n-net-2-node/</link>
      <pubDate>Sun, 03 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2012/06/03/n2n-net-2-node/</guid>
      <description>&lt;div class=&#39;post&#39;&gt;
&lt;p&gt;Well, it’s been quite a while since I’ve blogged about…well…anything, and I figured it’s about time I get off my lazy butt and do something with my spare time on weekends.&amp;nbsp; What better option than to see what all the hype is about Node?&amp;nbsp; I had to do it sooner or later.&lt;/p&gt; &lt;p&gt;As any newbie would do, they go to Google and type “nodejs tutorial”.&amp;nbsp; &lt;a href=&#34;http://www.nodebeginner.org/&#34;&gt;The Node Beginner Book&lt;/a&gt; came up first, so I went with that.&amp;nbsp; It was an excellent tutorial.&amp;nbsp; Prior to this I also skimmed through the book &lt;a href=&#34;http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742&#34;&gt;JavaScript, The Good Parts&lt;/a&gt;, so I had a basic understanding of the language syntax.&lt;/p&gt; &lt;p&gt;One of the first oddities I noticed, was that NodeJS seems to have a convention of comma-first.&amp;nbsp; You notice this immediately because most examples start with require(‘module’), and if they require more than one module, the second line is prefixed with a comma (as opposed to the more traditional comma at the end of the line).&amp;nbsp; I apparently missed the &lt;a href=&#34;https://gist.github.com/357981&#34;&gt;discussion&lt;/a&gt; by 2 years!&amp;nbsp; It was still interesting nonetheless.&lt;/p&gt; &lt;p&gt;As someone with a strong .NET background, I definitely experienced all the usual ‘gotchas’:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;== vs ===  &lt;li&gt;falsey values  &lt;li&gt;variable hoisting&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;Once you understand all of these things, Javascript isn’t so bad.&amp;nbsp; Oh, and of course understanding closures will get you &lt;em&gt;a long&lt;/em&gt; way in being effective with Javascript, because that’s what you need to use to do proper scoping.&amp;nbsp; If C# didn’t have lambdas and closures it would have been a much longer journey to “get it”.&lt;/p&gt; &lt;p&gt;Not too longer after, I deployed my first Heroku app running on NodeJS.&lt;/p&gt; &lt;p&gt;Anyways, enough with the prologue…I won’t bore you with anymore beginner/tutorial stuff.&lt;/p&gt; &lt;p&gt;Let’s get on with what I plan on doing over a multi-part blog series.&amp;nbsp; When I build something on my own time, I can’t build something just for the hell of it to learn something….that’s not enough.&amp;nbsp; If I build something it has to be useful – something that I (or someone else) will find valuable.&lt;/p&gt; &lt;p&gt;I won’t reveal what it is yet, but it’s going to involve Node/MongoDB on the backend, with Backbone on the front-end.&amp;nbsp; Should be fun :-)&lt;/p&gt;  &lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>My Thoughts on MEF</title>
      <link>http://bling.github.io/blog/2011/10/31/my-thoughts-on-mef/</link>
      <pubDate>Mon, 31 Oct 2011 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2011/10/31/my-thoughts-on-mef/</guid>
      <description>&lt;div class=&#39;post&#39;&gt;
&lt;p&gt;Ever since MEF was conceived, despite the authors saying that it is &lt;strong&gt;not&lt;em&gt; &lt;/em&gt;&lt;/strong&gt;an IoC container, it has since evolved to become one of the more popular IoC containers.&amp;nbsp; I’ve always avoided it because I disagree with using attributes, and I’ve had no reason to use it over Autofac or Windsor.&lt;/p&gt; &lt;p&gt;Recently, I found a reason to use it – Metro-style applications only support MEF so far.&amp;nbsp; My Twitter client ping.pong uses Autofac as the IoC container.&amp;nbsp; It uses some very basic functionality like factories and hooks.&amp;nbsp; To my surprise, MEF has no support for either of these.&lt;/p&gt; &lt;p&gt;Coming across these limitations solidifies my opinion that MEF is a plugin container, not an IoC container.&lt;/p&gt; &lt;p&gt;First let’s take a look at automated factories. What I mean is that by registering Foo, like so:&lt;/p&gt; &lt;div id=&#34;codeSnippetWrapper&#34;&gt; &lt;div style=&#34;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&#34; id=&#34;codeSnippet&#34;&gt;&lt;pre style=&#34;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&#34;&gt;container.RegisterType&amp;lt;Foo&amp;gt;();&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;the container will automatically provide us a Func&amp;lt;Foo&amp;gt; without explicitly having to register it. This can be useful when you want to create an instance of Foo some time in the future rather than at constructor time.&amp;nbsp; You can do this with MEF via an ExportFactory&amp;lt;T&amp;gt;, but it’s limited because you cannot override dependencies at resolve time.&lt;/p&gt;
&lt;p&gt;For example, let’s say Foo has a constructor of Foo(Bar1, Bar2, Bar3). With MEF, you have no control at resolution time what the Bars are. A container that has support for automated factories (like Autofac and Castle Windsor), will let you resolve a Func&amp;lt;Bar1, Foo&amp;gt;, which lets you override Bar1 at resolve time. Similarly, you can resolve a Func&amp;lt;Bar1, Bar2, Bar3, Foo&amp;gt; and override all dependencies. Any dependencies not overridden fall back to their configuration in the bootstrapper. This is a &lt;em&gt;very&lt;/em&gt; useful feature, and coupled with the scoping features for automatic disposal it opens up many doors for elegant solutions for what otherwise are complicated problems.&lt;/p&gt;
&lt;p&gt;On to the second point; MEF has limited extension points. This one sounds odd since MEF is all about designing decoupled plugins so surely it should have extension points! The problem here is that MEF is designed as an explicit API (attributes are required) rather than an implicit API. In Autofac, you can scan an assembly and register every type. In MEF, every class needs to have an [Export] on it.&amp;nbsp; It also baffles my mind why [ImportingConstructor] is required even when there’s only one constructor. All this explicitness means you lose a bunch of “free” extension points that typical IoC containers have, like this:&lt;/p&gt;
&lt;div id=&#34;codeSnippetWrapper&#34;&gt;
&lt;div style=&#34;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&#34; id=&#34;codeSnippet&#34;&gt;&lt;pre style=&#34;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&#34;&gt;b.RegisterAssemblyTypes(GetType().Assembly)&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;pre style=&#34;border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &#39;Courier New&#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px&#34;&gt;  .OnActivated(x =&amp;gt; x.Context.Resolve&amp;lt;IEventAggregator&amp;gt;().Subscribe(x.Instance));&lt;/pre&gt;&lt;!--CRLF--&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;What the code above is saying that every time &lt;em&gt;any&lt;/em&gt; component is activated, it will subscribe to the event aggregator. If the component doesn’t IHandle&amp;lt;&amp;gt; any messages, it’s a no-op and continues on. If the instance does IHandle&amp;lt;&amp;gt; messages, this will ensure it’s hooked up.&lt;/p&gt;
&lt;p&gt;The closest thing I could find in MEF was IPartImportsSatisfiedNotification (yes, an interface, more explicitness!).&amp;nbsp; It contains a single method OnImportsSatisfied() which gets called when the part is created.&amp;nbsp; Needless to say, the one line of code from Autofac would translate into a method for every implementation of IHandle&amp;lt;&amp;gt;, and since OnImportsSatisfied() contains no contextual information, every component will need IEventAggregator injected just to be able to call Subscribe.&lt;/p&gt;
&lt;p&gt;To fully complete this example, Autofac has the following methods when registering a component: &lt;em&gt;OnRegistered, OnPreparing, OnActivating, OnActivated, &lt;/em&gt;and&lt;em&gt; OnRelease&lt;/em&gt;.&amp;nbsp; Each of these methods gives you complete contextual information at the time it is called like access to the current scope of the container, the instance (if applicable), which component which requested the dependency, etc.&amp;nbsp; This makes it almost too easy to extend the container.&lt;/p&gt;
&lt;p&gt;For MEF, the only real extension point is an ExportProvider.&amp;nbsp; It is pretty low level (all it does is parse attributes for you) so to write anything similar for MEF requires a lot more code.&amp;nbsp; To further illustrate this point, compare the interception modules from AutofacContrib and MefContrib.&amp;nbsp; The Autofac implementation is a single file with a couple extension methods.&amp;nbsp; The MEF implementation is an entire namespace, over multiple classes, not the mention that it also relies on other infrastructure code in MefContrib.&amp;nbsp; Basically, the guys that wrote MefContrib had to write a mini-container within MEF.&lt;/p&gt;
&lt;p&gt;MEF is great for building &lt;em&gt;&lt;strong&gt;extremely&lt;/strong&gt; loosely coupled &lt;/em&gt;applications.&amp;nbsp; I don’t think it has any business in an application where you know and own all of the dependencies; there are simply better libraries for that.&lt;/p&gt;  &lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class=&#39;comments&#39;&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;bling&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
Thanks for the reply Nick!&lt;br /&gt;&lt;br /&gt;I have yet to check out all the new MEF features of 4.5, but it definitely looks very interesting with what&amp;#39;s happening in the previews.&lt;br /&gt;&lt;br /&gt;The new RegistrationBuilder looks pretty good, especially since attributes are optional now, but that only solves wiring up the application.&lt;br /&gt;&lt;br /&gt;IMO, the most useful (and powerful) thing you can add is the equivalent of Autofac&amp;#39;s IComponentContext -- something that will let you easily hook into any part of the resolution chain from creation to disposal.&lt;br /&gt;&lt;br /&gt;Once that&amp;#39;s in it&amp;#39;ll be much easier to extend the container and use it for more &amp;quot;advanced&amp;quot; scenarios --and with less code.&lt;br /&gt;&lt;br /&gt;Cheers,&lt;br /&gt;Bailey&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Nick&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
Hi Bailey! Nice thoughtful article - I have a foot in both camps, so I&amp;#39;m glad that the Autofac extension points work for you, but I&amp;#39;m also keen to close some of the gaps on the MEF side :)&lt;br /&gt;&lt;br /&gt;I am curious, have you had a chance to look at RegistrationBuilder, being delivered in the .NET 4.5 version of MEF? It opens up the possibility for us to support activation events like the ones you mention, although it doesn&amp;#39;t as of writing.&lt;br /&gt;&lt;br /&gt;In case you didn&amp;#39;t catch it, the release announcement is at: http://blogs.msdn.com/b/bclteam/archive/2011/10/27/what-s-new-in-mef-version-2-preview-4.aspx&lt;br /&gt;&lt;br /&gt;Thanks for writing this up anyway, it will give us something to think about.&lt;br /&gt;&lt;br /&gt;Regards,&lt;br /&gt;Nick&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Building a Real-time Push App with Silverlight: Part 8</title>
      <link>http://bling.github.io/blog/2011/09/21/building-real-time-push-app-with-rx-8/</link>
      <pubDate>Wed, 21 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2011/09/21/building-real-time-push-app-with-rx-8/</guid>
      <description>

&lt;h1 id=&#34;exploring-caliburn-micro:e5ae76046407f100521eec12fd4d6662&#34;&gt;Exploring Caliburn Micro&lt;/h1&gt;

&lt;p&gt;As I hinted in earlier posts, Caliburn Micro has some wicked conventions that makes for writing MVVM super easy, and it also have a very convenient syntax for hooking up events.  For example, the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Content=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;R&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;lt;i:Interaction.Triggers&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;nt&#34;&gt;&amp;lt;i:EventTrigger&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;EventName=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Click&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
           &lt;span class=&#34;nt&#34;&gt;&amp;lt;i:InvokeCommandAction&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Command=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{Binding ReplyCommand}&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;CommandParameter=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{Binding}&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;nt&#34;&gt;&amp;lt;/i:EventTrigger&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;lt;/i:Interaction.Triggers&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Can be rewritten like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Content=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;R&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;cal:Message.Attach=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;[Reply($dataContext)]&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are some smarts going on here.  Caliburn Micro will default to the Click event for buttons.  For a full syntax, it would be &lt;code&gt;cal:Message.Attach=&amp;quot;[Event Click] = [Reply($dataContext)]&amp;quot;&lt;/code&gt;.  As you can imagine, that will call the Reply method and pass in the current data context.  You can also pass in other things like &lt;code&gt;$this&lt;/code&gt;, &lt;code&gt;$source&lt;/code&gt;, or &lt;code&gt;$executionContext&lt;/code&gt; for full access to anything and everything Caliburn Micro itself has access to.&lt;/p&gt;

&lt;p&gt;The coolest thing about this is it gives you some wicked control over how your data context gets set.  Ever struggled with popup windows or data grids and using weird hacks to get the binding correct?  Caliburn Micro makes this very easy.  Here’s an example.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;I have a DataTemplate which renders the UI for the model Tweet.&lt;/li&gt;
&lt;li&gt;Tweet is just a simple class which holds only properties.&lt;/li&gt;
&lt;li&gt;Inside the DataTemplate, I have some buttons that when the user clicks will reply, retweet, quote, or direct message.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The Tweet class is purely for modeling data, so adding any methods would be bad practice.  Also, since I’m in a DataTemplate I can’t easily reference another control with ElementName (in this case I need the containing parent’s DataContext).  And to add insult to injury, Silverlight 4 doesn’t have RelativeSource ancestor type.  So how do I solve this?&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;StackPanel&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;VerticalAlignment=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Bottom&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;cal:Action.TargetWithoutContext=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;shell&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Orientation=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Horizontal&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Content=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;R&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;cal:Message.Attach=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;[Reply($dataContext)]&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Content=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;RT&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;cal:Message.Attach=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;[Retweet($dataContext)]&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Content=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Q&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;cal:Message.Attach=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;[Quote($dataContext)]&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;Button&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Content=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;DM&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;cal:Message.Attach=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;[DirectMessage($dataContext)]&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/StackPanel&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The secret is the attached property TargetWithoutContext.  As the name implies, it will set the target for all the ActionMessages attached to all the buttons, without setting the context.  If I used the Target attached property, it would set all of the Buttons’ data context to the same object – not what we want.  Since the Button’s data context remains intact, we can call “Reply($dataContext)”, which calls the Reply method on the target object (set on the StackPanel) and pass in the Tweet.  “shell” is the key of the service that I registered into the container.&lt;/p&gt;

&lt;p&gt;Originally I wanted this entire series to be able writing a fast push data app with Silverlight and Rx, and now I’m finding that I’m writing an entire Twitter client because it’s so much fun :-).&lt;/p&gt;

&lt;p&gt;I’m going to make another release soon.  While the first release was merely experimental, the next one will be useful enough to potentially use full time.  As you can probably tell with this blog post, it supports all the actions mentioned previously (and it’ll appear on mouse hover):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://lh5.ggpht.com/-RIZG8I0_rik/TnqqmNCK-6I/AAAAAAAAAHM/-xU4_cj6iDg/image_thumb%25255B2%25255D.png?imgmax=800&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The tweet box is much improved and shows you how many character you have left:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://lh4.ggpht.com/-2VhCjjYrcoo/TnqqmstbbUI/AAAAAAAAAHU/zK65JB2shQw/image_thumb%25255B3%25255D.png?imgmax=800&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;And it’s smart enough to auto wrap http links via Twitter’s t.co service, and the counter takes that into account.  Some interesting things to note is that in the future &lt;em&gt;all links&lt;/em&gt; will be wrapped t.co.  Looks like Twitter is trying to eat up bt.ly or something.&lt;/p&gt;

&lt;p&gt;Clicking on @users and #topics will automatically open a new timeline and subscribe to those tweets.  It is almost full featured enough to become my main Twitter client.  There are certain features still missing, and it’s purely based on when I have time to port them over.&lt;/p&gt;

&lt;p&gt;As always, you can install directly from &lt;a href=&#34;http://dl.dropbox.com/u/2072014/Ping.Pong/PingPongTestPage.html&#34;&gt;here&lt;/a&gt;, or you can grab the code on the &lt;a href=&#34;https://github.com/bling/Ping.Pong&#34;&gt;GitHub&lt;/a&gt; page!&lt;/p&gt;

&lt;p&gt;Next post will be about Rx from a very top level perspective and how it influenced my code from beginning to be experienced and all refactorings in between.  Stay tuned!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a Real-time Push App with Silverlight: Part 7</title>
      <link>http://bling.github.io/blog/2011/09/16/building-real-time-push-app-with-rx-7/</link>
      <pubDate>Fri, 16 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2011/09/16/building-real-time-push-app-with-rx-7/</guid>
      <description>&lt;div class=&#39;post&#39;&gt;
&lt;h3&gt;&lt;/h3&gt; &lt;h3&gt;Infrastructure Refactor&lt;/h3&gt; &lt;p&gt;A lot of things changed internally, and I mean….a lot….&lt;/p&gt; &lt;p&gt;From an infrastructure standpoint, I decided to remove the dependency on LinqToTwitter, and I replaced it with &lt;a href=&#34;https://github.com/danielcrenna/hammock&#34;&gt;Hammock&lt;/a&gt;.&amp;nbsp; A couple things led me to this decision, one being the Silverlight support wasn’t as good as I’d hoped, and the streaming API implementation was limited.&amp;nbsp; After reading the Twitter documentation I realized that the REST API was super simple and I’d be better off writing a simple interface to it.&lt;/p&gt; &lt;p&gt;I heard good things about Hammock, so I decided to give that one a try (I wasn’t going to go as far as reimplementing OAuth).&amp;nbsp; It was pretty easy to set up and in the end I was able to get Twitter working again and with less lines of code compared to the beginning of the refactor.&lt;/p&gt; &lt;h3&gt;Goals&lt;/h3&gt; &lt;p&gt;I had a couple goals for this project:&lt;/p&gt; &lt;ul&gt; &lt;li&gt;&lt;strong&gt;Learn:&lt;/strong&gt;&amp;nbsp; I was a complete newbie to Reactive Extensions when I started but now I understand it enough to hit the ground running with it.&amp;nbsp; I’m still learning about more conventions available to Caliburn.Micro.  &lt;li&gt;&lt;strong&gt;UX:&lt;/strong&gt;&amp;nbsp; I wanted to learn a little more about interface design.&amp;nbsp; I wanted to know how little changes to gradients, shadows, colors, etc. could have a radically effect in the end result.  &lt;li&gt;&lt;strong&gt;Performance:&lt;/strong&gt;&amp;nbsp; It should be fast.&amp;nbsp; It should be able to react to real-time data.&amp;nbsp; And it should do it with low CPU utilization.  &lt;li&gt;&lt;strong&gt;Concise:&lt;/strong&gt;&amp;nbsp; I am a huge advocate for KISS.&amp;nbsp; I like convention over configuration.&amp;nbsp; I like implementing something in 2 lines of code rather than 20 (assuming it’s not cryptic).&amp;nbsp; As I was writing the app and refactoring, if there was an opportunity to remove a line of code, I did it.&amp;nbsp; The result is that the app currently consists of less than 500 lines of code as of this post (excluding XAML).&lt;/li&gt;&lt;/ul&gt; &lt;h3&gt;Tidbits&lt;/h3&gt; &lt;p&gt;What are some interest things I learned?&lt;/p&gt; &lt;ul&gt; &lt;li&gt;System.Json is an amazing assembly.&amp;nbsp; All you need to do is invoke JsonValue.Parse on a string and it will create a JsonValue for you, which will be a dictionary of key/value pairs.&amp;nbsp; What’s more, by doing something like “string s = json[“text”]” will do an explicit conversion &lt;strong&gt;and unescape JSON characters&lt;/strong&gt;, and &lt;strong&gt;only&lt;/strong&gt; via the explicit operator.&amp;nbsp; Calling ToString(), even though converting it to a string, will not unescape.&amp;nbsp; This was completely undocumented and only found when I looked at the source code via Resharper’s external sources feature.  &lt;li&gt;Rx is awesome.&amp;nbsp; When I ran into performance problems of trying to stream tweets from the world that contained the letter ‘a’ all I had to do was add an operator to improve the performance (in this case it was Buffer).&amp;nbsp; It should be noted that it is &lt;em&gt;very important&lt;/em&gt; to understand what Rx is doing underneath the hood to realize its benefits.&amp;nbsp; Rx lets you refactor 30 lines of async code into 1 operator, but it’s still doing that 30 lines of code – you just don’t see it.  &lt;li&gt;I really, &lt;em&gt;really&lt;/em&gt;, like the conventions available from Caliburn.&amp;nbsp; Some of the features that come out of the box from this very small library saves me from writing a lot of boilerplate code like commands, triggers, and evening bindings (Caliburn will auto bind x:Name to a property).  &lt;li&gt;Twitter’s documentation for &lt;a href=&#34;https://dev.twitter.com/docs/streaming-api/user-streams&#34;&gt;user streams&lt;/a&gt; currently sucks and some trial and error was required to get it working.&lt;/li&gt;&lt;/ul&gt; &lt;p&gt;What is the end result of all this effort?&amp;nbsp; We have a styled Twitter app that can update your status, pull your home/mentions timeline, and most importantly will &lt;strong&gt;stream all subsequent tweets&lt;/strong&gt;.&amp;nbsp; There’s no pulling and no limits.&amp;nbsp; You will get a tweet of everyone you follow in real-time as it happens.&lt;/p&gt; &lt;p&gt;Moreover, there’s a feature to connect to the Streaming API to search Twitter for &lt;em&gt;anything&lt;/em&gt;.&amp;nbsp; To get an idea of what we’re talking about, here’s a full screenshot of it:&lt;/p&gt; &lt;p&gt;&lt;img style=&#34;background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px&#34; title=&#34;image&#34; border=&#34;0&#34; alt=&#34;image&#34; src=&#34;http://lh4.ggpht.com/-tB6iLGL85aE/TnNOi7hdq9I/AAAAAAAAAHE/wGjkyHQzYKs/image%25255B20%25255D.png?imgmax=800&#34; width=&#34;578&#34; height=&#34;328&#34;&gt;&lt;/p&gt; &lt;p&gt;You read that right.&amp;nbsp; I’m streaming any tweet in the world that has the words ‘and’, ‘the’, ‘yes’, &lt;strong&gt;or&lt;/strong&gt; ‘no’ in them.&amp;nbsp; This is streaming around 400kB/s continuously and CPU utilization is under 25%.&amp;nbsp; The tweets are coming so fast it’s impossible to read them (at a rate of 50 tweets/second), so ideally you’d want to specify realistic search terms.&lt;/p&gt; &lt;p&gt;Moreover, the majority of the performance cost is actually downloading all the profile images.&amp;nbsp; If I take took out pictures I could stream any tweet in the world that has the letter ‘e’ in it at under 10% CPU.&amp;nbsp; It looks like Twitter limits the rate of tweets to 50 tweets/second because that was the rate for this one as well.&lt;/p&gt; &lt;p&gt;Features are minimalistic.&amp;nbsp; You can update your status, but you can’t DM, you can’t RT, you can’t do any of the normal things.&amp;nbsp; My original goal was not to write another Twitter client, but it’s actually quite fun to do so, so I’ll probably eventually get all features in.&lt;/p&gt; &lt;p&gt;And as promised, it’s up on &lt;a href=&#34;https://github.com/bling/Ping.Pong&#34;&gt;GitHub&lt;/a&gt;, and version 0.0.0.1 &lt;strong&gt;alpha&lt;/strong&gt; (yes! expect bugs!!) is available in the downloads section.&amp;nbsp; Or, here’s a direct link to the XAP file on my &lt;a href=&#34;http://dl.dropbox.com/u/2072014/Ping.Pong/PingPongTestPage.html&#34;&gt;Dropbox&lt;/a&gt;.&amp;nbsp; Have fun!&lt;/p&gt;  &lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Building a Real-time Push App with Silverlight: Part 5</title>
      <link>http://bling.github.io/blog/2011/09/08/building-real-time-push-app-with-rx-5/</link>
      <pubDate>Thu, 08 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2011/09/08/building-real-time-push-app-with-rx-5/</guid>
      <description>&lt;p&gt;I planned on this post to be about UI, but I’m going to defer that until the next post.  I said from the start of this series that I would document about everything about building the application from scratch, including my struggles.&lt;/p&gt;

&lt;p&gt;And with that I want to mention something that got me scratching my head one too many times.  It was with how I used LinqToTwitter.  Here is the source code which you can immediately copy/paste into a blank project to reproduce:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;partial&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;MainPage&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UserControl&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TwitterContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_context&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TwitterContext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewModel&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_vm1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_vm2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_vm3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;MainPage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;InitializeComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_vm1&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_vm2&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_vm3&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ViewModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_vm1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Callback&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Callback of VM1: &amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_vm1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_vm2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Callback&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Callback of VM2: &amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_vm2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_vm3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Callback&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Callback of VM3: &amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_vm3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LocalState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;_vm1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_vm2&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_vm3&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;ViewModel&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TwitterContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LocalState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ViewModel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TwitterContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_context&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Status&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StatusType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Public&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Count&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;10&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;Debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hash code of ViewModel: &amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetHashCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;query&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsyncCallback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;statuses&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;LocalState&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;++;&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;Debug&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Hash code inside callback: &amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetHashCode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;Callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now, if you run this, you will see that only &lt;em&gt;one&lt;/em&gt; of the view models will get its state updated.  Huh?!&lt;/p&gt;

&lt;p&gt;How is that possible?  I started getting paranoid so I even added the local state variable “just in case.”&lt;/p&gt;

&lt;p&gt;Well, I had to look into the source code of LinqToTwitter to figure out exactly what happened.  Here is the code for AsyncCallback:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IQueryable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AsyncCallback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IQueryable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queryType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
     &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;queryType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Provider&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;as&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TwitterQueryProvider&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Context&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TwitterExecutor&lt;/span&gt;
         &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsyncCallback&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

     &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;queryType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
 &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;See what happened?  The callback gets overwritten every time you call this method.  Even though the call to &lt;code&gt;FirstOrDefault&lt;/code&gt;() causes all 3 expressions to evaluate, only the last view model will get values because that’s the with the callback attached.&lt;/p&gt;

&lt;p&gt;Lesson of the day: The AsyncCallback extension method for LinqToTwitter is not thread-safe.&lt;/p&gt;

&lt;p&gt;So&amp;hellip;the question is, how do we make it thread safe?  I just replaced wrapped the AsyncCallback with another extension method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AutoResetEvent&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_twitterEvt&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AutoResetEvent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
 
&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AsyncTwitterCallback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IQueryable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;twitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;T&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_twitterEvt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WaitOne&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;twitter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsyncCallback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;results&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;try&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;callback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;results&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;finally&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;_twitterEvt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nothing complicated – just a simple wait handle to ensure only 1 thread can go through at a time.&lt;/p&gt;

&lt;p&gt;Hopefully upstream fixes this, or at least documents it.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a Real-time Push App with Silverlight: Part 4</title>
      <link>http://bling.github.io/blog/2011/09/05/building-real-time-push-app-with-rx-4/</link>
      <pubDate>Mon, 05 Sep 2011 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2011/09/05/building-real-time-push-app-with-rx-4/</guid>
      <description>

&lt;p&gt;Originally I wanted to avoid bringing in external libraries to keep the app as lean as possible, but then I realized that I would spend too much time reinventing the wheel.  Twitter is deprecating basic authentication in the near future, which makes OAuth no longer optional.  Rather than writing yet another Twitter client (if you’re curious I found a great reference &lt;a href=&#34;http://chris.59north.com/post/2009/09/16/SilverTweet-e28093-Building-a-Silverlight-Twitter-client-part-1.aspx&#34;&gt;here&lt;/a&gt;), I fired up &lt;a href=&#34;http://nuget.org/&#34;&gt;NuGet&lt;/a&gt; and brought in &lt;a href=&#34;http://linqtotwitter.codeplex.com/&#34;&gt;LinqToTwitter&lt;/a&gt;, and while I’m there I brought in &lt;a href=&#34;http://code.google.com/p/autofac/&#34;&gt;Autofac&lt;/a&gt; and &lt;a href=&#34;http://caliburnmicro.codeplex.com/&#34;&gt;Caliburn.Micro&lt;/a&gt; as well.&lt;/p&gt;

&lt;p&gt;Naturally, LinqToTwitter will work nicely with Rx because as name implies it uses LINQ heavily.  Caliburn.Micro is a MVVM library which I’ve always wanted an excuse to try because of features like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;ListBox&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;cal:Message.Attach=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;[Event Loaded] = [LoadList($dataContext)]&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s only scratching the surface of what Caliburn can do, so it will be a fresh breath of air to see what else it can do.&lt;/p&gt;

&lt;p&gt;By default, Caliburn uses MEF to wire up its bootstrapper.  After adding a couple &lt;code&gt;[Import]&lt;/code&gt;s and &lt;code&gt;[Export]&lt;/code&gt;s, I knew it wasn’t for me.  It works well for writing plugins, i.e. &lt;em&gt;external&lt;/em&gt; dependencies because of its built-in assembly scanning capabilities, but for injecting &lt;em&gt;internal&lt;/em&gt; dependencies, other IoC containers do a much better job of that.  I used Castle Windsor in past projects, but for a change I’m going to use Autofac which I haven’t used since v2 came out.&lt;/p&gt;

&lt;p&gt;When this was all said and done the View was the only thing that didn’t change.  Everything underneath either changed radically or was deleted altogether (because LinqToTwitter provided it).  I added OAuth support and registered my application with Twitter, and with that was the birth of Ping Pong.&lt;/p&gt;

&lt;p&gt;This took much longer than expected.  Silverlight 5 RC just came out and it broke pretty much any container (including MEF) for OOB because of a TypeLoadException.  I haven’t been using too many v5 features, so for the time being I downgraded to v4 to get the project working until RC2 comes out.&lt;/p&gt;

&lt;p&gt;Integrating LinqToTwitter was a challenge.  The project site has a lot of good documentation, but most of it was for desktop, not Silverlight, and because of that I banged my head a couple times.  I wish I grabbed the source code earlier because it’s there where you’ll find hundreds of working examples (in code!) to do everything with the library (and in Silverlight).&lt;/p&gt;

&lt;p&gt;After all that, PingPong now has 3 columns (home, public, sampling) that &lt;em&gt;dynamically resizes&lt;/em&gt; (it’s surprising that &lt;a href=&#34;http://metrotwit.com&#34;&gt;MetroTwit&lt;/a&gt; is the only client that does this&amp;hellip;) to the window size.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://lh4.ggpht.com/-f1uQ63FwyoI/TmU-fK3WfQI/AAAAAAAAAGc/Y26EvwnXy_4/image_thumb%25255B15%25255D.png?imgmax=800&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Oh, and there’s pictures now!  The streaming time line takes significantly more CPU now that it has to load images, but we’re still sitting at around 5-10% for what is continuously streaming data and loading pictures.  Not too shabby!  (It took a couple tries to get a PG-13 screenshot from the public/streaming time lines&amp;hellip;)&lt;/p&gt;

&lt;p&gt;To conclude this post in the series, I’m going to talk about converting an asynchronous operation into an Observable that does not follow any predefined pattern.&lt;/p&gt;

&lt;h1 id=&#34;creating-an-observable:2dbe1459b61bc4f7448ad9fecbcf7603&#34;&gt;Creating an Observable&lt;/h1&gt;

&lt;p&gt;One of Silverlight’s limitations is that almost everything needs to be an asynchronous call.  In regards to LinqToTwitter, something like this will fail (but work on desktop):&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweets&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Status&lt;/span&gt;
              &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StatusType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Public&lt;/span&gt;
              &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToArray&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On Silverlight you will get a single empty element.  To get it working, there is an extension method that comes with the library, and you use it like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;from&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Status&lt;/span&gt;
 &lt;span class=&#34;k&#34;&gt;where&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StatusType&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Public&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;select&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsyncCallback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tweets&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;cm&#34;&gt;/* do something with it */&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Code is self-explanatory.  The &lt;code&gt;FirstOrDefault()&lt;/code&gt; exists only to initiate the expression, otherwise it wouldn’t do anything.  So now the question is how do we convert that into an Rx Observable?&lt;/p&gt;

&lt;p&gt;Every time I write an Rx query I try to use the least amount of state as possible.  This helps to keep the number unexpected anomalies to a minimum.  In the following section of code, I was able to get it down to 2 fields: &lt;code&gt;_sinceId&lt;/code&gt;, and &lt;code&gt;Context&lt;/code&gt;.  There is probably some operator that will let me save the sinceId variable from one observable to the next but I wasn’t able to figure it out.  In any case, I came up with this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;n&#34;&gt;_subscription&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tweet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;ob&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Interval&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TimeSpan&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FromSeconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;60&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StartWith&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(-&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SubscribeOnThreadPool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;kt&#34;&gt;ulong&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sinceId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;ulong&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TryParse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_sinceId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sinceId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;statusType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Count&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Where&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;statusType&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Count&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;200&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SinceID&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sinceId&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AsyncCallback&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;statuses&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;statuses&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;ob&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OnNext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tweet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;_sinceId&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;status&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;StatusID&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;})&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FirstOrDefault&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// materalize the results&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DispatcherSubscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SubscribeToTweet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That contains some custom code:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Context:  is a TwitterContext from LinqToTwitter&lt;/li&gt;
&lt;li&gt;DispatcherSubscribe:  is a helper extension method which Subscribes on the ThreadPool, Observes on the Dispatcher, and then Subscribes with the specified action&lt;/li&gt;
&lt;li&gt;SubscribeToTweet: a method in the base class which adds to a ObservableCollection so the UI gets updated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To translate the code, here is a basic flow of what’s happening:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Observable.Create wraps the subscription of another Observable.  It provides access to an IObserver &lt;code&gt;ob&lt;/code&gt; which lets you explicitly invoke OnNext().&lt;/li&gt;
&lt;li&gt;Observable.Interval will raise an observable every 60 seconds.&lt;/li&gt;
&lt;li&gt;The subscription of Observable.Interval will query the TwitterContext for the next set of tweets.&lt;/li&gt;
&lt;li&gt;Inside the AsyncCallback, it invokes &lt;code&gt;ob.OnNext&lt;/code&gt;as well as keeps track of the ID so the next time it queries it only gets newer tweets.&lt;/li&gt;
&lt;li&gt;Finally, &lt;code&gt;DispatcherSubscribe&lt;/code&gt; will take the &lt;code&gt;Tweet&lt;/code&gt; object and add it to an &lt;code&gt;ObservableCollection&amp;lt;Tweet&amp;gt;&lt;/code&gt;, which notifies the UI.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;As always, you should “clean up your garbage”.  In this respect I was pretty impressed with Rx as it was able to clean up the entire chain of observables with a single call to &lt;code&gt;_subscription.Dispose()&lt;/code&gt;.  Nice!&lt;/p&gt;

&lt;p&gt;In the next post I’m going to switch back to UI and completely restyle the application.  The code will hit GitHub soon as well (I promise!).  Stay tuned&amp;hellip;&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class=&#39;comments&#39;&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;bling&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
Looks like the same StartWith() trick is needed for Observable.Generate.&lt;br /&gt;&lt;br /&gt;I played around with Observable.Generate and all the expressions I came up looked pretty complicated in comparison with what I originally had.  This is mainly because I need to call OnNext() inside the AsyncCallback, so all solutions either had external Subjects or obscure ways of passing an IObserver around&amp;hellip;&lt;br /&gt;&lt;br /&gt;Maybe I&amp;#39;m overcomplicating things so if you can come up with an example it&amp;#39;d be greatly appreciated.  I&amp;#39;m still a Rx newbie&amp;hellip;&lt;br /&gt;&lt;br /&gt;Thanks!&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;bling&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
Thanks!  I didn&amp;#39;t know about that overload.&lt;br /&gt;&lt;br /&gt;Is there a way to make it start immediately, like the StartWith(-1) in the original expression?&lt;br /&gt;&lt;br /&gt;Observable.Generate(&lt;br /&gt;   0, &lt;br /&gt;   _ =&amp;gt; true,&lt;br /&gt;   _ =&amp;gt; _,&lt;br /&gt;   _ =&amp;gt;&lt;br /&gt;   {&lt;br /&gt;     // this doesn&amp;#39;t get called until 60 seconds passes first&amp;hellip;&lt;br /&gt;     return 0;&lt;br /&gt;   }, &lt;br /&gt;   _ =&amp;gt; TimeSpan.FromSeconds(60));&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;jwooley&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
Rather than the custom Observable generator with Iterval, why not use Observable.Generate passing in a timespan of 60 seconds?&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a Real-time Push App with Silverlight: Part 3</title>
      <link>http://bling.github.io/blog/2011/08/28/building-real-time-push-app-with-rx-3/</link>
      <pubDate>Sun, 28 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2011/08/28/building-real-time-push-app-with-rx-3/</guid>
      <description>&lt;p&gt;In this part we’re going to fire up Expression Blend (the trial for version 5 can be found &lt;a href=&#34;http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;amp;amp;id=9503&#34;&gt;here&lt;/a&gt;) and do some UI work.&lt;/p&gt;

&lt;p&gt;In part 2, I created a simple Twitter client which connected to the streaming API, and connected to the sampling request which brings back random tweets.  Here is the data template:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;DataTemplate&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;x:Key=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;TweetDataTemplate&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;Grid&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;DataContext=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{Binding}&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;Grid.RowDefinitions&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;RowDefinition&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
            &lt;span class=&#34;nt&#34;&gt;&amp;lt;RowDefinition&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Height=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Auto&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;/Grid.RowDefinitions&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;FontFamily=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{StaticResource FontFamily}&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;FontSize=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;12&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Text=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{Binding Text}&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;TextWrapping=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Wrap&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Grid.Row=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
                   &lt;span class=&#34;na&#34;&gt;HorizontalAlignment=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Right&amp;quot;&lt;/span&gt;
                   &lt;span class=&#34;na&#34;&gt;VerticalAlignment=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Bottom&amp;quot;&lt;/span&gt;
                   &lt;span class=&#34;na&#34;&gt;FontFamily=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{StaticResource FontFamily}&amp;quot;&lt;/span&gt;
                   &lt;span class=&#34;na&#34;&gt;FontSize=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;13.333&amp;quot;&lt;/span&gt;
                   &lt;span class=&#34;na&#34;&gt;Foreground=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;BlueViolet&amp;quot;&lt;/span&gt;
                   &lt;span class=&#34;na&#34;&gt;Text=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{Binding ScreenName}&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Grid.Row=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
                   &lt;span class=&#34;na&#34;&gt;HorizontalAlignment=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Left&amp;quot;&lt;/span&gt;
                   &lt;span class=&#34;na&#34;&gt;VerticalAlignment=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Bottom&amp;quot;&lt;/span&gt;
                   &lt;span class=&#34;na&#34;&gt;FontFamily=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{StaticResource FontFamily}&amp;quot;&lt;/span&gt;
                   &lt;span class=&#34;na&#34;&gt;FontSize=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;9.333&amp;quot;&lt;/span&gt;
                   &lt;span class=&#34;na&#34;&gt;Foreground=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;DarkCyan&amp;quot;&lt;/span&gt;
                   &lt;span class=&#34;na&#34;&gt;Text=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{Binding CreatedAt}&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/DataTemplate&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This renders into something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://lh4.ggpht.com/-ul4umD_jKFs/Tlq_U7HuoLI/AAAAAAAAAFg/pOhMiaqmxcE/s1600/image%25255B4%25255D.png&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The text is randomly generated from Blend’s &lt;a href=&#34;http://lmgtfy.com/?q=blend+sample+data&#34;&gt;sample&lt;/a&gt; capability, which is totally awesome as it allows designers to see what they’re working with, and keeps the sample data separate from the real data.&lt;/p&gt;

&lt;p&gt;While design is a matter of personal taste, and you’re bound to get disagreements between different people, if you follow some basic rules you’ll satisfy a greater audience.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Subtle gradients and small shadows

&lt;ul&gt;
&lt;li&gt;If you take a look at all the nice interfaces, they tend to use very slight gradients and small shadows.  Most of the time you don’t even notice unless you look closely.&lt;/li&gt;
&lt;li&gt;I think Microsoft’s Metro design is beautiful.  Reason?  It emphasizes text over decorations (like gradients and shadows).  This tends to lead to very clean design because there’s very little opportunity to abuse gradients and shadows.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Realism and light sources

&lt;ul&gt;
&lt;li&gt;Continuing on with gradients and shadows, they should be realistic.  Look at your design from a 3D point of view.  Apply a light source from a certain angle, and then apply your shadows relative to that light source.&lt;/li&gt;
&lt;li&gt;Convey distance properly&lt;/li&gt;
&lt;li&gt;Darker shadows imply being closer to the background, whereas lighter shadows imply being further away.  Use blurring to add emphasis to the distance.  &lt;img src=&#34;http://lh5.ggpht.com/-YvKRal5ToEw/Tlr6OrRIS4I/AAAAAAAAAFs/AAg79v6y2Cc/image_thumb%25255B14%25255D.png?imgmax=800&#34; alt=&#34;eg&#34; /&gt;&lt;/li&gt;
&lt;li&gt;If you overlap planes you should apply these rules to each individual plane.  Don’t use the same border for everything.  Think about how it would look like in real life if you laid it out like that with pieces of paper.  The shadow sizes for that will be different, so you should do the same.&lt;/li&gt;
&lt;li&gt;Also keep in mind that the shadows used above are &lt;em&gt;way&lt;/em&gt; too much for any application.  Be subtle!&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Consistent theme

&lt;ul&gt;
&lt;li&gt;This one seems obvious but nothing is worse than having a nice looking application bring up an unskinned dialog.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Usability

&lt;ul&gt;
&lt;li&gt;If the design doesn’t serve a purpose to make it more usable, it shouldn’t be there.  Even something as simple as black on white follows this – you do that so you can read text.  However, even something as simple as that can be improved.  Take a look at why the Kindle is so successful.  The readability is better because of the lower contrast between the black and light-brown background.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;With these starting points, let’s redesign the data template.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;DataTemplate&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;x:Key=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;TweetDataTemplate&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;lt;Grid&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;nt&#34;&gt;&amp;lt;Grid.Background&amp;gt;&lt;/span&gt;
           &lt;span class=&#34;nt&#34;&gt;&amp;lt;LinearGradientBrush&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;StartPoint=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0.5,0&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;EndPoint=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0.5,1&amp;quot;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;&amp;gt;&lt;/span&gt;
               &lt;span class=&#34;nt&#34;&gt;&amp;lt;GradientStop&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Color=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;#FFDADADA&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
               &lt;span class=&#34;nt&#34;&gt;&amp;lt;GradientStop&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Offset=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Color=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;#FFC8C8C8&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
           &lt;span class=&#34;nt&#34;&gt;&amp;lt;/LinearGradientBrush&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;nt&#34;&gt;&amp;lt;/Grid.Background&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;nt&#34;&gt;&amp;lt;Grid.RowDefinitions&amp;gt;&lt;/span&gt;
           &lt;span class=&#34;nt&#34;&gt;&amp;lt;RowDefinition&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
           &lt;span class=&#34;nt&#34;&gt;&amp;lt;RowDefinition&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Height=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Auto&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;nt&#34;&gt;&amp;lt;/Grid.RowDefinitions&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;nt&#34;&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;FontFamily=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{StaticResource FontFamily}&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;FontSize=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;12&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Text=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{Binding Text}&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;TextWrapping=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Wrap&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;nt&#34;&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Grid.Row=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
                  &lt;span class=&#34;na&#34;&gt;HorizontalAlignment=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Right&amp;quot;&lt;/span&gt;
                  &lt;span class=&#34;na&#34;&gt;VerticalAlignment=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Bottom&amp;quot;&lt;/span&gt;
                  &lt;span class=&#34;na&#34;&gt;FontFamily=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{StaticResource FontFamily}&amp;quot;&lt;/span&gt;
                  &lt;span class=&#34;na&#34;&gt;FontSize=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;13.333&amp;quot;&lt;/span&gt;
                  &lt;span class=&#34;na&#34;&gt;Foreground=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;BlueViolet&amp;quot;&lt;/span&gt;
                  &lt;span class=&#34;na&#34;&gt;Text=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{Binding ScreenName}&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;nt&#34;&gt;&amp;lt;TextBlock&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Grid.Row=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;
                  &lt;span class=&#34;na&#34;&gt;HorizontalAlignment=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Left&amp;quot;&lt;/span&gt;
                  &lt;span class=&#34;na&#34;&gt;VerticalAlignment=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Bottom&amp;quot;&lt;/span&gt;
                  &lt;span class=&#34;na&#34;&gt;FontFamily=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{StaticResource FontFamily}&amp;quot;&lt;/span&gt;
                  &lt;span class=&#34;na&#34;&gt;FontSize=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;9.333&amp;quot;&lt;/span&gt;
                  &lt;span class=&#34;na&#34;&gt;Foreground=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;#FF003D8F&amp;quot;&lt;/span&gt;
                  &lt;span class=&#34;na&#34;&gt;Text=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;{Binding CreatedAt}&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;nt&#34;&gt;&amp;lt;Border&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Grid.RowSpan=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;BorderBrush=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;#FF999999&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;BorderThickness=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0,0,0,1&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
       &lt;span class=&#34;nt&#34;&gt;&amp;lt;Border&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Grid.RowSpan=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;2&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;BorderBrush=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;White&amp;quot;&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;BorderThickness=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;0,1,0,0&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
   &lt;span class=&#34;nt&#34;&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/DataTemplate&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;After these changes, it looks like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://lh5.ggpht.com/-fTL8wgr5ebs/Tlr6PGkqyeI/AAAAAAAAAF0/O98iakwvqGc/image_thumb%25255B17%25255D.png?imgmax=800&#34; alt=&#34;eg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Did you notice the gradient?  You might think after seeing it here to adjust the gradients more so you can see it.  That would be a mistake.  See below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://lh6.ggpht.com/--uPF_IEo6LM/Tlr6PpL9YDI/AAAAAAAAAF8/UxqCqYW3Wl4/image_thumb%25255B47%25255D.png?imgmax=800&#34; alt=&#34;eg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;The above is the exact same thing, but stacked vertically three times.  When this happens the subtle difference between the top and bottom of the control is more pronounced, so it looks like multiple panels are aligned together.&lt;/p&gt;

&lt;p&gt;However, there’s still a little touch you can add.  The white and gray borders are only 1 pixel high, but that’s the little touch needed to make it look crisp.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://lh3.ggpht.com/-QHLW-sKfPfI/Tlr6P_c9qLI/AAAAAAAAAGE/kJ0Z8VgS3xg/image_thumb%25255B44%25255D.png?imgmax=800&#34; alt=&#34;eg&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Finally, let’s see the before and after (or eh&amp;hellip;rather after and before, because I took the screenshot backwards :P):&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://lh6.ggpht.com/-tzZ8AVtNv0M/Tlr6QmHJHnI/AAAAAAAAAGM/H1SYEqT6cis/image_thumb%25255B50%25255D.png?imgmax=800&#34; alt=&#34;eg&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a Real-time Push App with Silverlight: Part 2</title>
      <link>http://bling.github.io/blog/2011/08/27/building-real-time-push-app-with-rx-2/</link>
      <pubDate>Sat, 27 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2011/08/27/building-real-time-push-app-with-rx-2/</guid>
      <description>&lt;p&gt;Let’s review the main Rx code from last time:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IObservable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetJsonStreams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FromAsyncPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WebResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BeginGetResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EndGetResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)()&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetResponseStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FromAsyncPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BeginRead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EndRead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SelectMany&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ParseJson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;One thing I didn’t like about this was that the web request object was created regardless of whether the Observable gets a subscription or not.  This is potentially wasted resources, and I wanted to refactor this to be completely lazy.&lt;/p&gt;

&lt;p&gt;And with this I started to run into my first &amp;ldquo;huh?&amp;rdquo; moments with Rx: I blocked the UI thread.  How did I do that? I started down the path of exploring some more of the Rx methods, which lead me to &lt;code&gt;Create&lt;/code&gt;, which lets you manually call &lt;code&gt;OnNext&lt;/code&gt;.  With this train of thought, I came up with something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;obs&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FromAsyncPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WebResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BeginGetResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EndGetResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;First&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;response&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetResponseStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reader&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FromAsyncPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BeginRead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EndRead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ParseJson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;obs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OnNext&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

        &lt;span class=&#34;n&#34;&gt;obs&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;OnCompleted&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;});&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Great! The initialization of the web request only occurs when subscribed! And it will even dispose the stream (by returning &lt;code&gt;str&lt;/code&gt;) upon unsubscription.  I ran the app and the UI thread immediately blocked.  What happened?&lt;/p&gt;

&lt;p&gt;Rx has the concept of subscription and observation, and provides a way to subscribe and observe on different threads.  Here is the original code that subscribed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetJsonStreams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ObserveOnDispatcher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Can you spot the error? I explicitly told Rx to observe on the dispatcher thread, because I want the action inside &lt;code&gt;Subscribe&lt;/code&gt; to be invoked on the UI thread, but I didn’t specify where I want to set up the subscription.  Since I left it out, it uses the current thread, which happens to be the UI thread.  To solve this, it’s as simple as doing this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetJsonStreams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SubscribeOn&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Scheduler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ThreadPool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ObserveOnDispatcher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s it! Easy! This also follows one of the most important guidelines when using Rx: &lt;em&gt;Subscription and Observation should be done as late as possible&lt;/em&gt;, typically just before the &lt;code&gt;Subscribe&lt;/code&gt;.  Anything more and you’ll likely make Rx spawn more threads than are necessary or some other nasty bugs.  &lt;a href=&#34;http://en.wikipedia.org/wiki/KISS_principle&#34;&gt;KISS&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Now with that out of the way, let’s replace the boring TextBlock with something more usable.  First, I need to parse all the JSON streams I’m getting into bindable models.  To do that, I upgraded my StreamReader component and threw in System.Json for some basic parsing:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TweetParser&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_stack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StringBuilder&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_sb&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StringBuilder&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tweet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;++)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;_sb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;{&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_stack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;++;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;current&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;}&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_stack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;--;&lt;/span&gt;

            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_stack&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_sb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Length&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;Tweet&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
                &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JsonValue&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;_sb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;

                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;value&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;is&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JsonObject&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Tweet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;TryParse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JsonObject&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

                &lt;span class=&#34;n&#34;&gt;_sb&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Clear&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Nothing overly complicated.  Next, the Tweet object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;Tweet&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JsonObject&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;TryParse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JsonObject&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;out&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tweet&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ContainsKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ContainsKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Tweet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;value&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;tweet&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Tweet&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;JsonObject&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;_json&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;text&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToValueString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ScreenName&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;get&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;_json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;user&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;][&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;screen_name&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;].&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToValueString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TweetEx&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ToValueString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;JsonValue&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ToString&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Trim&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;sc&#34;&gt;&amp;#39;&amp;quot;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To keep things simple I’m only extracting the screen name and text.  I won’t bore you setting up the views since it’s just simple ListBox bound to an &lt;code&gt;ObservableCollection&amp;lt;Tweet&amp;gt;&lt;/code&gt;, and a DataTemplate for Tweet.  When it’s all said and done, we see something like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://lh3.ggpht.com/-sVzoQRx_V2s/TlqFswXVhUI/AAAAAAAAAFc/d9nLfBSrARA/image_thumb3.png?imgmax=800&#34; alt=&#34;img&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Performance is still good at 2-5% CPU, even though we’re scrolling through 1000 items in near real-time.&lt;/p&gt;

&lt;p&gt;Stay tuned for part 3, when we introduce Expression Blend and go into basics of UI design.  Also, most of this will hit GitHub very soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Building a Real-time Push App with Silverlight: Part 1</title>
      <link>http://bling.github.io/blog/2011/08/26/building-real-time-push-app-with-rx-1/</link>
      <pubDate>Fri, 26 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2011/08/26/building-real-time-push-app-with-rx-1/</guid>
      <description>&lt;p&gt;This is the beginning of a multi-part series where I’ll be building an interactive application with Silverlight 5 (still beta as of this post).  It will be built from the ground up and designed predominantly from a “push data” point of view, where the application is reacting to events in real-time, rather than a more traditional “pulling” point of view.  This type of application has exploded with the popularity of social networking and has made a lot of the traditional methods of building applications obsolete.&lt;/p&gt;

&lt;p&gt;The best example of this shift is from Twitter.  When it first came out, it was (and still is predominantly) a “pull” model.  You have 200 API requests an hour, and you pull Twitter whenever you want to check if there are tweets of people you follow.  That is changing with the &lt;a href=&#34;https://dev.twitter.com/docs/streaming-api&#34;&gt;Streaming API&lt;/a&gt; where data is “pushed” to you as it comes.  This changes the way you write your code and requires a mind shift much like from for loops to LINQ.&lt;/p&gt;

&lt;p&gt;The primary purpose of this series is build a real-time push application from beginning to end, and to show any problems I run along the way, and how I managed to solve them.  This will be my first attempt at building a Silverlight application as well as learning &lt;a href=&#34;http://msdn.microsoft.com/en-us/data/gg577609&#34;&gt;Reactive Extensions&lt;/a&gt;, so I’m bound to run into newbie mistakes.  If you have any tips or pointers please let me know!&lt;/p&gt;

&lt;p&gt;Also, rather than doing this from a purely technical point of view, I’m also going to put on my designer hat and talk about UI design, and make it look good with Expression Blend when I get to designing the UI in later parts of this series.  I feel that this is often overlooked and can result in a lot of wasted work and lead to frustration.&lt;/p&gt;

&lt;p&gt;This first post will be to get up and running and connected to Twitter with the Streaming API. This was chosen primarily because it is so much data can be pushed through and it can be used to demonstrate how to write a high performance Silverlight application.  It’s one thing to write something maintainable, and another altogether to make it run fast as well.  I’ve worked on too many WPF projects where performance took a back seat, and in WPF particularly this tends to create some massive technical debt.  The Silverlight/WPF technology stack is an exception to the rule and you should definitely think about performance from the start.&lt;/p&gt;

&lt;p&gt;Well let’s get started!  We will connect to Twitter, convert it to an Observable, and then display tweets on the UI.&lt;/p&gt;

&lt;p&gt;First, let’s create our TwitterStream class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TwitterStream&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;TwitterStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;c1&#34;&gt;// this allows http authentication to work&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;WebRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;RegisterPrefix&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;http://&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;System&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Net&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Browser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WebRequestCreator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ClientHttp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StreamParser&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;StreamParser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Username&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Password&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;HttpWebRequest&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;GetRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WebRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateHttp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;http://stream.twitter.com/1/statuses/sample.json?delimited=length&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UseDefaultCredentials&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;false&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Credentials&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NetworkCredential&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Username&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Password&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IObservable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetJsonStreams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;GetRequest&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FromAsyncPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WebResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BeginGetResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EndGetResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)()&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetResponseStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FromAsyncPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BeginRead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EndRead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SelectMany&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ParseJson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IEnumerable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ParseJson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IObservable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;256&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;];&lt;/span&gt;
        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bytesRead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

        &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bytesRead&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;reader&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Length&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Single&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;foreach&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;parser&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Parse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;bytesRead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;yield&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;json&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And that’s all there is to it!  The most complicated part is probably parsing of the JSON documents themselves, which I refactored into its own class.  The algorithm in the parser is pretty primitive, as it just looks for opening { and closing } and calls that a document – nothing more, nothing less.  Note that this uses the deprecated basic HTTP authentication.  Sooner or later it will be shut down and OAuth will be required, so I will upgrade when that happens as I want to keep the amount of written code to a minimum.&lt;/p&gt;

&lt;p&gt;Perhaps the more interesting bit is this part with Rx:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FromAsyncPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WebResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BeginGetResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EndGetResponse&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;wr&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;wr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetResponseStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Select&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Observable&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;FromAsyncPattern&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[],&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BeginRead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;str&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;EndRead&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SelectMany&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ParseJson&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The API takes some getting used to, but once you “tune in” things start to make sense.  The &lt;code&gt;FromAsyncPattern&lt;/code&gt; essentially wraps the &lt;a href=&#34;http://msdn.microsoft.com/en-us/library/ms228969.aspx&#34;&gt;APM&lt;/a&gt; pattern’s Begin/End calls into a single &lt;code&gt;Func&amp;lt;&amp;gt;&lt;/code&gt;, which when invoked gets you the result as if you called End(), however without all the tedious AsyncCallback implementation.&lt;/p&gt;

&lt;p&gt;The nice thing about this wrapper Func is that the code starts to look synchronous, even though it is using the ThreadPool behind the scenes.  Next, the response is projected into its response stream, which again is converted to another Observable for reading bytes from the stream until finally it goes into the &lt;code&gt;ParseJson&lt;/code&gt; method which projects string results.  This is both good and bad.  Good in that it can make asynchronous code look short and succinct (in this example I’ve wrapped 2 APM pattern calls in 2 lines of code), bad in that anyone inexperienced with Rx will get lost pretty fast.&lt;/p&gt;

&lt;p&gt;Rx thus far has been a fairly high learning curve.  Maybe it’s just me.  When I read about it from others, or from seminars, it all makes sense and I generally don’t have any questions.  Trying to use it directly is another story, as there are so many overloads it’s easy to get overwhelmed.  I feel like Intellisense is making things worse!&lt;/p&gt;

&lt;p&gt;Carrying on, the code above actually doesn’t do anything yet.  First, you must Subscribe to an observable before it does something, similar to you must foreach on a IEnumerable before it starts pulling data.&lt;/p&gt;

&lt;p&gt;To finish off, let’s create a simple Window with a TextBlock bound to a Text property.  This is the constructor:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;MainPage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;InitializeComponent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;DataContext&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;

   &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TwitterStream&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Username&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;blingcoder&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Password&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;1234567&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
   &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetJsonStreams&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ObserveOnDispatcher&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
       &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Subscribe&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Text&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Perhaps one of the nicest features of Rx is automatic thread switching between background threads and UI threads.  Above, there is a call to &lt;code&gt;ObserveOnDispatcher&lt;/code&gt;, which as the name implies it observes to events on the Dispatcher thread :-).  Rx automatically handles switching to the UI thread so when Subscribe occurs we’re on the UI thread.&lt;/p&gt;

&lt;p&gt;Performance is also very good so far, only maxing out at 5% CPU for what appears to be a continuous flood of tweets from random people.&lt;/p&gt;

&lt;p&gt;And there you have it!  A completely asynchronous streaming Twitter client in roughly 20 lines of code (minus the parsing).  Stay tuned for part 2&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Injecting Logger Instances Via Convention With Unity</title>
      <link>http://bling.github.io/blog/2011/08/19/injecting-logger-instances-via-unity/</link>
      <pubDate>Fri, 19 Aug 2011 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2011/08/19/injecting-logger-instances-via-unity/</guid>
      <description>&lt;p&gt;Let’s say you have something like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;MyClass&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ILog&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Logger&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And you simply want Unity to inject an instance of &lt;code&gt;ILog&lt;/code&gt; such that its name is &lt;code&gt;requestingDependency.GetType().FullName&lt;/code&gt;, which in this case would be &lt;code&gt;Full.Namespace.MyClass&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll leave it up to the exercise of the reader, but if you search for &amp;lsquo;log4net and Unity&amp;rsquo; you will find some working solutions which IMO are way too long to solve this.  I have obviously taken for granted the features of Windsor and Autofac too much because I expected something like this to be easily done in 2-3 lines of code.&lt;/p&gt;

&lt;p&gt;After a lot of cursing I&amp;rsquo;ve come up with something that&amp;rsquo;s almost as short and gets the job done:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;LoggingExtension&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;UnityContainerExtension&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;protected&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Strategies&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;AddNew&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;UnityBuildStage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;PreCreation&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;LogBuilderStrategy&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;BuilderStrategy&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;readonly&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Stack&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;buildKeys&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Stack&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PreBuildUp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IBuilderContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;NamedTypeBuildKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;BuildKey&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;typeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ILog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buildKeys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Count&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;throw&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;InvalidOperationException&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;Log instances cannot be resolved directly.&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Existing&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;LogManager&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;GetLog&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buildKeys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Peek&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buildKeys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Push&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;PostBuildUp&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IBuilderContext&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;context&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;k&#34;&gt;this&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;buildKeys&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Pop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you noticed, I had to cast to &lt;code&gt;NamedTypeBuildKey&lt;/code&gt;, which unfortunately means I’m still stuck with Unity 1.2&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Tools I Use To Do What I Do</title>
      <link>http://bling.github.io/blog/2011/06/23/tools-i-use-to-do-what-i-do/</link>
      <pubDate>Thu, 23 Jun 2011 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2011/06/23/tools-i-use-to-do-what-i-do/</guid>
      <description>&lt;div class=&#39;post&#39;&gt;
&lt;p&gt;It’s been a while since I last blogged, but I want to get back into it….I just haven’t thought about what I wanna blog about yet.&amp;nbsp; I’m thinking of doing some sort of multi-part series on a topic but haven’t decided on what yet.&amp;nbsp; Nonetheless, just to get the ball rolling again here’s a quick blog post on some of the tools I use to do my every day job that’s in addition to your typical .NET developer tool chain.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;General&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://www.tcbmi.com/strokeit/&#34;&gt;StrokeIt&lt;/a&gt;:&amp;nbsp; Funny name aside, on any clean install of Windows this is the &lt;strong&gt;first&lt;/strong&gt; thing I install.&amp;nbsp; I load up IE and I download this, followed by Chrome/Firefox.&amp;nbsp; It is a mouse gesture program that affects all of Windows.&amp;nbsp; By holding down the right mouse button, and making gestures you can do common tasks like minimize (drag SW), maximize (drag NE), close (draw a C), and others.&amp;nbsp; It’s much faster than clicking the minimize/maximize buttons.&amp;nbsp; For web browsing, creating and close tabs are drag SE and drag NW respectively.&amp;nbsp; Back is W.&amp;nbsp; Forward is E.&amp;nbsp; Working this way is faster than any keyboard shortcut.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://sourceforge.net/projects/console/&#34;&gt;Console2&lt;/a&gt;:&amp;nbsp; It’s not a necessity, but it’s nice to be able to use a console with a better looking font.&amp;nbsp; You can easily customize to run another shell, and in my case I have Powershell as the shell.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://virtuawin.sourceforge.net/&#34;&gt;VirtuaWin&lt;/a&gt;:&amp;nbsp; Ironically I don’t use any virtual desktops, but this app creates a nice middle click on any window that lets you mark it as ‘always on top’.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://www.vim.org/&#34;&gt;Vim&lt;/a&gt;:&amp;nbsp; It was an awful, painful 2 weeks to learn this thing but I’m sure glad I did.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Development/Visual Studio&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://www.jetbrains.com/resharper/&#34;&gt;Resharper&lt;/a&gt;:&amp;nbsp; This one doesn’t need much mentioning as anyone serious about programming in .NET has either heard of it, use it, or use one of its competitors like &lt;a href=&#34;http://www.devexpress.com/Products/Visual_Studio_Add-in/Coding_Assistance/&#34;&gt;CodeRush&lt;/a&gt;.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://visualstudiogallery.msdn.microsoft.com/465a0d53-5133-4edd-a0cd-94484fe3d853&#34;&gt;AllMargins&lt;/a&gt;:&amp;nbsp; This hidden gem is an awesome extension has brings a bunch of very useful features to the editor.&amp;nbsp; It brings structural highlighting, highlighting matching words under caret, and RockScroll inspired scroll bar, and it does it all with little to no cost in performance.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://visualstudiogallery.msdn.microsoft.com/d0d33361-18e2-46c0-8ff2-4adea1e34fef/&#34;&gt;Productivity Power Tools&lt;/a&gt;:&amp;nbsp; There’s only 2 that I use here: document tabs, and moving lines.&amp;nbsp; All the rest are either eye candy, negligible enhancements, or just plain too slow to be any use in large solutions (solution navigator I’m looking at you!!).&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://visualstudiogallery.msdn.microsoft.com/1a67eee3-fdd1-4745-b290-09d649d07ee0&#34;&gt;XAML Intellisense Presenter&lt;/a&gt;:&amp;nbsp; This is a must-have for anyone who works with XAML in VS regularly.&amp;nbsp; Resharper 6 may soon make this obsolete, however…&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://wiki.sharpdevelop.net/ILSpy.ashx&#34;&gt;ILSpy&lt;/a&gt;/&lt;a href=&#34;http://www.jetbrains.com/decompiler/&#34;&gt;dotPeek&lt;/a&gt;:&amp;nbsp; Decompilers.&amp;nbsp; ‘nuff said.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://snoopwpf.codeplex.com/&#34;&gt;Snoop&lt;/a&gt;:&amp;nbsp; Staple tool for WPF developers to inspect the visual/logical tree.&amp;nbsp; There’s also &lt;a href=&#34;http://wpfinspector.codeplex.com/&#34;&gt;WPF Inspector&lt;/a&gt; which has a much nicer UI, but unfortunately doesn’t perform as fast.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Profiling&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://www.red-gate.com/products/dotnet-development/dotnet-developer-bundle/&#34;&gt;ANTS&lt;/a&gt;/&lt;a href=&#34;http://www.jetbrains.com/profiler/&#34;&gt;dotTrace&lt;/a&gt;/&lt;a href=&#34;http://www.yourkit.com/dotnet/download/&#34;&gt;YourKit&lt;/a&gt;/etc:&amp;nbsp; I’ve used many performance/memory profilers, and those 3 are the ones I like the most.&amp;nbsp; Unfortunately, they all do things the others don’t, and all these things are very useful, so you still end up needing to use all of them to fix the particular problem you’re working on.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://msdn.microsoft.com/en-us/windows/hardware/gg463009&#34;&gt;WinDbg&lt;/a&gt;: It isn’t every day I use this, but I’m sure glad to know that such a thing exists and the amount of power it gives me.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Scripting&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://powergui.org/index.jspa&#34;&gt;PowerGUI&lt;/a&gt;:&amp;nbsp; Best tool I found for editing PowerShell.&amp;nbsp; The intellisense is great and has all the things you were expect when debugging through scripts.&lt;/p&gt; &lt;p&gt;&lt;strong&gt;Miscellaneous&lt;/strong&gt;&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://www.baremetalsoft.com/baretail/&#34;&gt;BareTail&lt;/a&gt;:&amp;nbsp; Amazing program which watches log files in real time and can highlight rows based on a search pattern.&lt;/p&gt; &lt;p&gt;&lt;a href=&#34;http://technet.microsoft.com/en-us/scriptcenter/dd742419&#34;&gt;PowerShell&lt;/a&gt;/&lt;a href=&#34;http://cygwin.org/&#34;&gt;Cygwin&lt;/a&gt;/&lt;a href=&#34;http://www.mingw.org/wiki/MSYS&#34;&gt;MSYS&lt;/a&gt;:&amp;nbsp; I used to be a Cygwin/MSYS user because back in the day I liked to install a different Linux distribution every week so I learned some basic Bash commands and that carried over to Windows.&amp;nbsp; Since PowerShell now exists, we have a real shell in Windows, so I’ve switched over to learn it, since as a Windows developer it’s more applicable to the kind of work I do.&lt;/p&gt; &lt;p&gt;&amp;nbsp;&lt;/p&gt; &lt;p&gt;And there’s more but that’s enough for now!&lt;/p&gt;  &lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class=&#39;comments&#39;&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;bling&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
Actually, Cygwin/MSYS used to be in my tool chain, but I&amp;#39;ve made an effort to learn PowerShell by making it my shell.&lt;br /&gt;&lt;br /&gt;I&amp;#39;m still thrown off sometimes because PowerShell operates on objects, rather than text.  Sometimes this makes it easier, sometimes harder.  Grep comes to mind.&lt;br /&gt;&lt;br /&gt;Check out BareTail if you want to watch log files in real time.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Mike McG&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
Nice post! Gonna check out XAML Intellisense Presenter, All Margins, and PowerGUI.&lt;br /&gt;&lt;br /&gt;For Always on Top functionality, I&amp;#39;ve relied on PowerMenu. It doesn&amp;#39;t have the middle-click (gotta go through the app menu in the window chrome), but it also lets you Minimize to Tray. StexBar is also pretty neat-o, lets you create your own buttons on the Explorer button bar.&lt;br /&gt;&lt;br /&gt;Maybe due to my *nix background, I also install Cygwin (including sshd which allows me to use Cygwin through PuTTY rather than cmd.exe), grepWin (regular expression per-directory content search), and Tail for Win32 (to watch log files). (In addition to Tail I install Less for Windows and hook it up to StexBar, then use Shift+F to watch files).&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>