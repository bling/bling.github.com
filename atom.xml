<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[bling on software development]]></title>
  <link href="http://bling.github.io//atom.xml" rel="self"/>
  <link href="http://bling.github.io//"/>
  <updated>2013-07-06T03:02:36+00:00</updated>
  <id>http://bling.github.io//</id>
  <author>
    <name><![CDATA[Bailey Ling]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Unite.vim, The plugin you didn't know you need]]></title>
    <link href="http://bling.github.io//blog/2013/06/02/unite-dot-vim-the-plugin-you-didnt-know-you-need/"/>
    <updated>2013-06-02T19:34:00+00:00</updated>
    <id>http://bling.github.io//blog/2013/06/02/unite-dot-vim-the-plugin-you-didnt-know-you-need</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/Shougo/unite.vim">Unite.vim</a></h1>

<p>What is this?  If you&rsquo;ve never heard of this Vim plugin, then this post is for you.  This is one of those hidden gems in the Vim plugin world that is truly life changing.  I think this plugin is so awesome that I&rsquo;ve decided to write a post dedicated to it so that more people know about it.</p>

<p>The plugin is written by <a href="https://github.com/Shougo">Shougo Matsu</a>.  He has written a lot of other popular plugins, notably <a href="https://github.com/Shougo/neocomplcache.vim">neocomplcache</a> and <a href="https://github.com/Shougo/vimshell.vim">vimshell</a>.  I use a lot of his plugins, so I started to notice when certain plugins started using Unite as a dependency, like <a href="https://github.com/Shougo/neobundle.vim">neobundle</a> and <a href="https://github.com/Shougo/vimfiler.vim">vimfiler</a>.</p>

<p>At first it looked like Unite was just a general purpose library, but I was in for a surprise because it is so much more than that.</p>

<!--more-->


<h1>What is it?</h1>

<p>This is the problem I had initially.  The project <a href="https://github.com/Shougo/unite.vim">homepage</a> describes it as &ldquo;&hellip;can search and display information from arbitrary sources like files, buffers, recently used files or registers.&rdquo;  It goes on to show some usage samples, but there is no &ldquo;wow&rdquo; factor.  After reading the readme I still didn&rsquo;t have a clue what the plugin could do.</p>

<p>(edit: After I wrote blog post, Unite&rsquo;s homepage has been dramatically improved with screenshots, animated gifs, and even a kickass logo.  It definitely has a lot of &ldquo;wow&rdquo; now.)</p>

<p>It wasn&rsquo;t until I stumbled upon terryma&rsquo;s <a href="https://github.com/terryma/dotfiles/blob/master/.vimrc">vimrc</a> (the author of <a href="https://github.com/terryma/vim-multiple-cursors">multiple-cursors</a> and realized that he replaced <a href="https://github.com/kien/ctrlp.vim">ctrlp</a> entirely with unite).  ctrlp is by far one of the best/most popular plugins and for it to be replacable is no easy feat.</p>

<p>So how do you do it?</p>

<h1>First things first, configuration</h1>

<p>Unite is geared towards experienced vim users &mdash; it does not create any bindings by default.  To make any use of it, you will need to create the bindings yourself.  And in certain cases, rather than declaring <code>g:variables</code>, you configure it with method calls, like <code>unite#filters#matcher_default#use(['matcher_fuzzy'])</code>, but thankfully, like all of Shougo&rsquo;s plugins, the plugin is <em>very</em> well documented, so feel free to <code>:help unite</code> to figure out how to use the plugin.</p>

<p>If you&rsquo;re lazy, you can go directly to my <a href="https://github.com/bling/dotvim">vim distribution</a> and take the configuration out of there.</p>

<p>But enough talking, here&rsquo;s some quick demos of what Unite can do&hellip;</p>

<h1>What can it do?</h1>

<h2>File searching like <a href="https://github.com/kien/ctrlp.vim">ctrlp.vim</a></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nnoremap &lt;C-p&gt; :Unite file_rec/async&lt;cr&gt;</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://bling.github.io//images/unite-ctrlp.gif"></p>

<p>Did you notice the async flag?  Unite uses <a href="https://github.com/Shougo/vimproc.vim">vimproc</a> behind the scenes, which affords for searching while it populates the file list in the background.  That is amazing!</p>

<h2>Content searching like <a href="https://github.com/mileszs/ack.vim">ack.vim</a> (or <a href="https://github.com/rking/ag.vim">ag.vim</a>)</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nnoremap &lt;space&gt;/ :Unite grep:.&lt;cr&gt;</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://bling.github.io//images/unite-grep.gif"></p>

<p>Unite can be configured to use <code>grep</code>, <code>ack</code>, or <code>ag</code>; whichever is available.</p>

<h2>Yank history like <a href="https://github.com/vim-scripts/YankRing.vim">yankring</a>/<a href="https://github.com/maxbrunsfeld/vim-yankstack">yankstack</a></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>let g:unite_source_history_yank_enable = 1
</span><span class='line'>nnoremap &lt;space&gt;y :Unite history/yank&lt;cr&gt;</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://bling.github.io//images/unite-yanks.gif"></p>

<p>To be fair, unite cannot bind to a key to cycle the history, so it&rsquo;s not a 100% replacement.  However, if you only rarely use the yankring then this is a pretty good alternative.</p>

<h2>Buffer switching like <a href="https://github.com/sjbach/lusty">LustyJuggler</a></h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>nnoremap &lt;space&gt;s :Unite -quick-match buffer&lt;cr&gt;</span></code></pre></td></tr></table></div></figure>


<p><img class="center" src="http://bling.github.io//images/unite-juggle.gif"></p>

<p>Notice that <code>-quick-match</code> is just a flag, which means you can apply this to any source.</p>

<h2>Bonus</h2>

<p>Ever been jealous of Sublime&rsquo;s auto preview feature?  Well, turns out unite has an <code>-auto-preview</code> flag that you can add.</p>

<h1>Finale</h1>

<p>And that&rsquo;s all I got for now.  I&rsquo;m still learning more about what this plugin can do, but it&rsquo;s definitely earned its place in my vim toolbox.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[On TypeScript]]></title>
    <link href="http://bling.github.io//blog/2013/04/19/on-typescript/"/>
    <updated>2013-04-19T23:31:00+00:00</updated>
    <id>http://bling.github.io//blog/2013/04/19/on-typescript</id>
    <content type="html"><![CDATA[<h1>What&rsquo;s the deal?</h1>

<p>For the past week I&rsquo;ve been fortunate to work on an internal project which was purely greenfield and built on Node/Express on the backend, and AngularJS on the front-end.  It was a ton of fun and I learned a lot in the process, most particularly TypeScript and CoffeeScript.</p>

<p>TypeScript was of interest because the application I was writing contained some pretty complex calculations.  The existing implementation was in Java, and at first glance it seemed like it would be a good idea to have some type safety whilst reimplementing the algorithm.</p>

<!--more-->


<h1>Getting Started</h1>

<p>I don&rsquo;t know why there&rsquo;s this misconception that you need to have Microsoft tooling to use Typescript, but it is 100% false and a myth.  To install it you just run <code>npm install typescript</code>.  Yes!  It&rsquo;s just a standard node package.  Once it&rsquo;s installed you have access to a <code>tsc</code> command, similar to how you would use the <code>coffee</code>, i.e. you give it input, and it spits output.</p>

<p>If you&rsquo;ve ever been to <a href="http://typescriptlang.org">TypeScript</a>&rsquo;s website, you will have seen the rather impressive playground where you can see side by side Javascript vs Typescript.  This is a trick!  It gives you the illusion that you can simply annotate variables with types and it will automatically check only those types.  This is only half true.  Let&rsquo;s look at a innocent Node application:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">http</span> <span class="o">=</span> <span class="nx">require</span><span class="p">(</span><span class="s1">&#39;http&#39;</span><span class="p">);</span>
</span><span class='line'><span class="nx">http</span><span class="p">.</span><span class="nx">createServer</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">req</span><span class="p">,</span> <span class="nx">res</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">write</span><span class="p">(</span><span class="s1">&#39;hello world&#39;</span><span class="p">);</span>
</span><span class='line'>  <span class="nx">res</span><span class="p">.</span><span class="nx">end</span><span class="p">();</span>
</span><span class='line'><span class="p">}).</span><span class="nx">listen</span><span class="p">(</span><span class="mi">3000</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That is just plain &lsquo;ol Javascript, and if the claim that all Javascript is valid Typescript, this should compile fine.  Except that it doesn&rsquo;t&hellip;we are greeted with the following error:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="nx">The</span> <span class="nx">name</span> <span class="s1">&#39;require&#39;</span> <span class="nx">does</span> <span class="nx">not</span> <span class="nx">exist</span> <span class="k">in</span> <span class="nx">the</span> <span class="nx">current</span> <span class="nx">scope</span><span class="p">.</span>
</span></code></pre></td></tr></table></div></figure>


<p>As it turns out, if you&rsquo;re using Typescript you need to tell the compiler of <em>every</em> object and function that you&rsquo;re using.  In the above example, the compiler doesn&rsquo;t know anything about <code>require</code>, so it threw an error.</p>

<p>The way to correct this is with definition files.  These are like header files and they define the API of a module.  The pseudo standard for definition files currently lives in a GitHub repository named <a href="https://github.com/borisyankov/DefinitelyTyped">DefinitedlyTyped</a>.  This contains definition files for many popular libraries and is actively updated by the community.</p>

<p>Once you have a definition file, you add <code>///&lt;reference path="./d.ts/requirejs/require.d.ts"/&gt;</code> to the top of the file, and the code will compile.</p>

<p>The second option is to add <code>declare var require: any;</code> to the top of the file, effectively telling the compiler to ignore anything to do with that variable.</p>

<p>Either way, this was completely different from my initial expectations.  I thought that I would be able to take a large application, rename everything from <code>js</code> to <code>ts</code>, and then slowly upgrade the code to Typescript.  This is obviously not possible.  For this to work, you would need to define an application definition file, which references all other definition files (or declare variables for those that do not have definition files), and then for <em>every file in your project</em>, you would ///reference the application definition file.</p>

<p>I suppose this is a necessary evil for type checking, although it would have been nice to have this baked into the compiler to ease the migration path of existing applications.</p>

<h1>Clean output</h1>

<p>One of the nice things about TypeScript is that the output is very clean and predictable.  For example, here is an empty class:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kr">class</span> <span class="nx">Foo</span> <span class="p">{</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>It will compile to this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">var</span> <span class="nx">Foo</span> <span class="o">=</span> <span class="p">(</span><span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">function</span> <span class="nx">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="nx">Foo</span><span class="p">;</span>
</span><span class='line'><span class="p">})();</span>
</span></code></pre></td></tr></table></div></figure>


<p>All classes are done so with an immediately executed anonymous function.  If you define <code>Foo</code> as <code>export class Foo</code>, then the output will have an extra line at the bottom: <code>exports.Foo = Foo;</code>.  In other words, it&rsquo;s got first class support for the CommonJS syntax (as well as AMD).</p>

<h1>Competing thought processes</h1>

<p>For people coming from C#, it will feel very comfortable, because it is <em>extremely</em> similar to C#.  You have classes, methods, modules (aka namespaces), just like you have in C#.  If you try to use a method that doesn&rsquo;t exist, the compiler will complain.  These features are the bread and butter of compiled languages and people coming from Visual Studio (the majority of the audience) will feel very comfortable.</p>

<p>Then why is it that I did <em>not</em> enjoy writing in Typescript?</p>

<p>I&rsquo;m about 99% sure that I was just so used to working in untyped Javascript that I became annoyed that I had to &ldquo;annotate yet another variable&rdquo;.  TypeScript doesn&rsquo;t force you to annotate every variable, in fact, you could annotate nothing and it&rsquo;ll still compile (as long as you have the definition files).  But if you&rsquo;re going to use TypeScript it seems silly not to use types.</p>

<p>But what this comes down to is the classic static vs dynamic languages.  Static proponents will state that the compiler saves you from a lot of mistakes earlier on.  Dynamic proponents will state that &ldquo;if it quacks like a duck, it&rsquo;s a duck, I shouldn&rsquo;t need to declare it&rdquo;.  They&rsquo;re both right.</p>

<p>Either way, given an open mind and some time, you can be productive in either environment, and makes you a better developer in the end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET/WPF to HTML/CSS/Javscript]]></title>
    <link href="http://bling.github.io//blog/2013/04/13/dot-net-slash-wpf-to-html-slash-css-slash-javscript/"/>
    <updated>2013-04-13T11:58:00+00:00</updated>
    <id>http://bling.github.io//blog/2013/04/13/dot-net-slash-wpf-to-html-slash-css-slash-javscript</id>
    <content type="html"><![CDATA[<h1>In the beginning&hellip;</h1>

<p>For the vast majority of my career I&rsquo;d say I was a Microsoft guy.  I took Java in university and toyed around with Linux at home, but what paid the bills was my knowledge and expertise in Microsoft technologies that I&rsquo;ve built up over the years.</p>

<p>Then Metro and Windows 8 came, and the writing was on the wall.  Microsoft really screwed up.  In their efforts to play catch up, they alienated their business customers and came up with solutions that consumers did not want.  Despite their best efforts they could not stop the avalanche that was Node and HTML5.  Everyone was moving to HTML5, and even Microsoft themselves could not ignore this as now they&rsquo;re supporting hosting Node on Azure.</p>

<!--more-->


<p>People who have been in the industry for a long time will say this is just the same desktop vs web debacle and that it is cyclical and that people will realize that the web isn&rsquo;t good enough and go back to desktop applications.  But I think this time is different.  This time around, the browser has hardware acceleration.</p>

<p>Performance has always been the deciding factor for going back to the desktop.  I don&rsquo;t think that argument holds true anymore.  It&rsquo;s clear you can build some amazing applications on the web now that perform well.  You can build an IDE in the browser, like <a href="http://c9.io">Cloud9</a>, or you could create impressive animations like <a href="http://famo.us">Famous</a> demonstrates.  And even 3D games are possible now.</p>

<p>The web is here to stay, and with more and more people having phones and tablets as their primary computing devices (and <em>not</em> a desktop), naturally the technologies we use to build around these devices become more important, i.e. technologies that are cross platform and work on every device from phone to desktop.</p>

<p>So what happens when you throw a C#/WPF guru into the water with no knowledge of HTML, CSS, or Javascript?</p>

<h1>And then there was pain&hellip;</h1>

<p>From Friday to Monday, I went from a Windows 7 machine with Visual Studio, Resharper, PowerShell, Blend to a OSX machine.  I left out the tools on purpose, because literally I had none.  The only thing I knew was that I would be working on HTML/Javascript and I&rsquo;d have to bring my own knives to the kitchen.</p>

<p>Except that I had no knives&hellip;</p>

<h1>Baby steps</h1>

<p>I was comfortable with the command line, since I&rsquo;m a huge Linux fan and prefer a CLI over a GUI most of the time.  But it became clear that I had acquired quite a bit of PowerShell knowledge in my previous efforts to force myself to learn it, i.e. replace <code>cmd.exe</code> with <code>powershell.exe</code>.  When I tried to do <code>ls | % { $_.Length }</code> I was in for a sad realization&hellip;these aren&rsquo;t objects anymore.  Damn, all that muscle memory can&rsquo;t be used here.  Damn you vendor lock in!</p>

<p>But as you can see, I still used <code>ls</code> instead of <code>dir</code> or <code>gcm</code>, so I was already in this weird world of mixing UNIX with PowerShell, and moving back to UNIX wasn&rsquo;t too bad since I didn&rsquo;t have to remember a whole new set of commands for common use cases.  Although it annoys me from time to time that I cannot just <code>(get-date).addweeks(3)</code> from the command line anymore, I&rsquo;m going to have to live without it.</p>

<p>Next up was getting my environment set up.  A quick Google search showed that <a href="https://github.com/mxcl/homebrew">Homebrew</a> was the hotness, so I installed it, and yes, it was pretty cool.  It still has a ways to go before it&rsquo;s comparable to Linux package managers like <code>apt-get</code> or my favorite, Archlinux&rsquo;s <code>pacman</code>, but that is understandable since OSX is not built from the ground up using package managers like Linux distributions typically are.  For the most part, it worked as advertised, and after <code>brew install git</code> I was ready to check out the source code.</p>

<h1>Making the first commit</h1>

<p>Naturally, the first thing I did was download <a href="http://www.jetbrains.com/webstorm/">Webstorm</a>.  Programming without an IDE, yeah right!  I&rsquo;m a professional!</p>

<p>Alright, let&rsquo;s get working.  Let&rsquo;s start up Webstorm.  OK, it&rsquo;s loading&hellip;loading&hellip;loading&hellip;loading.  OK, great, that&rsquo;s a little faster than Visual Studio, so I&rsquo;m happy.  OK, it looks familiar.  It&rsquo;s got a side bar with my files, it&rsquo;s got navigation like Resharper, let&rsquo;s start working!</p>

<p>Blah blah blah, type type type, <code>this.</code> bam!  What the hell?  Why did autocomplete just list everything in the project?  I&rsquo;m in the current file and clearly it only has 4 properties defined.</p>

<h1>And so it starts</h1>

<p>As it turns out, <code>this.foo</code> is the same as <code>this['foo']</code> in Javascript, effectively making every object into a dictionary.  Webstorm&rsquo;s take on this dynamic behavior is to give you every possible option in the project, effectively turning the feature into a glorified spell checker.  Webstorm has an option to disable this, so I did and now it behaved more like what I expected.  Nonetheless, one thing was crystal clear &mdash; the &ldquo;this dot&rdquo; method of working (and discovering the API) is not possible anymore in the Javascript world.</p>

<p>It was apparent now that the IDE was still in its infant stages.  It had some refactorings built in, but for the most part it was not remotely comparable to what was available in Resharper/C# or IntelliJ.</p>

<p>I have always been a big proponent of tools.  And back in the .NET days I found it incredibly frustrating when some coworkers preferred working <em>without</em> Resharper.  Yes, it was much faster.  But even so, even after waiting for Resharper during its sluggish moments, it saved you time in the end, which in my mind meant you were more efficient with your time.</p>

<p>I consider myself lucky because if it weren&rsquo;t for Webstorm being in its infant stages, I probably would not have done what I was going to do next&hellip;venture into vim.</p>

<h1>Vim</h1>

<p>I still can&rsquo;t remember the exact reason why I decided to learn Vim.  The majority of my coworkers were using Sublime Text.  Maybe I was stubborn and wanted to be different.  Maybe I was curious and wanted to see why this 30 year old editor was still so popular.  Whatever the reason, I decided to use Vim code turkey and refused to open anything else up until I convinced myself that I gave it a fair chance.</p>

<p>The rest is <a href="http://bling.github.io/blog/2013/02/10/love-affair-with-vim/">history</a>.</p>

<p>Don&rsquo;t get me wrong, I was <em>hugely</em> unproductive for the first couple weeks.  But I can confidently say that as a proficient Vim user that I am now, I am <em>far</em> more efficient than I was before.</p>

<h1>How much is your time worth?</h1>

<p><img src="http://bling.github.io//images/editor-learning-curve.png"></p>

<p>I can vouch for this popular comic because I have tried every editor on there (yes even Emacs) and I can confirm that it is true.  There really is no contestant that can match the speed and flexibility of modal editing (and why most other editors out there have a vi emulation mode).  New users are often confused why the default mode in vim&rsquo;s default mode is&hellip;normal mode and not insert mode (like every other editor).</p>

<p>As it turns out, the majority of our time as programmers are spent <em>reading and editing</em> text, not writing it.  And that is why vim&rsquo;s default mode is normal mode.  Right off the bat you have 26 different commands that you can use to operate on text.  Add a shift, and you have another 26 commands.  In normal mode, you have 52 unique operations that is a single/double keystroke away!</p>

<p>Whether it&rsquo;s vim, or emacs, or Sublime text, invest in your editor and learn what it can do for you.  Even if it&rsquo;s just a couple seconds saved here and a couple seconds saved there, do realize that as programmers we stare at a text editor the vast majority of our working hours.  And all those seconds add up.</p>

<h1>Javascipt was easy to learn</h1>

<p>Well, for me it was.  <a href="http://jshint.com">JSHint</a> caught all the newbie mistakes.  C# already had lambdas and closures, so programming in the functional style of Javascript was weird at first, but ultimately it was a subset of the features available to C#.  Basically, if I were to program in C# like I did in Javascript, it would look like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span> <span class="c1">// this is effectively window</span>
</span><span class='line'>    <span class="kt">var</span> <span class="k">namespace</span> <span class="err">= </span><span class="nn">new</span> <span class="p">{</span>
</span><span class='line'>        <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="p">{</span>
</span><span class='line'>            <span class="n">bar</span> <span class="p">=</span> <span class="k">new</span> <span class="p">{</span>
</span><span class='line'>                <span class="n">create</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                    <span class="k">return</span> <span class="k">new</span> <span class="p">{</span>
</span><span class='line'>                        <span class="n">hello</span> <span class="p">=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="p">{</span>
</span><span class='line'>                            <span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;hello world&quot;</span><span class="p">);</span>
</span><span class='line'>                        <span class="p">};</span>
</span><span class='line'>                    <span class="p">};</span>
</span><span class='line'>                <span class="p">}</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">};</span>
</span><span class='line'>    <span class="n">namespace</span><span class="p">.</span><span class="n">foo</span><span class="p">.</span><span class="n">bar</span><span class="p">.</span><span class="n">create</span><span class="p">().</span><span class="n">hello</span><span class="p">();</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Yes, there is variable hoisting, privileged vs public functions, truthy and falsey values, prototypical inheritance, etc. but like any language, this is just syntax.  You read tutorials, you try it out, you struggle against your previous habits, but then you figure it out.</p>

<h1>Javascript changed the way I think</h1>

<p>There is something incredibly liberating to just add some random property to an existing object, or change its prototype altogether.  At first I fought against this quite heavily.  We need constants!  We need well defined interfaces!  But in the end, it didn&rsquo;t matter.  We had some conventions, we followed them, and everything worked just fine.</p>

<p>Over time all the things I thought I needed, like intellisense, well defined interfaces, static analysis, I didn&rsquo;t actually need them.  Sure, they are nice to have around, but I was productive all the same without them.  And the users using our application didn&rsquo;t care whether it was written in C#/WPF or in HTML/Javascript, as long as it did was it was supposed to do.</p>

<p>Ultimately, what still mattered were architectural decisions.  We still had services, models, and views for properly separating data from business logic and presentation.  We had unit tests which tested all the functionality.  All of these concepts were very important in C# and WPF, and they are just as important here.</p>

<h1>Javascript made me a better developer</h1>

<p>Writing in Javascript made me realize just how much I relied on IDEs and static analysis.  Sometimes I would purposely abuse the IDE to do the job faster.  For example, if I wanted to refactor something, rather than using refactoring tools, sometimes the easier way is to just delete code and then go through the error list one by one.  Obviously you can&rsquo;t use this technique in Javascript.</p>

<p>Another thing I would do is purposely write bad code, wait for Resharper to come up with the suggestion, and then auto-correct it.</p>

<p>These were backwards patterns.</p>

<p>With Javascript, I found myself being proactive again.  I understood the code more.  I used snippets a lot more.  And since I was using vim, I never <em>ever</em> had to wait for the IDE anymore, which that in itself changed the way I worked.</p>

<h1>CSS is one big hack</h1>

<p>Going from XAML to CSS was extremely annoying and where I&rsquo;ve struggled the most with the transition.  If you want to vertical center something in XAML, you set <code>VerticalAlignment=Center</code> on it and you&rsquo;re done.  How do you do that in CSS?  Well, you could hack it with <code>table-cell</code>, or you could hack it with negative margins, or you could hack it with absolute positioning, or <code>line-height</code> or something else.  But point is, they are all hacks.</p>

<p>Coming from XAML, CSS is one big hack.  I want to create a grid that resizes to the window size, and is always 30% left side and 70% right side.  In XAML, I just do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Grid&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Grid.ColumnDefinitions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ColumnDefinition</span> <span class="na">Width=</span><span class="s">&quot;3*&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;ColumnDefinition</span> <span class="na">Width=</span><span class="s">&quot;7*&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Grid.ColumnDefinitions&gt;</span>
</span><span class='line'><span class="nt">&lt;/Grid&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>In CSS, here&rsquo;s one way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#left</span> <span class="p">{</span> <span class="k">float</span><span class="o">:</span> <span class="k">left</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span> <span class="m">30</span><span class="o">%</span><span class="p">;</span> <span class="k">height</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nf">#right</span> <span class="p">{</span> <span class="k">margin-left</span><span class="o">:</span> <span class="m">30</span><span class="o">%</span><span class="p">;</span> <span class="k">width</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span> <span class="k">height</span><span class="o">:</span> <span class="m">100</span><span class="o">%</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Again, more hacks.  And it&rsquo;ll only work if the parent element has a size defined.</p>

<p>Or you could do it this way:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='css'><span class='line'><span class="nf">#left</span> <span class="p">{</span> <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span> <span class="k">left</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span> <span class="k">right</span><span class="o">:</span> <span class="m">70</span><span class="o">%</span><span class="p">;</span> <span class="k">bottom</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span> <span class="k">top</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span> <span class="p">}</span>
</span><span class='line'><span class="nf">#right</span> <span class="p">{</span> <span class="k">position</span><span class="o">:</span> <span class="k">absolute</span><span class="p">;</span> <span class="k">left</span><span class="o">:</span> <span class="m">30</span><span class="o">%</span><span class="p">;</span> <span class="k">right</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span> <span class="k">bottom</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span> <span class="k">top</span><span class="o">:</span> <span class="m">0</span><span class="p">;</span> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>But it&rsquo;s not going to work if the parent element doesn&rsquo;t have a position of <code>absolute</code> or <code>relative</code>.</p>

<p>Once I let go of trying to be &ldquo;correct&rdquo; from a XAML point of view and just accepted that CSS is just hacks over top of a document model that was never designed to be used like it is today, I actually really enjoyed CSS.</p>

<p>It became a fun challenge, to be presented with a UX design and then think about what kind of hacks I&rsquo;d have to do to make it look exactly the same.  Pseudo elements became my new best friend.</p>

<p>There was no such kind of fun in the XAML world &mdash; if the UX designer could do something in Illustrator, I could do the same in Blend no problem.  There was no challenge.</p>

<p>It was all fun and games until&hellip;</p>

<h1>Enter the beast&hellip;Internet Explorer</h1>

<p>If you charged X amount of dollars for a project, it should be X raised to the number of versions older than IE10 you have to support.  If it&rsquo;s IE9, it&rsquo;s X<sup>1</sup>.  If it&rsquo;s IE8, it&rsquo;s X<sup>2</sup>.  How about IE7, X<sup>3</sup> !</p>

<p>That would cover the cost of sheer annoyance and frustration that developers and UX designers will have to face, not to mention the increased amount of time to support these older browsers.  Oh, you want to support responsive design?  Ooops, IE8 doesn&rsquo;t support media queries.  Oh, you want to have shadows and gradients, well you&rsquo;re only going to get mono colored boxes instead.  Oh, you want it to run fast?  Here, take a 20x performance hit instead.</p>

<p>If you could do it, my recommendation for supporting IE is to have the page be one big fat button that spans the entire screen that says inside with two buttons: install Chrome, or install Firefox.  It worked for Flash and Silverlight!</p>

<h1>Back to an IDE&hellip;maybe?</h1>

<p>I never did venture back.  With my stubbornness to stick with Vim, I ended up installing plugins and optimizing my workflow around it.  I even created my own <a href="http://bling.github.io/dotvim">distribution</a>.  Chrome became my pseudo-IDE and I used its debugging tools heavily.  I used <a href="http://livereload.com">LiveReload</a> from time to time.  And coupled with a zsh terminal I had an extremely productive development environment.  In the end I didn&rsquo;t have a reason to use Webstorm anymore because at this point it <em>slowed me down</em>.</p>

<h1>Programming became fun again</h1>

<p>Perhaps the biggest change I experienced, once I got over the initial pains, was that I really enjoyed programming again.  When I was writing in Javascript, I felt like a hacker.  When I was programming in C#, I felt like a programmer.  Maybe this is temporary and I&rsquo;ll feel the same way when my experience level in Javascript matches with C#.  But for now, I&rsquo;m enjoying that feeling of rediscovering my inner child of building something from nothing.</p>

<h1>Finale</h1>

<p>Wow.  I didn&rsquo;t expect this blog post to be this long.  But if you got this far I hope you enjoyed the read, because I had fun writing about my experiences.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Jumping on the hacker blog bandwagon]]></title>
    <link href="http://bling.github.io//blog/2013/04/10/jumping-on-the-hacker-blog-bandwagon/"/>
    <updated>2013-04-10T23:31:00+00:00</updated>
    <id>http://bling.github.io//blog/2013/04/10/jumping-on-the-hacker-blog-bandwagon</id>
    <content type="html"><![CDATA[<h1>Following the tutorial&hellip;</h1>

<p>Not much to say here&hellip;I went to <a href="http://octopress.org">Octopress&#8217;</a> website, followed the instructions, and now I have a working blog.  Pretty cool.</p>

<p>It definitely feels liberating to blog using plain &lsquo;ol markdown text editing.</p>

<p>So I guess the next step I&rsquo;ll do is import my existing blog content, and then add some personal styling to this thing :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Writing Macros with Vim]]></title>
    <link href="http://bling.github.io//blog/2013/02/11/writing-macros-with-vim/"/>
    <updated>2013-02-11T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2013/02/11/writing-macros-with-vim</id>
    <content type="html"><![CDATA[<p>First, let’s start with a Javascript function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">hello</span><span class="p">,</span> <span class="nx">world</span><span class="p">,</span>
</span><span class='line'>             <span class="nx">how</span><span class="p">,</span> <span class="nx">are</span><span class="p">,</span>
</span><span class='line'>             <span class="nx">you</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now let’s convert that to the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='javascript'><span class='line'><span class="kd">function</span> <span class="nx">foo</span><span class="p">(</span><span class="nx">parameters</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">hello</span> <span class="o">=</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">hello</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">world</span> <span class="o">=</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">world</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">how</span> <span class="o">=</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">how</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">are</span> <span class="o">=</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">are</span><span class="p">;</span>
</span><span class='line'>    <span class="kd">var</span> <span class="nx">you</span> <span class="o">=</span> <span class="nx">parameters</span><span class="p">.</span><span class="nx">you</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Here are the macros I used to do this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='vim'><span class='line'><span class="k">let</span> @<span class="k">r</span><span class="p">=</span><span class="s1">&#39;di(iparameters^[/\{^M2o^[kpg`[v`]Jgv:s/\s//g^M0:try|exe &quot;norm! @q&quot;|endtry^MA;^[V:s/,/;\r/g^Mv``=&#39;</span>
</span><span class='line'><span class="k">let</span> @<span class="k">q</span><span class="p">=</span><span class="s1">&#39;ywivar ^[pa = parameters.^[f,^[l@q&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<!--more-->


<p>Note that if you copy paste the above into your vimrc it will not work. The <code>^[</code> and <code>^M</code> found are actually single characters, not two. To input this properly you will need to chord it in input mode with <code>&lt;Ctrl-V&gt;</code>. So for <code>&lt;Esc&gt;</code> you would chord <code>&lt;Ctrl+V&gt;&lt;Ctrl+[&gt;</code>.</p>

<p>So, when I&rsquo;m inside the parameters of the function, I can hit <code>@r</code> and it will perform the refactoring. Now let’s break it down step by step.</p>

<h1>@q The first macro</h1>

<p>This is a recursive macro which takes something like <code>a,b,c</code> and turns it into <code>var a = p.a,var b = p.b,var c = p.c</code>. Let’s see how that’s done.</p>

<ol>
<li><code>yw</code> <code>i</code> <code>var</code> <code>&lt;Esc&gt;</code> <code>p</code> Yanks the word and enter insert mode, type var, exit insert mode and paste the just yanked word.</li>
<li><code>a = parameters.</code> Append and fill in parameters.</li>
<li><code>&lt;Esc&gt;</code> <code>f</code>, <code>l</code> Exit insert mode, find the next <code>,</code></li>
<li><code>l</code> <code>@q</code> Adjust the cursor position and recursively call itself.</li>
</ol>


<p>Recursive macros terminate when the first error occurs. In this macro, that error is when there are no more commas left.</p>

<h1>@r The second macro</h1>

<p>The is the macro that should be invoked, and references the <code>@q</code> macro.</p>

<ol>
<li><code>di(</code> Deletes everything inside the brackets.</li>
<li><code>i</code> parameters Enter insert mode and type parameters.</li>
<li><code>&lt;Esc&gt;</code> <code>/{</code> <code>&lt;CR&gt;</code> Leaves insert mode and finds the next brace.</li>
<li><code>2o</code> <code>&lt;Esc&gt;</code> <code>k</code> <code>p</code> Creates two empty lines and pastes what we deleted into the first line.</li>
<li><code>g`[v`]</code> <code>J</code> Visually select what we just pasted and join them all into a single line.</li>
<li><code>gv</code> <code>:s/\s//g</code> <code>&lt;CR&gt;</code> Reselect the visually and delete all whitespace.</li>
<li><code>0</code> Move to the beginning of the line.</li>
<li><code>:try|exe "norm! @q"|endtry</code> <code>&lt;CR&gt;</code> Macros will terminate on the first error, even if referencing another macro. Wrapping the other macro with try|endtry swallows the error and lets the current macro continue.</li>
<li><code>A;</code> <code>&lt;Esc&gt;</code> Append ; to the end of the line.</li>
<li><code>V</code> <code>:s/,/;\r/g</code> <code>&lt;CR&gt;</code> Visually select the line, replace with carriage returns.</li>
<li><code>v=``</code>  Visually select from the current cursor position back to where it was originally was, and format.</li>
</ol>


<p>Now is this the best way to do it? Probably not. I would not be surprised if someone was able to do it with less keystrokes or a single macro.  But hey, it was fun learning experience, and ultimately I turned all of that into two keystrokes that can be reused many times.</p>

<p>I posted this on <a href="http://vimgolf.com/challenges/511991607729fb0002000003">vimgolf</a> so let’s see how other people solved the same refactoring!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Love Affair with Vim]]></title>
    <link href="http://bling.github.io//blog/2013/02/10/love-affair-with-vim/"/>
    <updated>2013-02-10T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2013/02/10/love-affair-with-vim</id>
    <content type="html"><![CDATA[<p>It wasn&rsquo;t too long ago when I was a full-time C# developer and my environment was Visual Studio eight hours a day.  Then, I became a web developer over night cold turkey writing Javascript and CSS.  It&rsquo;s one of the benefits of working for a consulting company.</p>

<p>You might think what does that have to do with the title of this post?  Well, originally my plan was to write a blog post contrasting on the differences between Javascript and C#, as well as the development environments and deployment platforms.  But really, what I really wanted to write about was Vim.</p>

<p>Moving from Visual Studio to Vim was a progression through different editors and environments.  The first thing I used to write Javascript was Webstorm.  Over time I realized that you didn&rsquo;t really need an IDE to write Javascript/CSS.  Then, I used Sublime Text for a little bit.  But ultimately, I settled on Vim, and stayed there.</p>

<p>My stubbornness turned out to be beneficial when I was learning Vim because the first month was absolutely painful.  I remapped all of my arrows keys to do nothing to force myself to use hjkl.  Eventually I got the hang of it, and now I definitely have the muscle memory that makes me much more productive when editing (and reading) text.</p>

<!--more-->


<p>By default Vim is just a text editor.  But I work on a project, so like most lazy people I searched for prepackaged plugins and came across two popular distributions: <a href="https://github.com/spf13/spf13-vim">spf13</a> and <a href="https://github.com/carlhuda/janus">janus</a>.  When I installed them, it was like someone took over Vim and made it change into a completely different beast.  I didn&rsquo;t know how to use it anymore.</p>

<p>I took a step back.  I forgot where I got this advice, but I think anyone using Vim needs to do this: <em>start your own vimrc from scratch</em>.</p>

<p>I took a look at all the settings that spf13 and janus changed.  I copied them to my vimrc <em>one by one</em>, and also <code>:help</code>ing each setting so that I knew exactly what it changed.  I must say, Vim&rsquo;s documentation is some of the best and most comprehensive of any tool I&rsquo;ve worked with.  It was incredibly helpful in my progression.</p>

<p>Then, I did the same thing for plugins.  And the nice thing was that most plugins followed the Vim pattern of having good documentation.  After installing <code>fooplugin</code>, I just <code>:help fooplugin</code> and I got all the information I needed to know about the plugin.</p>

<p>I became obsessed with optimizing my vimrc, and trying out different plugins on a daily basis.  And because I was very adamant with trying one plugin at a time, I got to know them very well.  I knew about how to turn certain settings on and off, how to configure their bindings, and more importantly, how it interacted with all of the other plugins I have already installed.  Over time my vimrc became a full blown distribution in its own right, highly customized to my personal work habits.</p>

<p>However, even though I recommend that anyone interested in taking their Vim skills to the next level should do this discovery that I have done, there are certainly classes of plugins that I deem to be <em>must-have</em> for any Vim user and I wanted to highlight them here.</p>

<h1>Plugin Management</h1>

<p>First things first you will need one plugin to rule them all!  <a href="https://github.com/tpope/vim-pathogen">Pathogen</a> changed the way people install plugins by utilizing git submodules.  This has the pros and cons of git submodules, i.e. they track a specific version of the external git repository, so if external plugins are updated frequently you have to manually update all your submodules.</p>

<p>However, more often than not, you just want the latest version.  <a href="https://github.com/gmarik/vundle">Vundle</a> takes the management one step further and will automatically grab source code from Github for you (as well as automatically updating everything to the latest version).</p>

<p>The last one and least known is <a href="https://github.com/Shougo/neobundle.vim">NeoBundle</a>, which is like Vundle on steroids.  It adds a whole ton of new features like allowing you to specify installation steps for compiling something.</p>

<h1>Fuzzy File Searching</h1>

<p>This was the major game changer for me and changed the way I worked.  Naturally, proper Vim technique forces your hands to be on the home row, which makes reaching for the mouse (or even the arrow keys) to be inefficient.  Therefore, the fastest way to open a file is usually to type its name.</p>

<p><a href="https://github.com/wincent/Command-T">CommandT</a> (written in Ruby) is noticeably much faster than <a href="https://github.com/kien/ctrlp.vim">CtrlP</a> (pure VimScript), but CtrlP has a lot more features.  There&rsquo;s also <a href="http://www.vim.org/scripts/script.php?script_id=1984">FuzzyFinder</a>, which I have not tried.</p>

<h1>Autocomplete and Snippets</h1>

<p>There are various contenders here.  Generally, you&rsquo;ll find that people fall into two camps.</p>

<ol>
<li><a href="https://github.com/garbas/vim-snipmate">Snipmate</a>/<a href="https://github.com/SirVer/ultisnips">UltiSnips</a> + <a href="https://github.com/ervandew/supertab">SuperTab</a> + <a href="http://www.vim.org/scripts/script.php?script_id=1879">AutoComplPop</a></li>
<li><a href="https://github.com/Shougo/neocomplcache">neocomplcache</a> + <a href="https://github.com/Shougo/neosnippet">neosnippet</a></li>
</ol>


<p>Snipmate is an older implementation of snippets which is getting replaced with UltiSnips.  Supertab gives you an easy way to trigger omnicompletion with (you guessed it) tab, and AutoComplPop is for automatically showing the popup as you type.</p>

<p>Neocomplcache is a very powerful completion plugin.  It runs a little slower than SuperTab because it does a lot more, but I find the performance acceptable so that&rsquo;s what I&rsquo;m using.  And I choose neosnippet over the others simply because it&rsquo;s by the same author and thus has better integration (e.g. available snippets will appear in the list).</p>

<p>And of course, a good collection of snippets like <a href="https://github.com/honza/vim-snippets">honza</a>&rsquo;s collection.</p>

<p><em>edit</em>: Since I last posted this another autocomplete plugin has taken the Vim world by storm.  It is none other than <a href="https://github.com/Valloric/YouCompleteMe">YouCompleteMe</a>.  This is a fantastic plugin which shows a lot of promise.  It does not have as many features as neocomplcache yet, but it is improving every day and has a large community gathering around it.  Things can only get better!</p>

<p><em>edit 2</em>: <a href="https://github.com/Shougo/neocomplete.vim">neocomplete</a> is the next generation version of neocomplcache, and despite being in its infancy is showing great progress and has most (if not all) of the features of neocomplcache.  It requires you to recompile vim with lua support, but has the added benefit that it is way faster than before, and unlike YouCompleteMe (which officially does not support Windows), it works very well on Windows as well.</p>

<h1>And that&rsquo;s it!</h1>

<p>What?!  No file browser?  No buffer manager?  Yes, I have all of those installed as well.  In fact, I have over 50 plugins installed in total.  But in my opinion, they are not <em>killer</em> features.  I can live without them.  But if I didn&rsquo;t have fuzzy searching or completion/snippets, I would feel a little too naked.</p>

<p>Out of the box Vim has some interesting defaults, mainly for backwards compatibility with Vi, but I think it&rsquo;s safe to say that anyone who uses Vim seriously will have a custom vimrc.  If you&rsquo;re just starting out and don&rsquo;t know what to change, <a href="https://github.com/tpope/vim-sensible">sensible</a> is a good set of defaults.</p>

<p>Vim has changed my work habits dramatically.  I think and dream Vim.  I install Vim plugins in my browsers.  And every day, she still teaches me new tricks.  It&rsquo;s quite exhilarating!</p>

<p>If you&rsquo;ve read until this point you might be interested in the full set of plugins that I&rsquo;m using.  If so, head over to my <a href="http://bling.github.com/dotvim/">vim distribution project</a>!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SnoopShell: Evolution]]></title>
    <link href="http://bling.github.io//blog/2012/07/29/snoopshell-evolution/"/>
    <updated>2012-07-29T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2012/07/29/snoopshell-evolution</id>
    <content type="html"><![CDATA[<p>It’s been a while since I last announced <a href="http://blingcode.blogspot.com/2012/07/snoopshell-marriage-of-snoop-wpf-and.html">SnoopShell</a>, where I took some PowerShell and injected that into Snoop.  Well, I didn’t stop there!  I decided to continue working on it and adding more useful features.</p>

<p>Well, a bunch of things have changed.  For one, it’s no longer targeted at .NET 4 and PS v3 anymore (and you’ll soon know why).  Second, there’s a bunch of new features!</p>

<h1>Automatic Profile Loading</h1>

<p>Upon startup, the shell will look for a couple well known locations and automatically dot-source them to load them into the current session.  This works the same as the standard $profile.  The filename needs to be <code>SnoopProfile.ps1</code>, and the search paths are <code>%USERPROFILE%,</code> the <code>WindowsPowerShell</code>, and the <code>Scripts</code> folder deployed with Snoop.exe.</p>

<p>This is incredibly useful since you can write your own custom functions and scripts and have them available to you all the time.  As an added bonus, because of the dynamic nature of PowerShell, you can make modifications to the <code>SnoopProfile.ps1,</code> save, and then invoke a <code>. $profile</code> to reload the profile and update the session with your changes (all without restarting the application).</p>

<p>That’s awesome sauce indeed ;&ndash;)</p>

<h1>PowerShell Provider</h1>

<p>This was more of a for-fun thing at first just to see if I could do it.  Writing a PS provider is not fun at all, since it’s not very well documented and I actually needed some help from ILSpy to figure out how things really worked.  Nonetheless, it’s got some basic functionality that is helpful to navigate around.</p>

<p><a href="http://lh6.ggpht.com/-hpRCncySB3g/UBXOagD2xII/AAAAAAAAALs/qBCKmxV-B0M/s1600-h/image%25255B10%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh6.ggpht.com/-QMqNxt2DmZ8/UBXOa1SVqwI/AAAAAAAAAL0/ULMweSOFso0/image_thumb%25255B8%25255D.png?imgmax=800" width="654" height="399"></a></p>

<p>Yep, the selected grid actually has a path, like how you would navigate the file system.  Let’s see what happens with a <code>cd</code>.</p>

<p><a href="http://lh4.ggpht.com/-R3wQmpiA7dw/UBXObb7FNsI/AAAAAAAAAL8/z3mgZwnFLok/s1600-h/image%25255B15%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/-mdRas9rg4gs/UBXOb4W6z7I/AAAAAAAAAME/pNH-1jzMbGA/image_thumb%25255B11%25255D.png?imgmax=800" width="654" height="399"></a></p>

<p>Cool, you can <code>cd</code> into the child “directory”, and it’ll automatically select the item in the tree view as well.  What if you’re lazy and don’t want to type?</p>

<p><a href="http://lh3.ggpht.com/-QgZ0iBA1AKw/UBXOcPU9uDI/AAAAAAAAAMM/iy9qHsS0zHA/s1600-h/image%25255B20%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh5.ggpht.com/-YV-f5-aPnP0/UBXOcRFGPkI/AAAAAAAAAMU/oo85Qg9fohU/image_thumb%25255B14%25255D.png?imgmax=800" width="654" height="399"></a></p>

<p>Wildcards are supported.  And because the visual tree doesn’t exactly require unique names, I needed to trick it by adding a number after each duplicate item.  So the above matches the third Rectangle child of the Grid.</p>

<h1>Code Injection</h1>

<p>One of the cool things about Javascript is that it’s so darn easy to test.  You make a change, save, reload, and you’ll immediately see if something worked or not.  This feedback loop is so fast it changes how you work and formulate ideas.</p>

<p>In the static world, we don’t really have this luxury, and especially not when you’re working on a large project, which at work, takes just under a minute for a full rebuild.  And this is on a monster machine.  Because of this, we had to employ tricks and workarounds to speed things up, like messing with build configurations and build output paths to minimize duplicate work.  Despite that, it’s still a pain to wait for the application to start and all that jazz.</p>

<p>What if we could do the super fast feedback loop development, in a static world?  Well, now you can!</p>

<p>It starts with a simple function:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='powershell'><span class='line'><span class="k">function</span> <span class="n">replace-command</span><span class="p">(</span><span class="no">[string]</span><span class="nv">$msg</span> <span class="p">=</span> <span class="s1">&#39;hello world&#39;</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>    <span class="nv">$action</span> <span class="p">=</span> <span class="p">{</span> <span class="no">[system.windows.messagebox]</span><span class="err">::</span><span class="n">show</span><span class="p">(</span><span class="nv">$msg</span><span class="p">)</span> <span class="p">}.</span><span class="n">GetNewClosure</span><span class="p">()</span>
</span><span class='line'>    <span class="nv">$cmd</span> <span class="p">=</span> <span class="nb">new-object</span> <span class="n">galasoft</span><span class="p">.</span><span class="n">mvvmlight</span><span class="p">.</span><span class="n">command</span><span class="p">.</span><span class="n">relaycommand</span><span class="p">(</span><span class="no">[system.action]</span><span class="nv">$action</span><span class="p">)</span>
</span><span class='line'>    <span class="nv">$selected</span><span class="p">.</span><span class="n">target</span><span class="p">.</span><span class="n">command</span> <span class="p">=</span> <span class="nv">$cmd</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>The above function will replace anything that has a <code>Command</code> property on the target, like a Button or MenuItem, with a MessageBox showing a message.  For the curious, <code>GetNewClosure</code> is needed so that $msg is available within the inner script block.  Unlike C#, closures are not automatic.</p>

<p>Since PowerShell is dynamic, if you need to make a change, simply save the script, reload it with a dot-source, which will overwrite the existing function, and then set the target’s <code>Command</code> property again.  Awesome!</p>

<p>The only annoyance is converting PowerShell code back into C# code once you’re done.</p>

<h1>Evolution</h1>

<p>If you made it this far you didn’t forget about my comment about untargeting .NET 4 and PS v3.  Well, changes have been <a href="https://github.com/cplotts/snoopwpf/commit/16030418b14778029d10e198b288b4efa9bad65c">merged</a> to the main branch!  Soon the masses will be able to experiment with supercharging their applications with PowerShell!</p>

<p>I’ll likely continue working on my <a href="https://github.com/bling/snoopwpf">fork</a> as there’s still more goodies I’d like to add.  Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SnoopShell: The marriage of Snoop WPF and PowerShell]]></title>
    <link href="http://bling.github.io//blog/2012/07/01/snoopshell-marriage-of-snoop-wpf-and/"/>
    <updated>2012-07-01T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2012/07/01/snoopshell-marriage-of-snoop-wpf-and</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I was given the opportunity to review a couple chapters of the excellent book <a href="http://shop.oreilly.com/product/0636920024491.do">PowerShell for Developers</a>, written by my colleague <a href="http://dougfinke.com/blog/">Doug Finke</a>.&nbsp; One of the concepts in the book was embedding a PowerShell console into your application.&nbsp; This idea is ingenious and we added this feature to our client’s software, and so far it has increased our productivity and opened the doors to many possibilities.</p> <p>So what’s so cool about embedding a shell into your application?&nbsp; Well, for starters, one of the immediate advantages is that it gives you the opportunity to test your application at run time.&nbsp; If you are implementing the MVVM pattern then basically anything you can see in the UI is bound to some property in your view model.&nbsp; What if you could expose an instance of your view model to the PowerShell console?&nbsp; Yes, you would be able to interact with it directly, change values, and property change notification will kick in and update the UI.</p> <p>The possibilities start to open up from there.&nbsp; You can start scripting out common tasks – write once, run many times.&nbsp; Or you can write a full fledge test suite as a script, give it to a QA tester, and have them run through it as a special kind of integration testing, one that happens with live, real data.&nbsp; Or how about being able to modify code, <em>at runtime</em>, to try out an implementation without need to recompile or restart the application?&nbsp; Sounds pretty awesome to me!</p> <p>With this, I started thinking why don’t I try and add this to Snoop?&nbsp; It’s a staple tool for any WPF developer, and adding scripting capabilities to Snoop will make it even more useful.</p> <p>So, I sat down for a weekend and took a shot at it.&nbsp; And with that, SnoopShell was born!</p> <p>My fork of Snoop can be found here: <a href="https://github.com/bling/snoopwpf">https://github.com/bling/snoopwpf</a></p> <p>It’s still in super-duper alpha, so features/ideas are still getting formulated, but here’s a glimpse of what it can do now.</p> <p>The $root variable points to the root of the tree.&nbsp; As you can see, Snoop represents this as a ApplicationTreeItem, which has a bunch of properties, the important ones being IsSelected and IsExpanded.</p> <p><a href="http://lh6.ggpht.com/-G1xK0p7454U/T_CIl9YKnlI/AAAAAAAAAJg/z4SEb20go04/s1600-h/image%25255B29%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh4.ggpht.com/-NgT7mhbVSBY/T_CImZIe6NI/AAAAAAAAAJk/fkNeG2UGFH0/image_thumb%25255B17%25255D.png?imgmax=800" width="640" height="381"></a></p> <p>Let’s try interacting with the object by setting the IsExpanded to true.</p> <p><a href="http://lh4.ggpht.com/-uKcevwtnUO4/T_CImnGxyWI/AAAAAAAAAJo/5v1AZnM_SHw/s1600-h/image%25255B28%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh6.ggpht.com/-STnkYWGudRU/T_CInKa1nyI/AAAAAAAAAJs/qk92Zjm3BWU/image_thumb%25255B16%25255D.png?imgmax=800" width="640" height="383"></a></p> <p>So far so good.&nbsp; Now let’s find my username using Ctrl+Shift.&nbsp; The $selected variable is automatically synchronized with the selected item in the tree.</p> <p><a href="http://lh6.ggpht.com/-uUeaZMYbuDc/T_CInhNnmAI/AAAAAAAAAJw/Q--l4hrlEis/s1600-h/image%25255B27%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh6.ggpht.com/-hnDhWbHtn8w/T_CIoIzVSCI/AAAAAAAAAJ0/BiqbUMnfigM/image_thumb%25255B15%25255D.png?imgmax=800" width="640" height="379"></a></p>  <p>Let’s do some black magic and change my name.</p> <p><a href="http://lh6.ggpht.com/-hC4FVTnZDxc/T_CIoTrYfiI/AAAAAAAAAJ4/aQQGFbrxCzM/s1600-h/image%25255B26%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/-RqOCvfsU6cU/T_CIo6zvtcI/AAAAAAAAAJ8/e8XMWPj60BM/image_thumb%25255B14%25255D.png?imgmax=800" width="640" height="382"></a></p> <p>Finally, let’s find every ListBox in the application.&nbsp; <em>Find-Item</em> is used to recursively find everything in the visual tree which is a ListBox.</p> <p><a href="http://lh6.ggpht.com/-nlycDcpP-bk/T_CIpXMcWxI/AAAAAAAAAKA/gIGruuduR9g/s1600-h/image%25255B25%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/-oAB7IIj6LLY/T_CIqDPWS6I/AAAAAAAAAKE/aX1DNZnIOVo/image_thumb%25255B13%25255D.png?imgmax=800" width="640" height="367"></a></p> <p>And from here, it’s as simple as grabbing the <em>DataContext</em> of any control to get access to the view model.</p> <p>By the way, this is targeting PowerShell V3, so you will need to have the RC installed.</p> <p>Try it out and let me know what you think!</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[N2N: .NET 2 Node: Part 1]]></title>
    <link href="http://bling.github.io//blog/2012/06/08/n2n-net-2-node-part-1/"/>
    <updated>2012-06-08T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2012/06/08/n2n-net-2-node-part-1</id>
    <content type="html"><![CDATA[<div class='post'>
Let’s get some actual coding done.&nbsp; If you want some basic prologue, check out the first part of my series <a href="http://blingcode.blogspot.com/2012/06/n2n-net-2-node.html">here</a>.<br>Anywho, let’s get to the meat of what we’re trying to accomplish.&nbsp; I will start with the typical C# class you would write, do the same in Javascript, and then again in C#, but using the style of Javascript using closures.<br>Here’s the use case:<br> <ul> <li>Handle a web request  <li>Check the MongoDB database to see if an entry exists and return it if available.  <li>Otherwise, query an external API for data, save it into MongoDB, and then return that. </li></ul> <p>This is a pretty standard straight-forward approach in web applications.&nbsp; If you’re not using MongoDB, you’ll be using memcache, Redis, or some other equivalent data store.<br><br>First, let’s implement an pseudo-code ASP.NET MVC controller which does the above:</p> <div id="codeSnippetWrapper"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #0000ff">public</span> <span style="color: #0000ff">class</span> QuoteController : Controller<br>{<br>    MongoCollection collection;<br>    IExternalApi external;<br><br>    <span style="color: #0000ff">public</span> ActionResult Get(<span style="color: #0000ff">string</span> symbol)<br>    {<br>        var quote = <span style="color: #0000ff">this</span>.collection.FindOne(<span style="color: #0000ff">new</span> { symbol });<br>        <span style="color: #0000ff">if</span> (quote == <span style="color: #0000ff">null</span>)<br>        {<br>            var json = <span style="color: #0000ff">this</span>.external.GetQuote(symbol);<br>            <span style="color: #0000ff">this</span>.collection.Save(json);<br>        }<br><br>        ViewBag.Quote = quote;<br>        <span style="color: #0000ff">return</span> View();<br>    }<br>}<br></pre><br></div>
<p>Error handling and initialization are omitted for brevity, but it’s an otherwise straight-forward synchronous send JSON to the browser response.&nbsp; So how does something like this look in Node?&nbsp; First, let’s throw in a web framework.&nbsp; I picked Express because it seems to have the most traction right now.&nbsp; Again, for brevity I will omit a bunch of boot strapping code, and skip to the core logic.<br><br>
<div id="codeSnippetWrapper">
<div id="codeSnippetWrapper"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet">var QuoteService = function() {<br>    var mongoCollection; <span style="color: #008000">// new MongoCollection</span><br>    var external; <span style="color: #008000">// new External API</span><br><br>    <span style="color: #008000">// req/res are the request/response passed in by Node/Express</span><br>    <span style="color: #0000ff">this</span>.get = function(symbol, req, res) {<br>        mongoCollection.findOne({ symbol: symbol }, function(error, item) {<br>            <span style="color: #0000ff">if</span> (item === <span style="color: #0000ff">null</span>) {<br>                external.getQuote(symbol, function(error, result) {<br>                    mongoCollection.save(result);<br>                    req.write(result);<br>                    req.end();<br>                });<br>            } <span style="color: #0000ff">else</span> {<br>                req.write(item);<br>                req.end();<br>            }<br>        });<br>    };<br>};<br>module.exports = QuoteService;<br><br></pre><br></div>OK, looks a lot different!&nbsp; The first thing you’ll notice is that the class is actually a function.&nbsp; Javascript doesn’t have real classes like C# or Java, but you can simulate things like private and public members by using closures.&nbsp; In the code snippet above, <em>mongoCollection </em>and <em>external</em> are private variables.&nbsp; However, the <em>get</em> function is public because it’s prefixed with <em>this</em>.&nbsp; Finally, because Javascript has closures you can still access the private variables and retain their state.<br><br>Last but not least, as far as programming in Node is concerned, every function returns void.&nbsp; Node is extremely fast – but it is still single threaded, which means you need to take extreme care not to block on any operation.&nbsp; In summary, you need to get used to working with callbacks.&nbsp; In the example above, the callback for the Mongo query invokes another function, which again uses a callback for the result.&nbsp; Typically any errors are also passed through to the callback, so in place of try/catch blocks, you will be checking to see if the error parameter has a value.<br><br>To conclude, let’s write a C# version that mimics the Javascript style.<br><br>
<div id="codeSnippetWrapper">
<div id="codeSnippetWrapper"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"><span style="color: #0000ff">public</span> <span style="color: #0000ff">static</span> <span style="color: #0000ff">void</span> Main(<span style="color: #0000ff">string</span>[] args)<br>{<br>    var QuoteService = <span style="color: #0000ff">new</span> Func&lt;dynamic&gt;(() =&gt; {<br>        var mongoCollection = <span style="color: #0000ff">new</span> MongoCollection();<br>        var external = <span style="color: #0000ff">new</span> IExternalApi();<br>        <span style="color: #0000ff">return</span> <span style="color: #0000ff">new</span><br>        {<br>            get = <span style="color: #0000ff">new</span> Action&lt;<span style="color: #0000ff">string</span>, Request, Response&gt;((symbol, req, res) =&gt;<br>            {<br>                mongoCollection.FindOne(<span style="color: #0000ff">new</span>{symbol}, (error, item) =&gt; {<br>                    <span style="color: #0000ff">if</span> (item == <span style="color: #0000ff">null</span>)<br>                    {<br>                        external.GetSymbol(symbol, (e, result) =&gt; {<br>                            mongoCollection.Save(result);<br>                            req.Write(result);<br>                            req.End();<br>                        });<br>                    }<br>                    <span style="color: #0000ff">else</span><br>                    {<br>                        req.Write(item);<br>                        req.End();<br>                    }<br>                });<br>            })<br>        }});<br>}</pre><br></div>100% valid C# syntax.<br><br>Would you ever want to do that in C#?&nbsp; Probably not.&nbsp; But if you need some mental conversion from C# to/from Javascript, I think it’s a good place to start.<br><br>In summary, Javascript is kind of like programming in C# using only anonymous classes, Action/Func, dynamic, declared all in the main method.</div></div></p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[N2N: .NET 2 Node]]></title>
    <link href="http://bling.github.io//blog/2012/06/03/n2n-net-2-node/"/>
    <updated>2012-06-03T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2012/06/03/n2n-net-2-node</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Well, it’s been quite a while since I’ve blogged about…well…anything, and I figured it’s about time I get off my lazy butt and do something with my spare time on weekends.&nbsp; What better option than to see what all the hype is about Node?&nbsp; I had to do it sooner or later.</p> <p>As any newbie would do, they go to Google and type “nodejs tutorial”.&nbsp; <a href="http://www.nodebeginner.org/">The Node Beginner Book</a> came up first, so I went with that.&nbsp; It was an excellent tutorial.&nbsp; Prior to this I also skimmed through the book <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, The Good Parts</a>, so I had a basic understanding of the language syntax.</p> <p>One of the first oddities I noticed, was that NodeJS seems to have a convention of comma-first.&nbsp; You notice this immediately because most examples start with require(‘module’), and if they require more than one module, the second line is prefixed with a comma (as opposed to the more traditional comma at the end of the line).&nbsp; I apparently missed the <a href="https://gist.github.com/357981">discussion</a> by 2 years!&nbsp; It was still interesting nonetheless.</p> <p>As someone with a strong .NET background, I definitely experienced all the usual ‘gotchas’:</p> <ul> <li>== vs ===  <li>falsey values  <li>variable hoisting</li></ul> <p>Once you understand all of these things, Javascript isn’t so bad.&nbsp; Oh, and of course understanding closures will get you <em>a long</em> way in being effective with Javascript, because that’s what you need to use to do proper scoping.&nbsp; If C# didn’t have lambdas and closures it would have been a much longer journey to “get it”.</p> <p>Not too longer after, I deployed my first Heroku app running on NodeJS.</p> <p>Anyways, enough with the prologue…I won’t bore you with anymore beginner/tutorial stuff.</p> <p>Let’s get on with what I plan on doing over a multi-part blog series.&nbsp; When I build something on my own time, I can’t build something just for the hell of it to learn something….that’s not enough.&nbsp; If I build something it has to be useful – something that I (or someone else) will find valuable.</p> <p>I won’t reveal what it is yet, but it’s going to involve Node/MongoDB on the backend, with Backbone on the front-end.&nbsp; Should be fun :-)</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[My Thoughts on MEF]]></title>
    <link href="http://bling.github.io//blog/2011/10/31/my-thoughts-on-mef/"/>
    <updated>2011-10-31T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2011/10/31/my-thoughts-on-mef</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Ever since MEF was conceived, despite the authors saying that it is <strong>not<em> </em></strong>an IoC container, it has since evolved to become one of the more popular IoC containers.&nbsp; I’ve always avoided it because I disagree with using attributes, and I’ve had no reason to use it over Autofac or Windsor.</p> <p>Recently, I found a reason to use it – Metro-style applications only support MEF so far.&nbsp; My Twitter client ping.pong uses Autofac as the IoC container.&nbsp; It uses some very basic functionality like factories and hooks.&nbsp; To my surprise, MEF has no support for either of these.</p> <p>Coming across these limitations solidifies my opinion that MEF is a plugin container, not an IoC container.</p> <p>First let’s take a look at automated factories. What I mean is that by registering Foo, like so:</p> <div id="codeSnippetWrapper"> <div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px">container.RegisterType&lt;Foo&gt;();</pre><!--CRLF--></div></div>
<p>the container will automatically provide us a Func&lt;Foo&gt; without explicitly having to register it. This can be useful when you want to create an instance of Foo some time in the future rather than at constructor time.&nbsp; You can do this with MEF via an ExportFactory&lt;T&gt;, but it’s limited because you cannot override dependencies at resolve time.</p>
<p>For example, let’s say Foo has a constructor of Foo(Bar1, Bar2, Bar3). With MEF, you have no control at resolution time what the Bars are. A container that has support for automated factories (like Autofac and Castle Windsor), will let you resolve a Func&lt;Bar1, Foo&gt;, which lets you override Bar1 at resolve time. Similarly, you can resolve a Func&lt;Bar1, Bar2, Bar3, Foo&gt; and override all dependencies. Any dependencies not overridden fall back to their configuration in the bootstrapper. This is a <em>very</em> useful feature, and coupled with the scoping features for automatic disposal it opens up many doors for elegant solutions for what otherwise are complicated problems.</p>
<p>On to the second point; MEF has limited extension points. This one sounds odd since MEF is all about designing decoupled plugins so surely it should have extension points! The problem here is that MEF is designed as an explicit API (attributes are required) rather than an implicit API. In Autofac, you can scan an assembly and register every type. In MEF, every class needs to have an [Export] on it.&nbsp; It also baffles my mind why [ImportingConstructor] is required even when there’s only one constructor. All this explicitness means you lose a bunch of “free” extension points that typical IoC containers have, like this:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px">b.RegisterAssemblyTypes(GetType().Assembly)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px">  .OnActivated(x =&gt; x.Context.Resolve&lt;IEventAggregator&gt;().Subscribe(x.Instance));</pre><!--CRLF--></div></div>
<p>What the code above is saying that every time <em>any</em> component is activated, it will subscribe to the event aggregator. If the component doesn’t IHandle&lt;&gt; any messages, it’s a no-op and continues on. If the instance does IHandle&lt;&gt; messages, this will ensure it’s hooked up.</p>
<p>The closest thing I could find in MEF was IPartImportsSatisfiedNotification (yes, an interface, more explicitness!).&nbsp; It contains a single method OnImportsSatisfied() which gets called when the part is created.&nbsp; Needless to say, the one line of code from Autofac would translate into a method for every implementation of IHandle&lt;&gt;, and since OnImportsSatisfied() contains no contextual information, every component will need IEventAggregator injected just to be able to call Subscribe.</p>
<p>To fully complete this example, Autofac has the following methods when registering a component: <em>OnRegistered, OnPreparing, OnActivating, OnActivated, </em>and<em> OnRelease</em>.&nbsp; Each of these methods gives you complete contextual information at the time it is called like access to the current scope of the container, the instance (if applicable), which component which requested the dependency, etc.&nbsp; This makes it almost too easy to extend the container.</p>
<p>For MEF, the only real extension point is an ExportProvider.&nbsp; It is pretty low level (all it does is parse attributes for you) so to write anything similar for MEF requires a lot more code.&nbsp; To further illustrate this point, compare the interception modules from AutofacContrib and MefContrib.&nbsp; The Autofac implementation is a single file with a couple extension methods.&nbsp; The MEF implementation is an entire namespace, over multiple classes, not the mention that it also relies on other infrastructure code in MefContrib.&nbsp; Basically, the guys that wrote MefContrib had to write a mini-container within MEF.</p>
<p>MEF is great for building <em><strong>extremely</strong> loosely coupled </em>applications.&nbsp; I don’t think it has any business in an application where you know and own all of the dependencies; there are simply better libraries for that.</p>  </div>
<h2>Comments</h2>
<div class='comments'>
<div class='comment'>
<div class='author'>bling</div>
<div class='content'>
Thanks for the reply Nick!<br /><br />I have yet to check out all the new MEF features of 4.5, but it definitely looks very interesting with what&#39;s happening in the previews.<br /><br />The new RegistrationBuilder looks pretty good, especially since attributes are optional now, but that only solves wiring up the application.<br /><br />IMO, the most useful (and powerful) thing you can add is the equivalent of Autofac&#39;s IComponentContext &#8211; something that will let you easily hook into any part of the resolution chain from creation to disposal.<br /><br />Once that&#39;s in it&#39;ll be much easier to extend the container and use it for more &quot;advanced&quot; scenarios &#8211;and with less code.<br /><br />Cheers,<br />Bailey</div>
</div>
<div class='comment'>
<div class='author'>Nick</div>
<div class='content'>
Hi Bailey! Nice thoughtful article - I have a foot in both camps, so I&#39;m glad that the Autofac extension points work for you, but I&#39;m also keen to close some of the gaps on the MEF side :)<br /><br />I am curious, have you had a chance to look at RegistrationBuilder, being delivered in the .NET 4.5 version of MEF? It opens up the possibility for us to support activation events like the ones you mention, although it doesn&#39;t as of writing.<br /><br />In case you didn&#39;t catch it, the release announcement is at: http://blogs.msdn.com/b/bclteam/archive/2011/10/27/what-s-new-in-mef-version-2-preview-4.aspx<br /><br />Thanks for writing this up anyway, it will give us something to think about.<br /><br />Regards,<br />Nick</div>
</div>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ping.pong Twitter Client]]></title>
    <link href="http://bling.github.io//blog/2011/10/09/pingpong-twitter-client/"/>
    <updated>2011-10-09T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2011/10/09/pingpong-twitter-client</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I have a whole <a href="http://blingcode.blogspot.com/2011/09/push-driven-development-with-reactive.html">series</a> dedicated to blogging about how I wrote a Twitter client from scratch, but if I want anyone to actually use it, I better do some advertising :-D.</p> <p>ping.pong is a fast and lightweight Twitter client written in Silverlight.&nbsp; As of this moment it targets v4 but will likely target v5 whenever that is released.</p> <p>Here are some highlights…</p> <h3>Visually Pleasing</h3> <p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: block; float: none; border-top-width: 0px; border-bottom-width: 0px; margin-left: auto; border-left-width: 0px; margin-right: auto; padding-top: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/-9wwcsDIu5Yg/TpHayG-NVXI/AAAAAAAAAHg/-Jo9iq0ghOA/image%25255B15%25255D.png?imgmax=800" width="377" height="280"></p> <p>The UI is based on your typical column-based design.&nbsp; The column widths will automatically resize to take up all available horizontal space.&nbsp; There is no horizontal scrolling.</p> <h3><strong>Access to the Streaming API</strong></h3> <p>No more rate limits!&nbsp; Your timeline is connected directly with Twitter’s streaming API, which means whenever someone you follow tweets you will know about it in almost near real-time.&nbsp; Searching is also done through the streaming API.</p> <h3>Fast &amp; Lightweight</h3> <p>ping.pong was built to run fast with low CPU utilization.&nbsp; Even when stream searching for “e” (yes, the letter E), the CPU usage stays under 15%.&nbsp; The maximum number of tweets that Twitter sends appears to be 50 per second.</p> <h3>Conversations</h3> <p>ping.pong will quickly show an entire tweet conversation by navigating reply tags back to the original tweet that started it all.</p> <h3>Free &amp; Open Source</h3> <p>The full source code for ping.pong can be found on <a href="https://github.com/bling/Ping.Pong">GitHub</a>.&nbsp; You can compile it, make modifications as you please, and run it yourself.&nbsp; The only thing missing is the consumer keys which uniquely identifies this client from another.&nbsp; You can generate them through Twitter once you have a developer account.</p> <h3>Installer</h3> <p>The latest and greatest can be quickly installed from <a href="http://dl.dropbox.com/u/2072014/Ping.Pong/PingPongTestPage.html">here</a>.&nbsp; Check back periodically for updates!</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Push Driven Development with Reactive Extensions]]></title>
    <link href="http://bling.github.io//blog/2011/09/29/push-driven-development-with-reactive/"/>
    <updated>2011-09-29T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2011/09/29/push-driven-development-with-reactive</id>
    <content type="html"><![CDATA[<p>This is going to be the last post that concludes my series on building a real-time push app with Silverlight.  Any additional posts would likely be outside the context of writing a push app and more about how I’m adding features to ping.pong, my Twitter app, so I think this is a good place to wrap up and talk generally from a top down overview of building a push-style application.</p>

<p>Here’s a recap of everything discussed so far:</p>

<p><a href="http://bling.github.io//blog/2011/08/26/building-real-time-push-app-with-rx-1">Part 1</a>: Basics – Creating an Observable around a basic HTTP web stream against Twitter’s streaming API</p>

<p><a href="http://bling.github.io//blog/2011/08/26/building-real-time-push-app-with-rx-2">Part 2</a>: Subscription and Observation of Observables</p>

<p><a href="http://bling.github.io//blog/2011/08/28/building-real-time-push-app-with-rx-3">Part 3</a>:  Basics of UX design with a look at shadows and gradients.</p>

<p><a href="http://bling.github.io//blog/2011/09/05/building-real-time-push-app-with-rx-4">Part 4</a>:  Integrating with 3rd party libraries, notably Caliburn Micro and Linq2Twitter and how to achieve polling with observables.</p>

<p><a href="http://bling.github.io//blog/2011/09/08/building-real-time-push-app-with-rx-5">Part 5</a>:  A minor hick up with Linq2Twitter.</p>

<p><a href="http://bling.github.io//blog/2011/09/13/building-real-time-push-app-with-rx-6">Part 6</a>:  Taking advantage of transparencies to improve the design and reusability of UX.</p>

<p><a href="http://bling.github.io//blog/2011/09/16/building-real-time-push-app-with-rx-7">Part 7</a>:  A summary of all things encountered so far, replacing Linq2Twitter with Hammock, first release of code to <a href="https://github.com/bling/Ping.Pong">GitHub</a>, and a binary released capable pulling and streaming tweets from Twitter.</p>

<p><a href="http://bling.github.io//blog/2011/09/21/building-real-time-push-app-with-rx-8">Part 8</a>:  Examples of using Caliburn Micro to easily resolve data bindings that otherwise would be much more effort.</p>

<p>And that leads us to this post…</p>

<h1>PDD (Push Driven Development)</h1>

<p>One of the main goals of this series is to create a performant Silverlight app based on push principles, as opposed to more traditional pull principles.  To that effect, ping.pong has performed remarkably well and is limited only by Twitter’s throttling, which currently appears to be maximum of 50 tweets per second via the streaming API.</p>

<p>Writing the application from a push-driven mindset was definitely unintuitive at first, and I had to refactor (actually rewrite is more accurate) the code many times to move closer to a world where the application is simply <em>reacting</em> to events thrown at it (as opposed to asking the world for events).</p>

<p>To be absolutely clear on what I mean on the differences between push and pull, here’s a comparison:</p>

<table border="0" cellspacing="0" cellpadding="2" width="100%"> <tbody> <tr> <td valign="top"><strong>Pulling</strong></td> <td valign="top"><strong>Push</strong></td></tr> <tr> <td valign="top" width="50%">var e = tweets.GetEnumerator();<br>while (e.MoveNext()) <strong>// is there more?<br></strong>{<br>  e.Current; <strong>// get current<br></strong>  DoSomething(e.Current);<br>}</td> <td valign="top" width="50%">IObservable&lt;Data&gt; data = /* get source */<br><br><strong>// whenever data comes, do something</strong><br>data.Subscribe(DoSometing); <br></td></tr></tbody></table>


<p></p>

<p>On the pulling side, the caller is much more concerned with the logic on how to process each message.  It needs to <em>repeatedly</em> ask the world, &ldquo;hey, is there more data?&rdquo;.</p>

<p>On the push side, the caller merely asks the world, &ldquo;hey, give me data when you get some&rdquo;.</p>

<p>Twitter is a perfect example because their APIs have both a pulling and pushing models.  Traditional clients poll continuously all the time, and many had configurable options to try to stay under the 200 API calls per hour limit.  Most of Twitter’s API still consists of pulling, but the user’s home line and searching can be streamed in near real time via the streaming API, aka. push.  Streaming tweets effectively removes the API call limit.</p>

<h1>Push and Pull with Reactive Extensions</h1>

<p>The beauty of Rx is that regardless of whether it is actually pushing or pulling, the API will look same:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">IObservable</span><span class="p">&lt;</span><span class="n">Tweet</span><span class="p">&gt;</span> <span class="n">tweets</span> <span class="p">=</span> <span class="n">_client</span><span class="p">.</span><span class="n">GetHomeTimeline</span><span class="p">();</span>
</span><span class='line'><span class="n">tweets</span><span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">t</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="cm">/* do something with the tweet */</span> <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>As far as the caller is concerned, it doesn’t care (or needs to know) whether the <code>GetHomeTimeline</code> method is polling Twitter or streaming from Twitter.  All it needs to know is <em>when</em> a tweet comes it will <em>react</em> and do something in the Subscribe action.</p>

<p>In fact, Subscribe simply means &ldquo;when you have data, call this&rdquo;, but that could also be immediately, which would be analogous to IEnumerable.</p>

<p>However, if that was the only thing Rx provided it wouldn’t be as popular as it is, because other pub/sub solutions like the EventAggregator already provide a viable asynchronous solution.</p>

<p>Unlocking Rx’s power comes with its multitude of operators.  Here’s an example:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IObservable</span><span class="p">&lt;</span><span class="n">Tweet</span><span class="p">&gt;</span> <span class="n">GetStreamingStatuses</span><span class="p">(</span><span class="k">this</span> <span class="n">TwitterClient</span> <span class="n">client</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="k">return</span> <span class="n">client</span><span class="p">.</span><span class="n">GetHomeTimeline</span><span class="p">()</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Merge</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">GetMentions</span><span class="p">())</span>
</span><span class='line'>      <span class="p">.</span><span class="n">Concat</span><span class="p">(</span><span class="n">client</span><span class="p">.</span><span class="n">GetStreamingHomeline</span><span class="p">());</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p><code>GetHomeTimeline</code> and <code>GetMentions</code> initiate once-only pull style API calls, while <code>GetStreamingHomeline</code> will initiate a sticky connection and stream subsequent tweets down the pipe.</p>

<p>The <code>Merge</code> operator is defined as this: &ldquo;Merges an observable sequence of observable sequences into an observable sequence.&rdquo;</p>

<p>I think a better description would be &ldquo;whenever there is data from any of the sources, push it through&rdquo;.  In the example above, this would translate to whenever a tweet comes from either the home timeline or the mentions timeline, give me a Tweet (first-come-first-push), followed by anything from the streaming timeline.</p>

<p>And there lies one of the greatest beauties of Rx.  <em>All</em> of the complexity lies solely on setting up the stream and operators.  And that, also, is its disadvantage.</p>

<h1>Rx Complexity</h1>

<p>Let’s take a look at the <a href="http://msdn.microsoft.com/en-us/library/hh212146(v=VS.103">Concat</a>.aspx) operator, defined as: &ldquo;Concatenates two observable sequences.&rdquo;  In the remarks sections it states this: &ldquo;The Concat operator runs the first sequence to completion. Then, the second sequence is run to completion effectively concatenating the second sequence to the end of the first sequence.&rdquo;</p>

<p>Let’s try it out:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">a</span> <span class="p">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">Interval</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">1</span><span class="p">)).</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span><span class='line'><span class="kt">var</span> <span class="n">b</span> <span class="p">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">Interval</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">1</span><span class="p">)).</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="s">&quot;s&quot;</span> <span class="p">+</span> <span class="n">x</span><span class="p">);</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">Concat</span><span class="p">(</span><span class="n">b</span><span class="p">).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span><span class='line'><span class="c1">// output: 0, 1, 2, 3, 4...</span>
</span></code></pre></td></tr></table></div></figure>


<p>As expected, only numbers are printed because the first sequence never ends, so it won’t concatenate the second one.  Let’s modify it so that it does finish:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">var</span> <span class="n">a</span> <span class="p">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">Interval</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">1</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TakeWhile</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="p">++</span><span class="n">count</span> <span class="p">&lt;</span> <span class="m">5</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span></code></pre></td></tr></table></div></figure>


<p>Note, that using <code>Observable.Generate</code> is preferred because it doesn’t introduce an external variable, but I stuck with Interval so the code looks similar to the second observable.  As expected again, it will print &ldquo;0, 1, 2, s0, s1, s2&rdquo;.</p>

<p>OK, let’s spice things up.  Let’s make <code>b</code> a ConnectableObservable by using the <a href="http://msdn.microsoft.com/en-us/library/hh229126(v=VS.103">Publish</a>.aspx) operator, and immediately call <code>Connect</code>.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">int</span> <span class="n">count</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>
</span><span class='line'><span class="kt">var</span> <span class="n">a</span> <span class="p">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">Interval</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">1</span><span class="p">))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">TakeWhile</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="p">++</span><span class="n">count</span> <span class="p">&lt;</span> <span class="m">5</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span><span class='line'><span class="kt">var</span> <span class="n">b</span> <span class="p">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">Interval</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">1</span><span class="p">)).</span><span class="n">Select</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="s">&quot;s&quot;</span> <span class="p">+</span> <span class="n">_</span><span class="p">).</span><span class="n">Publish</span><span class="p">();</span>
</span><span class='line'><span class="n">b</span><span class="p">.</span><span class="n">Connect</span><span class="p">();</span>
</span><span class='line'><span class="n">a</span><span class="p">.</span><span class="n">Concat</span><span class="p">(</span><span class="n">b</span><span class="p">).</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">Console</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>What do you think the output of this will be?  The answer is &ldquo;0, 1, 2, 3, <em>s5, s6, s7</em>, &hellip;&rdquo;</p>

<p>Despite using the same <code>Concat</code> operator, the result can be very different depending on the source observables.  If you use the <a href="http://msdn.microsoft.com/en-us/library/hh229288(v=VS.103">Replay</a>.aspx) operator, it would have printed &ldquo;0, 1, 2, 3, s0, s1, s2, &hellip;&rdquo;</p>

<p>Years and years of working in synchronous programming models have trained us to think in synchronous ways, and I picked Concat specifically because Concat also exists in the enumerable world.  Observable sequences are asynchronous, so we never know exactly <em>when</em> data comes at us, only what to do when it does.  And because streams occur at different times, when you combine them together there are many many ways of doing so (CombineLatest, Merge, Zip, are just a few).</p>

<p>The greatest hurdle to working in Rx is to know what the different combinations do.  This takes time and practice.  <a href="http://mnajder.blogspot.com/2010/03/rxsandbox-v1.html">RxTools</a> is a great learning tool to test out what all the operators do.</p>

<h1>Unit Testing</h1>

<p>Last but not least, Rx can make it easier to write unit tests.  The concept is easy: take some inputs and test the output.  In practice this is complicated because applications typically carry a lot of state with them.  Even with dependency injection and mocking frameworks I’ve seen a lot of code where for every assert there is 10 lines of mock setup code.</p>

<p>So how does it make it easier to test?  It reduces what you need to test to a single method, Subscribe, which takes one input, an <code>IObservable&lt;T&gt;</code></p>

<h1>Conclusion</h1>

<p>Rx is a library unlike any other you will use.  With other libraries, you will add them to your solution, use a method here or there, and go on with your life.  With Rx, it will radically change the way you code and think in general.  It’s awesome.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Real-time Push App with Silverlight: Part 8]]></title>
    <link href="http://bling.github.io//blog/2011/09/21/building-real-time-push-app-with-rx-8/"/>
    <updated>2011-09-21T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2011/09/21/building-real-time-push-app-with-rx-8</id>
    <content type="html"><![CDATA[<h1>Exploring Caliburn Micro</h1>

<p>As I hinted in earlier posts, Caliburn Micro has some wicked conventions that makes for writing MVVM super easy, and it also have a very convenient syntax for hooking up events.  For example, the following:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Button</span> <span class="na">Content=</span><span class="s">&quot;R&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   <span class="nt">&lt;i:Interaction.Triggers&gt;</span>
</span><span class='line'>       <span class="nt">&lt;i:EventTrigger</span> <span class="na">EventName=</span><span class="s">&quot;Click&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>           <span class="nt">&lt;i:InvokeCommandAction</span> <span class="na">Command=</span><span class="s">&quot;{Binding ReplyCommand}&quot;</span> <span class="na">CommandParameter=</span><span class="s">&quot;{Binding}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>       <span class="nt">&lt;/i:EventTrigger&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/i:Interaction.Triggers&gt;</span>
</span><span class='line'><span class="nt">&lt;/Button&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can be rewritten like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;Button</span> <span class="na">Content=</span><span class="s">&quot;R&quot;</span> <span class="na">cal:Message.Attach=</span><span class="s">&quot;[Reply($dataContext)]&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>There are some smarts going on here.  Caliburn Micro will default to the Click event for buttons.  For a full syntax, it would be <code>cal:Message.Attach="[Event Click] = [Reply($dataContext)]"</code>.  As you can imagine, that will call the Reply method and pass in the current data context.  You can also pass in other things like <code>$this</code>, <code>$source</code>, or <code>$executionContext</code> for full access to anything and everything Caliburn Micro itself has access to.</p>

<p>The coolest thing about this is it gives you some wicked control over how your data context gets set.  Ever struggled with popup windows or data grids and using weird hacks to get the binding correct?  Caliburn Micro makes this very easy.  Here’s an example.</p>

<ol>
<li>I have a DataTemplate which renders the UI for the model Tweet.</li>
<li>Tweet is just a simple class which holds only properties.</li>
<li>Inside the DataTemplate, I have some buttons that when the user clicks will reply, retweet, quote, or direct message.</li>
</ol>


<p>The Tweet class is purely for modeling data, so adding any methods would be bad practice.  Also, since I’m in a DataTemplate I can’t easily reference another control with ElementName (in this case I need the containing parent’s DataContext).  And to add insult to injury, Silverlight 4 doesn’t have RelativeSource ancestor type.  So how do I solve this?</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;StackPanel</span> <span class="na">VerticalAlignment=</span><span class="s">&quot;Bottom&quot;</span> <span class="na">cal:Action.TargetWithoutContext=</span><span class="s">&quot;shell&quot;</span> <span class="na">Orientation=</span><span class="s">&quot;Horizontal&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span> <span class="na">Content=</span><span class="s">&quot;R&quot;</span> <span class="na">cal:Message.Attach=</span><span class="s">&quot;[Reply($dataContext)]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span> <span class="na">Content=</span><span class="s">&quot;RT&quot;</span> <span class="na">cal:Message.Attach=</span><span class="s">&quot;[Retweet($dataContext)]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span> <span class="na">Content=</span><span class="s">&quot;Q&quot;</span> <span class="na">cal:Message.Attach=</span><span class="s">&quot;[Quote($dataContext)]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Button</span> <span class="na">Content=</span><span class="s">&quot;DM&quot;</span> <span class="na">cal:Message.Attach=</span><span class="s">&quot;[DirectMessage($dataContext)]&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'><span class="nt">&lt;/StackPanel&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>The secret is the attached property TargetWithoutContext.  As the name implies, it will set the target for all the ActionMessages attached to all the buttons, without setting the context.  If I used the Target attached property, it would set all of the Buttons’ data context to the same object – not what we want.  Since the Button’s data context remains intact, we can call “Reply($dataContext)”, which calls the Reply method on the target object (set on the StackPanel) and pass in the Tweet.  “shell” is the key of the service that I registered into the container.</p>

<p>Originally I wanted this entire series to be able writing a fast push data app with Silverlight and Rx, and now I’m finding that I’m writing an entire Twitter client because it’s so much fun :&ndash;).</p>

<p>I’m going to make another release soon.  While the first release was merely experimental, the next one will be useful enough to potentially use full time.  As you can probably tell with this blog post, it supports all the actions mentioned previously (and it’ll appear on mouse hover):</p>

<p><img src="http://lh5.ggpht.com/-RIZG8I0_rik/TnqqmNCK-6I/AAAAAAAAAHM/-xU4_cj6iDg/image_thumb%25255B2%25255D.png?imgmax=800" alt="img" /></p>

<p>The tweet box is much improved and shows you how many character you have left:</p>

<p><img src="http://lh4.ggpht.com/-2VhCjjYrcoo/TnqqmstbbUI/AAAAAAAAAHU/zK65JB2shQw/image_thumb%25255B3%25255D.png?imgmax=800" alt="img" /></p>

<p>And it’s smart enough to auto wrap http links via Twitter’s t.co service, and the counter takes that into account.  Some interesting things to note is that in the future <em>all links</em> will be wrapped t.co.  Looks like Twitter is trying to eat up bt.ly or something.</p>

<p>Clicking on @users and #topics will automatically open a new timeline and subscribe to those tweets.  It is almost full featured enough to become my main Twitter client.  There are certain features still missing, and it’s purely based on when I have time to port them over.</p>

<p>As always, you can install directly from <a href="http://dl.dropbox.com/u/2072014/Ping.Pong/PingPongTestPage.html">here</a>, or you can grab the code on the <a href="https://github.com/bling/Ping.Pong">GitHub</a> page!</p>

<p>Next post will be about Rx from a very top level perspective and how it influenced my code from beginning to be experienced and all refactorings in between.  Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Real-time Push App with Silverlight: Part 7]]></title>
    <link href="http://bling.github.io//blog/2011/09/16/building-real-time-push-app-with-rx-7/"/>
    <updated>2011-09-16T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2011/09/16/building-real-time-push-app-with-rx-7</id>
    <content type="html"><![CDATA[<div class='post'>
<h3></h3> <h3>Infrastructure Refactor</h3> <p>A lot of things changed internally, and I mean….a lot….</p> <p>From an infrastructure standpoint, I decided to remove the dependency on LinqToTwitter, and I replaced it with <a href="https://github.com/danielcrenna/hammock">Hammock</a>.&nbsp; A couple things led me to this decision, one being the Silverlight support wasn’t as good as I’d hoped, and the streaming API implementation was limited.&nbsp; After reading the Twitter documentation I realized that the REST API was super simple and I’d be better off writing a simple interface to it.</p> <p>I heard good things about Hammock, so I decided to give that one a try (I wasn’t going to go as far as reimplementing OAuth).&nbsp; It was pretty easy to set up and in the end I was able to get Twitter working again and with less lines of code compared to the beginning of the refactor.</p> <h3>Goals</h3> <p>I had a couple goals for this project:</p> <ul> <li><strong>Learn:</strong>&nbsp; I was a complete newbie to Reactive Extensions when I started but now I understand it enough to hit the ground running with it.&nbsp; I’m still learning about more conventions available to Caliburn.Micro.  <li><strong>UX:</strong>&nbsp; I wanted to learn a little more about interface design.&nbsp; I wanted to know how little changes to gradients, shadows, colors, etc. could have a radically effect in the end result.  <li><strong>Performance:</strong>&nbsp; It should be fast.&nbsp; It should be able to react to real-time data.&nbsp; And it should do it with low CPU utilization.  <li><strong>Concise:</strong>&nbsp; I am a huge advocate for KISS.&nbsp; I like convention over configuration.&nbsp; I like implementing something in 2 lines of code rather than 20 (assuming it’s not cryptic).&nbsp; As I was writing the app and refactoring, if there was an opportunity to remove a line of code, I did it.&nbsp; The result is that the app currently consists of less than 500 lines of code as of this post (excluding XAML).</li></ul> <h3>Tidbits</h3> <p>What are some interest things I learned?</p> <ul> <li>System.Json is an amazing assembly.&nbsp; All you need to do is invoke JsonValue.Parse on a string and it will create a JsonValue for you, which will be a dictionary of key/value pairs.&nbsp; What’s more, by doing something like “string s = json[“text”]” will do an explicit conversion <strong>and unescape JSON characters</strong>, and <strong>only</strong> via the explicit operator.&nbsp; Calling ToString(), even though converting it to a string, will not unescape.&nbsp; This was completely undocumented and only found when I looked at the source code via Resharper’s external sources feature.  <li>Rx is awesome.&nbsp; When I ran into performance problems of trying to stream tweets from the world that contained the letter ‘a’ all I had to do was add an operator to improve the performance (in this case it was Buffer).&nbsp; It should be noted that it is <em>very important</em> to understand what Rx is doing underneath the hood to realize its benefits.&nbsp; Rx lets you refactor 30 lines of async code into 1 operator, but it’s still doing that 30 lines of code – you just don’t see it.  <li>I really, <em>really</em>, like the conventions available from Caliburn.&nbsp; Some of the features that come out of the box from this very small library saves me from writing a lot of boilerplate code like commands, triggers, and evening bindings (Caliburn will auto bind x:Name to a property).  <li>Twitter’s documentation for <a href="https://dev.twitter.com/docs/streaming-api/user-streams">user streams</a> currently sucks and some trial and error was required to get it working.</li></ul> <p>What is the end result of all this effort?&nbsp; We have a styled Twitter app that can update your status, pull your home/mentions timeline, and most importantly will <strong>stream all subsequent tweets</strong>.&nbsp; There’s no pulling and no limits.&nbsp; You will get a tweet of everyone you follow in real-time as it happens.</p> <p>Moreover, there’s a feature to connect to the Streaming API to search Twitter for <em>anything</em>.&nbsp; To get an idea of what we’re talking about, here’s a full screenshot of it:</p> <p><img style="background-image: none; border-right-width: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh4.ggpht.com/-tB6iLGL85aE/TnNOi7hdq9I/AAAAAAAAAHE/wGjkyHQzYKs/image%25255B20%25255D.png?imgmax=800" width="578" height="328"></p> <p>You read that right.&nbsp; I’m streaming any tweet in the world that has the words ‘and’, ‘the’, ‘yes’, <strong>or</strong> ‘no’ in them.&nbsp; This is streaming around 400kB/s continuously and CPU utilization is under 25%.&nbsp; The tweets are coming so fast it’s impossible to read them (at a rate of 50 tweets/second), so ideally you’d want to specify realistic search terms.</p> <p>Moreover, the majority of the performance cost is actually downloading all the profile images.&nbsp; If I take took out pictures I could stream any tweet in the world that has the letter ‘e’ in it at under 10% CPU.&nbsp; It looks like Twitter limits the rate of tweets to 50 tweets/second because that was the rate for this one as well.</p> <p>Features are minimalistic.&nbsp; You can update your status, but you can’t DM, you can’t RT, you can’t do any of the normal things.&nbsp; My original goal was not to write another Twitter client, but it’s actually quite fun to do so, so I’ll probably eventually get all features in.</p> <p>And as promised, it’s up on <a href="https://github.com/bling/Ping.Pong">GitHub</a>, and version 0.0.0.1 <strong>alpha</strong> (yes! expect bugs!!) is available in the downloads section.&nbsp; Or, here’s a direct link to the XAP file on my <a href="http://dl.dropbox.com/u/2072014/Ping.Pong/PingPongTestPage.html">Dropbox</a>.&nbsp; Have fun!</p>  </div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Real-time Push App with Silverlight: Part 6]]></title>
    <link href="http://bling.github.io//blog/2011/09/13/building-real-time-push-app-with-rx-6/"/>
    <updated>2011-09-13T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2011/09/13/building-real-time-push-app-with-rx-6</id>
    <content type="html"><![CDATA[<p>Back to the UI!</p>

<p>For this post I’m going to restyle the tweets.  Recall that they currently look like this:</p>

<p><img src="http://lh4.ggpht.com/-ooxWWcVmX9w/Tm7icHgdN_I/AAAAAAAAAGo/wQ3qnvYAeWw/image_thumb2.png?imgmax=800" alt="img" /></p>

<p>The gradient background is currently #FFEEEEEE to #FFDDDDDD.  For this post I’m going to talk about a very powerful tool in a designer’s arsenal: <em>transparency</em>.</p>

<p>Your first may be to think “big deal”, but just like programmers can use base classes and injection to share common code, designers can use transparency to achieve a similar effect.</p>

<p>Let’s change change the color to be black, and tweak only the alpha.  I’m going to set the colors to be #11000000 to #22000000 on a white background.  This is the result:</p>

<p><img src="http://lh6.ggpht.com/-Ev-xA7pMsak/Tm7icnmllQI/AAAAAAAAAGw/xMZM3yNsGZA/image_thumb5.png?imgmax=800" alt="img" /></p>

<p>Looks almost identical doesn’t it?  However, by doing this we have dramatically improved the reusability of the gradient.  Here’s what happens when I change the background to be a different color:</p>

<p><img src="http://lh3.ggpht.com/-uPxkKsog7xU/Tm7ic2vJhpI/AAAAAAAAAG4/J-PMDfe_6EM/image_thumb8.png?imgmax=800" alt="img" /></p>

<p>I just changed one variable to do that.  If I wanted to provide different themes for my application it would be <em>extremely</em> easy to do that if all the data templates were built with transparencies.  In fact, I just slap on a ColorPicker and I’d be done!</p>

<p>Even though it’d be easy to do this, any application that is dominated by one color gets boring very quickly. Most applications that look nice tend to focus around two dominant colors that contrast well against each other. Black and white are very common because they contrast well with a large variety of colors, but you can also have things like blue/green, purple/orange, etc.  As always, as long as you’re consistent you’ll likely have a good result.</p>

<p>Now, the flip side of the equation is also possible.  This is where you have something that exists already and then you put a transparent layer on top of it, creating a lightening or dimming effect.  In my experience I’ve found this to be inferior because it tends to wash out colors.  In the example above, if I applied a slightly transparent layer over top of the tweet, my picture and text would be negatively affected.  This is nonetheless a very useful trick, like with mouse over effects where you want a quick and cheap way of conveying information to the user.</p>

<p>Now, let’s take a big detour and restyle the entire application and go with a completely different theme.  I also wanted try something besides Apple and Microsoft inspired designs, which was more difficult than expected because I guess I’m not as creative as I thought I was :&ndash;).  Coming up with a good design takes a long time, and frequently you need some sort of inspiration.  Twitter in general is a very simple application, so the best designs are simple as well.</p>

<p>In an attempt to try to come up with something “cool” and “unique”, I started with the idea of elevated boxes layered on top of each other.  Here’s a before and after once I was done:</p>

<p><img src="http://lh5.ggpht.com/-Mz_J4B2JDLM/Tm7idcOBx-I/AAAAAAAAAHA/7FGeCgmZzek/image_thumb11.png?imgmax=800" alt="img" /></p>

<p>The redesign went through many iterations.  I showed it to friends and colleagues and got mixed feelings.  Some liked it.  Some thought it was too noisy.  And herein revealed a problem with complex designs – they are hard to get right!  That, and they tend to divide audience into those that really like it, and those that really don’t.</p>

<p>Anyways, the beauty of XAML is that I can try something else entirely without any changes to the code, so I’ll try another theme in the future.</p>

<p>I’m about 90% ready to release code to GitHub along with the first public alpha version.  Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Real-time Push App with Silverlight: Part 5]]></title>
    <link href="http://bling.github.io//blog/2011/09/08/building-real-time-push-app-with-rx-5/"/>
    <updated>2011-09-08T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2011/09/08/building-real-time-push-app-with-rx-5</id>
    <content type="html"><![CDATA[<p>I planned on this post to be about UI, but I’m going to defer that until the next post.  I said from the start of this series that I would document about everything about building the application from scratch, including my struggles.</p>

<p>And with that I want to mention something that got me scratching my head one too many times.  It was with how I used LinqToTwitter.  Here is the source code which you can immediately copy/paste into a blank project to reproduce:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">partial</span> <span class="k">class</span> <span class="nc">MainPage</span> <span class="p">:</span> <span class="n">UserControl</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">TwitterContext</span> <span class="n">_context</span> <span class="p">=</span> <span class="k">new</span> <span class="n">TwitterContext</span><span class="p">();</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">ViewModel</span> <span class="n">_vm1</span><span class="p">,</span> <span class="n">_vm2</span><span class="p">,</span> <span class="n">_vm3</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">MainPage</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">InitializeComponent</span><span class="p">();</span>
</span><span class='line'>        <span class="n">_vm1</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ViewModel</span><span class="p">(</span><span class="n">_context</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_vm2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ViewModel</span><span class="p">(</span><span class="n">_context</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_vm3</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ViewModel</span><span class="p">(</span><span class="n">_context</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_vm1</span><span class="p">.</span><span class="n">Callback</span> <span class="p">+=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Callback of VM1: &quot;</span> <span class="p">+</span> <span class="n">_vm1</span><span class="p">.</span><span class="n">LocalState</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_vm2</span><span class="p">.</span><span class="n">Callback</span> <span class="p">+=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Callback of VM2: &quot;</span> <span class="p">+</span> <span class="n">_vm2</span><span class="p">.</span><span class="n">LocalState</span><span class="p">);</span>
</span><span class='line'>        <span class="n">_vm3</span><span class="p">.</span><span class="n">Callback</span> <span class="p">+=</span> <span class="p">()</span> <span class="p">=&gt;</span> <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Callback of VM3: &quot;</span> <span class="p">+</span> <span class="n">_vm3</span><span class="p">.</span><span class="n">LocalState</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">_vm1</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
</span><span class='line'>        <span class="n">_vm2</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
</span><span class='line'>        <span class="n">_vm3</span><span class="p">.</span><span class="n">Start</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">ViewModel</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">TwitterContext</span> <span class="n">_context</span><span class="p">;</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">event</span> <span class="n">Action</span> <span class="n">Callback</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">int</span> <span class="n">LocalState</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="nf">ViewModel</span><span class="p">(</span><span class="n">TwitterContext</span> <span class="n">context</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_context</span> <span class="p">=</span> <span class="n">context</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">void</span> <span class="nf">Start</span><span class="p">()</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">query</span> <span class="p">=</span> <span class="p">(</span><span class="k">from</span> <span class="n">s</span> <span class="k">in</span> <span class="n">_context</span><span class="p">.</span><span class="n">Status</span>
</span><span class='line'>                <span class="k">where</span> <span class="n">s</span><span class="p">.</span><span class="n">Type</span> <span class="p">==</span> <span class="n">StatusType</span><span class="p">.</span><span class="n">Public</span> <span class="p">&amp;&amp;</span> <span class="n">s</span><span class="p">.</span><span class="n">Count</span> <span class="p">==</span> <span class="m">10</span>
</span><span class='line'>                <span class="k">select</span> <span class="n">s</span><span class="p">);</span>
</span><span class='line'>        <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Hash code of ViewModel: &quot;</span> <span class="p">+</span> <span class="n">query</span><span class="p">.</span><span class="n">GetHashCode</span><span class="p">());</span>
</span><span class='line'>        <span class="n">query</span><span class="p">.</span><span class="n">AsyncCallback</span><span class="p">(</span><span class="n">statuses</span> <span class="p">=&gt;</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                <span class="n">LocalState</span><span class="p">++;</span>
</span><span class='line'>                <span class="n">Debug</span><span class="p">.</span><span class="n">WriteLine</span><span class="p">(</span><span class="s">&quot;Hash code inside callback: &quot;</span> <span class="p">+</span> <span class="n">GetHashCode</span><span class="p">());</span>
</span><span class='line'>                <span class="n">Callback</span><span class="p">();</span>
</span><span class='line'>                <span class="p">}).</span><span class="n">FirstOrDefault</span><span class="p">();</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Now, if you run this, you will see that only <em>one</em> of the view models will get its state updated.  Huh?!</p>

<p>How is that possible?  I started getting paranoid so I even added the local state variable “just in case.”</p>

<p>Well, I had to look into the source code of LinqToTwitter to figure out exactly what happened.  Here is the code for AsyncCallback:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">AsyncCallback</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">queryType</span><span class="p">,</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'> <span class="p">{</span>
</span><span class='line'>     <span class="p">(</span><span class="n">queryType</span><span class="p">.</span><span class="n">Provider</span> <span class="k">as</span> <span class="n">TwitterQueryProvider</span><span class="p">)</span>
</span><span class='line'>         <span class="p">.</span><span class="n">Context</span>
</span><span class='line'>         <span class="p">.</span><span class="n">TwitterExecutor</span>
</span><span class='line'>         <span class="p">.</span><span class="n">AsyncCallback</span> <span class="p">=</span> <span class="n">callback</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>     <span class="k">return</span> <span class="n">queryType</span><span class="p">;</span>
</span><span class='line'> <span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>See what happened?  The callback gets overwritten every time you call this method.  Even though the call to <code>FirstOrDefault</code>() causes all 3 expressions to evaluate, only the last view model will get values because that’s the with the callback attached.</p>

<p>Lesson of the day: The AsyncCallback extension method for LinqToTwitter is not thread-safe.</p>

<p>So&hellip;the question is, how do we make it thread safe?  I just replaced wrapped the AsyncCallback with another extension method:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">private</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">AutoResetEvent</span> <span class="n">_twitterEvt</span> <span class="p">=</span> <span class="k">new</span> <span class="n">AutoResetEvent</span><span class="p">(</span><span class="k">true</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'><span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="n">AsyncTwitterCallback</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">twitter</span><span class="p">,</span> <span class="n">Action</span><span class="p">&lt;</span><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;&gt;</span> <span class="n">callback</span><span class="p">)</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">Observable</span><span class="p">.</span><span class="n">Start</span><span class="p">(()</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_twitterEvt</span><span class="p">.</span><span class="n">WaitOne</span><span class="p">();</span>
</span><span class='line'>        <span class="n">twitter</span><span class="p">.</span><span class="n">AsyncCallback</span><span class="p">(</span><span class="n">results</span> <span class="p">=&gt;</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="k">try</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">callback</span><span class="p">(</span><span class="n">results</span><span class="p">);</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>            <span class="k">finally</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">_twitterEvt</span><span class="p">.</span><span class="n">Set</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}).</span><span class="n">FirstOrDefault</span><span class="p">();</span>
</span><span class='line'>    <span class="p">});</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing complicated – just a simple wait handle to ensure only 1 thread can go through at a time.</p>

<p>Hopefully upstream fixes this, or at least documents it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Real-time Push App with Silverlight: Part 4]]></title>
    <link href="http://bling.github.io//blog/2011/09/05/building-real-time-push-app-with-rx-4/"/>
    <updated>2011-09-05T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2011/09/05/building-real-time-push-app-with-rx-4</id>
    <content type="html"><![CDATA[<p>Originally I wanted to avoid bringing in external libraries to keep the app as lean as possible, but then I realized that I would spend too much time reinventing the wheel.  Twitter is deprecating basic authentication in the near future, which makes OAuth no longer optional.  Rather than writing yet another Twitter client (if you’re curious I found a great reference <a href="http://chris.59north.com/post/2009/09/16/SilverTweet-e28093-Building-a-Silverlight-Twitter-client-part-1.aspx">here</a>), I fired up <a href="http://nuget.org/">NuGet</a> and brought in <a href="http://linqtotwitter.codeplex.com/">LinqToTwitter</a>, and while I’m there I brought in <a href="http://code.google.com/p/autofac/">Autofac</a> and <a href="http://caliburnmicro.codeplex.com/">Caliburn.Micro</a> as well.</p>

<p>Naturally, LinqToTwitter will work nicely with Rx because as name implies it uses LINQ heavily.  Caliburn.Micro is a MVVM library which I’ve always wanted an excuse to try because of features like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;ListBox</span> <span class="na">cal:Message.Attach=</span><span class="s">&quot;[Event Loaded] = [LoadList($dataContext)]&quot;</span> <span class="nt">/&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s only scratching the surface of what Caliburn can do, so it will be a fresh breath of air to see what else it can do.</p>

<p>By default, Caliburn uses MEF to wire up its bootstrapper.  After adding a couple <code>[Import]</code>s and <code>[Export]</code>s, I knew it wasn’t for me.  It works well for writing plugins, i.e. <em>external</em> dependencies because of its built-in assembly scanning capabilities, but for injecting <em>internal</em> dependencies, other IoC containers do a much better job of that.  I used Castle Windsor in past projects, but for a change I’m going to use Autofac which I haven’t used since v2 came out.</p>

<p>When this was all said and done the View was the only thing that didn’t change.  Everything underneath either changed radically or was deleted altogether (because LinqToTwitter provided it).  I added OAuth support and registered my application with Twitter, and with that was the birth of Ping Pong.</p>

<p>This took much longer than expected.  Silverlight 5 RC just came out and it broke pretty much any container (including MEF) for OOB because of a TypeLoadException.  I haven’t been using too many v5 features, so for the time being I downgraded to v4 to get the project working until RC2 comes out.</p>

<p>Integrating LinqToTwitter was a challenge.  The project site has a lot of good documentation, but most of it was for desktop, not Silverlight, and because of that I banged my head a couple times.  I wish I grabbed the source code earlier because it’s there where you’ll find hundreds of working examples (in code!) to do everything with the library (and in Silverlight).</p>

<p>After all that, PingPong now has 3 columns (home, public, sampling) that <em>dynamically resizes</em> (it’s surprising that <a href="http://metrotwit.com">MetroTwit</a> is the only client that does this&hellip;) to the window size.</p>

<p><img src="http://lh4.ggpht.com/-f1uQ63FwyoI/TmU-fK3WfQI/AAAAAAAAAGc/Y26EvwnXy_4/image_thumb%25255B15%25255D.png?imgmax=800" alt="img" /></p>

<p>Oh, and there’s pictures now!  The streaming time line takes significantly more CPU now that it has to load images, but we’re still sitting at around 5-10% for what is continuously streaming data and loading pictures.  Not too shabby!  (It took a couple tries to get a PG-13 screenshot from the public/streaming time lines&hellip;)</p>

<p>To conclude this post in the series, I’m going to talk about converting an asynchronous operation into an Observable that does not follow any predefined pattern.</p>

<h1>Creating an Observable</h1>

<p>One of Silverlight’s limitations is that almost everything needs to be an asynchronous call.  In regards to LinqToTwitter, something like this will fail (but work on desktop):</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="kt">var</span> <span class="n">tweets</span> <span class="p">=</span> <span class="p">(</span><span class="k">from</span> <span class="n">t</span> <span class="k">in</span> <span class="n">context</span><span class="p">.</span><span class="n">Status</span>
</span><span class='line'>              <span class="k">where</span> <span class="n">t</span><span class="p">.</span><span class="n">Type</span> <span class="p">==</span> <span class="n">StatusType</span><span class="p">.</span><span class="n">Public</span>
</span><span class='line'>              <span class="k">select</span> <span class="n">t</span><span class="p">).</span><span class="n">ToArray</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>On Silverlight you will get a single empty element.  To get it working, there is an extension method that comes with the library, and you use it like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="p">(</span><span class="k">from</span> <span class="n">t</span> <span class="k">in</span> <span class="n">context</span><span class="p">.</span><span class="n">Status</span>
</span><span class='line'> <span class="k">where</span> <span class="n">t</span><span class="p">.</span><span class="n">Type</span> <span class="p">==</span> <span class="n">StatusType</span><span class="p">.</span><span class="n">Public</span>
</span><span class='line'>  <span class="k">select</span> <span class="n">t</span><span class="p">)</span>
</span><span class='line'>  <span class="p">.</span><span class="n">AsyncCallback</span><span class="p">(</span><span class="n">tweets</span> <span class="p">=&gt;</span> <span class="p">{</span> <span class="cm">/* do something with it */</span> <span class="p">})</span>
</span><span class='line'>  <span class="p">.</span><span class="n">FirstOrDefault</span><span class="p">();</span>
</span></code></pre></td></tr></table></div></figure>


<p>Code is self-explanatory.  The <code>FirstOrDefault()</code> exists only to initiate the expression, otherwise it wouldn’t do anything.  So now the question is how do we convert that into an Rx Observable?</p>

<p>Every time I write an Rx query I try to use the least amount of state as possible.  This helps to keep the number unexpected anomalies to a minimum.  In the following section of code, I was able to get it down to 2 fields: <code>_sinceId</code>, and <code>Context</code>.  There is probably some operator that will let me save the sinceId variable from one observable to the next but I wasn’t able to figure it out.  In any case, I came up with this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">_subscription</span> <span class="p">=</span>
</span><span class='line'>    <span class="n">Observable</span><span class="p">.</span><span class="n">Create</span><span class="p">&lt;</span><span class="n">Tweet</span><span class="p">&gt;(</span>
</span><span class='line'>        <span class="n">ob</span> <span class="p">=&gt;</span> <span class="n">Observable</span><span class="p">.</span><span class="n">Interval</span><span class="p">(</span><span class="n">TimeSpan</span><span class="p">.</span><span class="n">FromSeconds</span><span class="p">(</span><span class="m">60</span><span class="p">))</span>
</span><span class='line'>            <span class="p">.</span><span class="n">StartWith</span><span class="p">(-</span><span class="m">1</span><span class="p">)</span>
</span><span class='line'>            <span class="p">.</span><span class="n">SubscribeOnThreadPool</span><span class="p">()</span>
</span><span class='line'>            <span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="kt">ulong</span> <span class="n">sinceId</span><span class="p">;</span>
</span><span class='line'>                <span class="p">(</span><span class="kt">ulong</span><span class="p">.</span><span class="n">TryParse</span><span class="p">(</span><span class="n">_sinceId</span><span class="p">,</span> <span class="k">out</span> <span class="n">sinceId</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">?</span> <span class="n">Context</span><span class="p">.</span><span class="n">Status</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">Type</span> <span class="p">==</span> <span class="n">statusType</span> <span class="p">&amp;&amp;</span> <span class="n">s</span><span class="p">.</span><span class="n">Count</span> <span class="p">==</span> <span class="m">200</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">:</span> <span class="n">Context</span><span class="p">.</span><span class="n">Status</span><span class="p">.</span><span class="n">Where</span><span class="p">(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">s</span><span class="p">.</span><span class="n">Type</span> <span class="p">==</span> <span class="n">statusType</span> <span class="p">&amp;&amp;</span> <span class="n">s</span><span class="p">.</span><span class="n">Count</span> <span class="p">==</span> <span class="m">200</span> <span class="p">&amp;&amp;</span> <span class="n">s</span><span class="p">.</span><span class="n">SinceID</span> <span class="p">==</span> <span class="n">sinceId</span><span class="p">))</span>
</span><span class='line'>                <span class="p">.</span><span class="n">AsyncCallback</span><span class="p">(</span><span class="n">statuses</span> <span class="p">=&gt;</span>
</span><span class='line'>                <span class="p">{</span>
</span><span class='line'>                    <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">status</span> <span class="k">in</span> <span class="n">statuses</span><span class="p">)</span>
</span><span class='line'>                    <span class="p">{</span>
</span><span class='line'>                        <span class="n">ob</span><span class="p">.</span><span class="n">OnNext</span><span class="p">(</span><span class="k">new</span> <span class="n">Tweet</span><span class="p">(</span><span class="n">status</span><span class="p">));</span>
</span><span class='line'>                        <span class="n">_sinceId</span> <span class="p">=</span> <span class="n">status</span><span class="p">.</span><span class="n">StatusID</span><span class="p">;</span>
</span><span class='line'>                    <span class="p">}</span>
</span><span class='line'>                <span class="p">})</span>
</span><span class='line'>                <span class="p">.</span><span class="n">FirstOrDefault</span><span class="p">();</span> <span class="c1">// materalize the results</span>
</span><span class='line'>            <span class="p">}))</span>
</span><span class='line'>    <span class="p">.</span><span class="n">DispatcherSubscribe</span><span class="p">(</span><span class="n">SubscribeToTweet</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That contains some custom code:</p>

<ul>
<li>Context:  is a TwitterContext from LinqToTwitter</li>
<li>DispatcherSubscribe:  is a helper extension method which Subscribes on the ThreadPool, Observes on the Dispatcher, and then Subscribes with the specified action</li>
<li>SubscribeToTweet: a method in the base class which adds to a ObservableCollection so the UI gets updated</li>
</ul>


<p>To translate the code, here is a basic flow of what’s happening:</p>

<ol>
<li>Observable.Create wraps the subscription of another Observable.  It provides access to an IObserver <code>ob</code> which lets you explicitly invoke OnNext().</li>
<li>Observable.Interval will raise an observable every 60 seconds.</li>
<li>The subscription of Observable.Interval will query the TwitterContext for the next set of tweets.</li>
<li>Inside the AsyncCallback, it invokes <code>ob.OnNext</code>as well as keeps track of the ID so the next time it queries it only gets newer tweets.</li>
<li>Finally, <code>DispatcherSubscribe</code> will take the <code>Tweet</code> object and add it to an <code>ObservableCollection&lt;Tweet&gt;</code>, which notifies the UI.</li>
</ol>


<p>As always, you should “clean up your garbage”.  In this respect I was pretty impressed with Rx as it was able to clean up the entire chain of observables with a single call to <code>_subscription.Dispose()</code>.  Nice!</p>

<p>In the next post I’m going to switch back to UI and completely restyle the application.  The code will hit GitHub soon as well (I promise!).  Stay tuned&hellip;</p>

<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>bling</div>
<div class='content'>
Looks like the same StartWith() trick is needed for Observable.Generate.<br /><br />I played around with Observable.Generate and all the expressions I came up looked pretty complicated in comparison with what I originally had.  This is mainly because I need to call OnNext() inside the AsyncCallback, so all solutions either had external Subjects or obscure ways of passing an IObserver around&#8230;<br /><br />Maybe I&#39;m overcomplicating things so if you can come up with an example it&#39;d be greatly appreciated.  I&#39;m still a Rx newbie&#8230;<br /><br />Thanks!</div>
</div>
<div class='comment'>
<div class='author'>bling</div>
<div class='content'>
Thanks!  I didn&#39;t know about that overload.<br /><br />Is there a way to make it start immediately, like the StartWith(-1) in the original expression?<br /><br />Observable.Generate(<br />   0, <br />   _ =&gt; true,<br />   _ =&gt; _,<br />   _ =&gt;<br />   {<br />     // this doesn&#39;t get called until 60 seconds passes first&#8230;<br />     return 0;<br />   }, <br />   _ =&gt; TimeSpan.FromSeconds(60));</div>
</div>
<div class='comment'>
<div class='author'>jwooley</div>
<div class='content'>
Rather than the custom Observable generator with Iterval, why not use Observable.Generate passing in a timespan of 60 seconds?</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Real-time Push App with Silverlight: Part 3]]></title>
    <link href="http://bling.github.io//blog/2011/08/28/building-real-time-push-app-with-rx-3/"/>
    <updated>2011-08-28T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2011/08/28/building-real-time-push-app-with-rx-3</id>
    <content type="html"><![CDATA[<p>In this part we’re going to fire up Expression Blend (the trial for version 5 can be found <a href="http://www.microsoft.com/download/en/details.aspx?displaylang=en&amp;amp;id=9503">here</a>) and do some UI work.</p>

<p>In part 2, I created a simple Twitter client which connected to the streaming API, and connected to the sampling request which brings back random tweets.  Here is the data template:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;DataTemplate</span> <span class="na">x:Key=</span><span class="s">&quot;TweetDataTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>    <span class="nt">&lt;Grid</span> <span class="na">DataContext=</span><span class="s">&quot;{Binding}&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>        <span class="nt">&lt;Grid.RowDefinitions&gt;</span>
</span><span class='line'>            <span class="nt">&lt;RowDefinition</span> <span class="nt">/&gt;</span>
</span><span class='line'>            <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&quot;Auto&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;/Grid.RowDefinitions&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TextBlock</span> <span class="na">FontFamily=</span><span class="s">&quot;{StaticResource FontFamily}&quot;</span> <span class="na">FontSize=</span><span class="s">&quot;12&quot;</span> <span class="na">Text=</span><span class="s">&quot;{Binding Text}&quot;</span> <span class="na">TextWrapping=</span><span class="s">&quot;Wrap&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TextBlock</span> <span class="na">Grid.Row=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                   <span class="na">HorizontalAlignment=</span><span class="s">&quot;Right&quot;</span>
</span><span class='line'>                   <span class="na">VerticalAlignment=</span><span class="s">&quot;Bottom&quot;</span>
</span><span class='line'>                   <span class="na">FontFamily=</span><span class="s">&quot;{StaticResource FontFamily}&quot;</span>
</span><span class='line'>                   <span class="na">FontSize=</span><span class="s">&quot;13.333&quot;</span>
</span><span class='line'>                   <span class="na">Foreground=</span><span class="s">&quot;BlueViolet&quot;</span>
</span><span class='line'>                   <span class="na">Text=</span><span class="s">&quot;{Binding ScreenName}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>        <span class="nt">&lt;TextBlock</span> <span class="na">Grid.Row=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                   <span class="na">HorizontalAlignment=</span><span class="s">&quot;Left&quot;</span>
</span><span class='line'>                   <span class="na">VerticalAlignment=</span><span class="s">&quot;Bottom&quot;</span>
</span><span class='line'>                   <span class="na">FontFamily=</span><span class="s">&quot;{StaticResource FontFamily}&quot;</span>
</span><span class='line'>                   <span class="na">FontSize=</span><span class="s">&quot;9.333&quot;</span>
</span><span class='line'>                   <span class="na">Foreground=</span><span class="s">&quot;DarkCyan&quot;</span>
</span><span class='line'>                   <span class="na">Text=</span><span class="s">&quot;{Binding CreatedAt}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>    <span class="nt">&lt;/Grid&gt;</span>
</span><span class='line'><span class="nt">&lt;/DataTemplate&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>This renders into something like this:</p>

<p><img src="http://lh4.ggpht.com/-ul4umD_jKFs/Tlq_U7HuoLI/AAAAAAAAAFg/pOhMiaqmxcE/s1600/image%25255B4%25255D.png" alt="img" /></p>

<p>The text is randomly generated from Blend’s <a href="http://lmgtfy.com/?q=blend+sample+data">sample</a> capability, which is totally awesome as it allows designers to see what they’re working with, and keeps the sample data separate from the real data.</p>

<p>While design is a matter of personal taste, and you’re bound to get disagreements between different people, if you follow some basic rules you’ll satisfy a greater audience.</p>

<ul>
<li>Subtle gradients and small shadows

<ul>
<li>If you take a look at all the nice interfaces, they tend to use very slight gradients and small shadows.  Most of the time you don’t even notice unless you look closely.</li>
<li>I think Microsoft’s Metro design is beautiful.  Reason?  It emphasizes text over decorations (like gradients and shadows).  This tends to lead to very clean design because there’s very little opportunity to abuse gradients and shadows.</li>
</ul>
</li>
<li>Realism and light sources

<ul>
<li>Continuing on with gradients and shadows, they should be realistic.  Look at your design from a 3D point of view.  Apply a light source from a certain angle, and then apply your shadows relative to that light source.</li>
<li>Convey distance properly

<ul>
<li>Darker shadows imply being closer to the background, whereas lighter shadows imply being further away.  Use blurring to add emphasis to the distance.  <img src="http://lh5.ggpht.com/-YvKRal5ToEw/Tlr6OrRIS4I/AAAAAAAAAFs/AAg79v6y2Cc/image_thumb%25255B14%25255D.png?imgmax=800" alt="eg" /></li>
<li>If you overlap planes you should apply these rules to each individual plane.  Don’t use the same border for everything.  Think about how it would look like in real life if you laid it out like that with pieces of paper.  The shadow sizes for that will be different, so you should do the same.</li>
<li>Also keep in mind that the shadows used above are <em>way</em> too much for any application.  Be subtle!</li>
</ul>
</li>
</ul>
</li>
<li>Consistent theme

<ul>
<li>This one seems obvious but nothing is worse than having a nice looking application bring up an unskinned dialog.</li>
</ul>
</li>
<li>Usability

<ul>
<li>If the design doesn’t serve a purpose to make it more usable, it shouldn’t be there.  Even something as simple as black on white follows this – you do that so you can read text.  However, even something as simple as that can be improved.  Take a look at why the Kindle is so successful.  The readability is better because of the lower contrast between the black and light-brown background.</li>
</ul>
</li>
</ul>


<p>With these starting points, let’s redesign the data template.</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
</pre></td><td class='code'><pre><code class='xml'><span class='line'><span class="nt">&lt;DataTemplate</span> <span class="na">x:Key=</span><span class="s">&quot;TweetDataTemplate&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>   <span class="nt">&lt;Grid&gt;</span>
</span><span class='line'>       <span class="nt">&lt;Grid.Background&gt;</span>
</span><span class='line'>           <span class="nt">&lt;LinearGradientBrush</span> <span class="na">StartPoint=</span><span class="s">&quot;0.5,0&quot;</span> <span class="na">EndPoint=</span><span class="s">&quot;0.5,1&quot;</span><span class="nt">&gt;</span>
</span><span class='line'>               <span class="nt">&lt;GradientStop</span> <span class="na">Color=</span><span class="s">&quot;#FFDADADA&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>               <span class="nt">&lt;GradientStop</span> <span class="na">Offset=</span><span class="s">&quot;1&quot;</span> <span class="na">Color=</span><span class="s">&quot;#FFC8C8C8&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>           <span class="nt">&lt;/LinearGradientBrush&gt;</span>
</span><span class='line'>       <span class="nt">&lt;/Grid.Background&gt;</span>
</span><span class='line'>       <span class="nt">&lt;Grid.RowDefinitions&gt;</span>
</span><span class='line'>           <span class="nt">&lt;RowDefinition</span> <span class="nt">/&gt;</span>
</span><span class='line'>           <span class="nt">&lt;RowDefinition</span> <span class="na">Height=</span><span class="s">&quot;Auto&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>       <span class="nt">&lt;/Grid.RowDefinitions&gt;</span>
</span><span class='line'>       <span class="nt">&lt;TextBlock</span> <span class="na">FontFamily=</span><span class="s">&quot;{StaticResource FontFamily}&quot;</span> <span class="na">FontSize=</span><span class="s">&quot;12&quot;</span> <span class="na">Text=</span><span class="s">&quot;{Binding Text}&quot;</span> <span class="na">TextWrapping=</span><span class="s">&quot;Wrap&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>       <span class="nt">&lt;TextBlock</span> <span class="na">Grid.Row=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                  <span class="na">HorizontalAlignment=</span><span class="s">&quot;Right&quot;</span>
</span><span class='line'>                  <span class="na">VerticalAlignment=</span><span class="s">&quot;Bottom&quot;</span>
</span><span class='line'>                  <span class="na">FontFamily=</span><span class="s">&quot;{StaticResource FontFamily}&quot;</span>
</span><span class='line'>                  <span class="na">FontSize=</span><span class="s">&quot;13.333&quot;</span>
</span><span class='line'>                  <span class="na">Foreground=</span><span class="s">&quot;BlueViolet&quot;</span>
</span><span class='line'>                  <span class="na">Text=</span><span class="s">&quot;{Binding ScreenName}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>       <span class="nt">&lt;TextBlock</span> <span class="na">Grid.Row=</span><span class="s">&quot;1&quot;</span>
</span><span class='line'>                  <span class="na">HorizontalAlignment=</span><span class="s">&quot;Left&quot;</span>
</span><span class='line'>                  <span class="na">VerticalAlignment=</span><span class="s">&quot;Bottom&quot;</span>
</span><span class='line'>                  <span class="na">FontFamily=</span><span class="s">&quot;{StaticResource FontFamily}&quot;</span>
</span><span class='line'>                  <span class="na">FontSize=</span><span class="s">&quot;9.333&quot;</span>
</span><span class='line'>                  <span class="na">Foreground=</span><span class="s">&quot;#FF003D8F&quot;</span>
</span><span class='line'>                  <span class="na">Text=</span><span class="s">&quot;{Binding CreatedAt}&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>       <span class="nt">&lt;Border</span> <span class="na">Grid.RowSpan=</span><span class="s">&quot;2&quot;</span> <span class="na">BorderBrush=</span><span class="s">&quot;#FF999999&quot;</span> <span class="na">BorderThickness=</span><span class="s">&quot;0,0,0,1&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>       <span class="nt">&lt;Border</span> <span class="na">Grid.RowSpan=</span><span class="s">&quot;2&quot;</span> <span class="na">BorderBrush=</span><span class="s">&quot;White&quot;</span> <span class="na">BorderThickness=</span><span class="s">&quot;0,1,0,0&quot;</span> <span class="nt">/&gt;</span>
</span><span class='line'>   <span class="nt">&lt;/Grid&gt;</span>
</span><span class='line'><span class="nt">&lt;/DataTemplate&gt;</span>
</span></code></pre></td></tr></table></div></figure>


<p>After these changes, it looks like this:</p>

<p><img src="http://lh5.ggpht.com/-fTL8wgr5ebs/Tlr6PGkqyeI/AAAAAAAAAF0/O98iakwvqGc/image_thumb%25255B17%25255D.png?imgmax=800" alt="eg" /></p>

<p>Did you notice the gradient?  You might think after seeing it here to adjust the gradients more so you can see it.  That would be a mistake.  See below.</p>

<p><img src="http://lh6.ggpht.com/--uPF_IEo6LM/Tlr6PpL9YDI/AAAAAAAAAF8/UxqCqYW3Wl4/image_thumb%25255B47%25255D.png?imgmax=800" alt="eg" /></p>

<p>The above is the exact same thing, but stacked vertically three times.  When this happens the subtle difference between the top and bottom of the control is more pronounced, so it looks like multiple panels are aligned together.</p>

<p>However, there’s still a little touch you can add.  The white and gray borders are only 1 pixel high, but that’s the little touch needed to make it look crisp.</p>

<p><img src="http://lh3.ggpht.com/-QHLW-sKfPfI/Tlr6P_c9qLI/AAAAAAAAAGE/kJ0Z8VgS3xg/image_thumb%25255B44%25255D.png?imgmax=800" alt="eg" /></p>

<p>Finally, let’s see the before and after (or eh&hellip;rather after and before, because I took the screenshot backwards :P):</p>

<p><img src="http://lh6.ggpht.com/-tzZ8AVtNv0M/Tlr6QmHJHnI/AAAAAAAAAGM/H1SYEqT6cis/image_thumb%25255B50%25255D.png?imgmax=800" alt="eg" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Building a Real-time Push App with Silverlight: Part 2]]></title>
    <link href="http://bling.github.io//blog/2011/08/27/building-real-time-push-app-with-rx-2/"/>
    <updated>2011-08-27T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2011/08/27/building-real-time-push-app-with-rx-2</id>
    <content type="html"><![CDATA[<p>Let’s review the main Rx code from last time:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="n">IObservable</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">GetJsonStreams</span><span class="p">()</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="kt">var</span> <span class="n">request</span> <span class="p">=</span> <span class="n">GetRequest</span><span class="p">();</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">FromAsyncPattern</span><span class="p">&lt;</span><span class="n">WebResponse</span><span class="p">&gt;(</span><span class="n">request</span><span class="p">.</span><span class="n">BeginGetResponse</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">EndGetResponse</span><span class="p">)()</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">wr</span> <span class="p">=&gt;</span> <span class="n">wr</span><span class="p">.</span><span class="n">GetResponseStream</span><span class="p">())</span>
</span><span class='line'>        <span class="p">.</span><span class="n">Select</span><span class="p">(</span><span class="n">str</span> <span class="p">=&gt;</span> <span class="n">Observable</span><span class="p">.</span><span class="n">FromAsyncPattern</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">[],</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;(</span><span class="n">str</span><span class="p">.</span><span class="n">BeginRead</span><span class="p">,</span> <span class="n">str</span><span class="p">.</span><span class="n">EndRead</span><span class="p">))</span>
</span><span class='line'>        <span class="p">.</span><span class="n">SelectMany</span><span class="p">(</span><span class="n">ParseJson</span><span class="p">);</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>One thing I didn’t like about this was that the web request object was created regardless of whether the Observable gets a subscription or not.  This is potentially wasted resources, and I wanted to refactor this to be completely lazy.</p>

<p>And with this I started to run into my first &ldquo;huh?&rdquo; moments with Rx: I blocked the UI thread.  How did I do that? I started down the path of exploring some more of the Rx methods, which lead me to <code>Create</code>, which lets you manually call <code>OnNext</code>.  With this train of thought, I came up with something like this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">return</span> <span class="n">Observable</span><span class="p">.</span><span class="n">Create</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;(</span><span class="n">obs</span> <span class="p">=&gt;</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">request</span> <span class="p">=</span> <span class="n">GetRequest</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">response</span> <span class="p">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">FromAsyncPattern</span><span class="p">&lt;</span><span class="n">WebResponse</span><span class="p">&gt;(</span><span class="n">request</span><span class="p">.</span><span class="n">BeginGetResponse</span><span class="p">,</span> <span class="n">request</span><span class="p">.</span><span class="n">EndGetResponse</span><span class="p">)().</span><span class="n">First</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">str</span> <span class="p">=</span> <span class="n">response</span><span class="p">.</span><span class="n">GetResponseStream</span><span class="p">();</span>
</span><span class='line'>        <span class="kt">var</span> <span class="n">reader</span> <span class="p">=</span> <span class="n">Observable</span><span class="p">.</span><span class="n">FromAsyncPattern</span><span class="p">&lt;</span><span class="kt">byte</span><span class="p">[],</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;(</span><span class="n">str</span><span class="p">.</span><span class="n">BeginRead</span><span class="p">,</span> <span class="n">str</span><span class="p">.</span><span class="n">EndRead</span><span class="p">);</span>
</span><span class='line'>        <span class="k">foreach</span> <span class="p">(</span><span class="kt">var</span> <span class="n">json</span> <span class="k">in</span> <span class="n">ParseJson</span><span class="p">(</span><span class="n">reader</span><span class="p">))</span>
</span><span class='line'>        <span class="n">obs</span><span class="p">.</span><span class="n">OnNext</span><span class="p">(</span><span class="n">json</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>        <span class="n">obs</span><span class="p">.</span><span class="n">OnCompleted</span><span class="p">();</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">str</span><span class="p">;</span>
</span><span class='line'>    <span class="p">});</span>
</span></code></pre></td></tr></table></div></figure>


<p>Great! The initialization of the web request only occurs when subscribed! And it will even dispose the stream (by returning <code>str</code>) upon unsubscription.  I ran the app and the UI thread immediately blocked.  What happened?</p>

<p>Rx has the concept of subscription and observation, and provides a way to subscribe and observe on different threads.  Here is the original code that subscribed:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">s</span><span class="p">.</span><span class="n">GetJsonStreams</span><span class="p">()</span>
</span><span class='line'>   <span class="p">.</span><span class="n">ObserveOnDispatcher</span><span class="p">()</span>
</span><span class='line'>   <span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">Text</span> <span class="p">=</span> <span class="n">x</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>Can you spot the error? I explicitly told Rx to observe on the dispatcher thread, because I want the action inside <code>Subscribe</code> to be invoked on the UI thread, but I didn’t specify where I want to set up the subscription.  Since I left it out, it uses the current thread, which happens to be the UI thread.  To solve this, it’s as simple as doing this:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="n">s</span><span class="p">.</span><span class="n">GetJsonStreams</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">SubscribeOn</span><span class="p">(</span><span class="n">Scheduler</span><span class="p">.</span><span class="n">ThreadPool</span><span class="p">)</span>
</span><span class='line'>    <span class="p">.</span><span class="n">ObserveOnDispatcher</span><span class="p">()</span>
</span><span class='line'>    <span class="p">.</span><span class="n">Subscribe</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">Text</span> <span class="p">=</span> <span class="n">x</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>That’s it! Easy! This also follows one of the most important guidelines when using Rx: <em>Subscription and Observation should be done as late as possible</em>, typically just before the <code>Subscribe</code>.  Anything more and you’ll likely make Rx spawn more threads than are necessary or some other nasty bugs.  <a href="http://en.wikipedia.org/wiki/KISS_principle">KISS</a>!</p>

<p>Now with that out of the way, let’s replace the boring TextBlock with something more usable.  First, I need to parse all the JSON streams I’m getting into bindable models.  To do that, I upgraded my StreamReader component and threw in System.Json for some basic parsing:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">TweetParser</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="kt">int</span> <span class="n">_stack</span><span class="p">;</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">StringBuilder</span> <span class="n">_sb</span> <span class="p">=</span> <span class="k">new</span> <span class="n">StringBuilder</span><span class="p">();</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Tweet</span><span class="p">&gt;</span> <span class="n">Parse</span><span class="p">(</span><span class="kt">byte</span><span class="p">[]</span> <span class="n">buffer</span><span class="p">,</span> <span class="kt">int</span> <span class="n">count</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">for</span> <span class="p">(</span><span class="kt">int</span> <span class="n">i</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span> <span class="n">i</span> <span class="p">&lt;</span> <span class="n">count</span><span class="p">;</span> <span class="n">i</span><span class="p">++)</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="kt">var</span> <span class="n">current</span> <span class="p">=</span> <span class="p">(</span><span class="kt">char</span><span class="p">)</span><span class="n">buffer</span><span class="p">[</span><span class="n">i</span><span class="p">];</span>
</span><span class='line'>            <span class="n">_sb</span><span class="p">.</span><span class="n">Append</span><span class="p">(</span><span class="n">current</span><span class="p">);</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">current</span> <span class="p">==</span> <span class="sc">&#39;{&#39;</span><span class="p">)</span> <span class="n">_stack</span><span class="p">++;</span>
</span><span class='line'>            <span class="k">else</span> <span class="nf">if</span> <span class="p">(</span><span class="n">current</span> <span class="p">==</span> <span class="sc">&#39;}&#39;</span><span class="p">)</span> <span class="n">_stack</span><span class="p">--;</span>
</span><span class='line'>
</span><span class='line'>            <span class="k">if</span> <span class="p">(</span><span class="n">_stack</span> <span class="p">==</span> <span class="m">0</span> <span class="p">&amp;</span><span class="n">_sb</span><span class="p">.</span><span class="n">Length</span> <span class="p">&gt;</span> <span class="m">0</span><span class="p">)</span>
</span><span class='line'>            <span class="p">{</span>
</span><span class='line'>                <span class="n">Tweet</span> <span class="n">tweet</span><span class="p">;</span>
</span><span class='line'>                <span class="kt">var</span> <span class="k">value</span> <span class="p">=</span> <span class="n">JsonValue</span><span class="p">.</span><span class="n">Parse</span><span class="p">(</span><span class="n">_sb</span><span class="p">.</span><span class="n">ToString</span><span class="p">());</span>
</span><span class='line'>
</span><span class='line'>                <span class="k">if</span> <span class="p">(</span><span class="k">value</span> <span class="k">is</span> <span class="n">JsonObject</span> <span class="p">&amp;</span><span class="n">Tweet</span><span class="p">.</span><span class="n">TryParse</span><span class="p">((</span><span class="n">JsonObject</span><span class="p">)</span><span class="k">value</span><span class="p">,</span> <span class="k">out</span> <span class="n">tweet</span><span class="p">))</span>
</span><span class='line'>                    <span class="k">yield</span> <span class="k">return</span> <span class="n">tweet</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>                <span class="n">_sb</span><span class="p">.</span><span class="n">Clear</span><span class="p">();</span>
</span><span class='line'>            <span class="p">}</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>Nothing overly complicated.  Next, the Tweet object:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
</pre></td><td class='code'><pre><code class='csharp'><span class='line'><span class="k">public</span> <span class="k">class</span> <span class="nc">Tweet</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">private</span> <span class="k">readonly</span> <span class="n">JsonObject</span> <span class="n">_json</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">bool</span> <span class="nf">TryParse</span><span class="p">(</span><span class="n">JsonObject</span> <span class="k">value</span><span class="p">,</span> <span class="k">out</span> <span class="n">Tweet</span> <span class="n">tweet</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">if</span> <span class="p">(</span><span class="k">value</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="s">&quot;text&quot;</span><span class="p">)</span> <span class="p">&amp;</span><span class="k">value</span><span class="p">.</span><span class="n">ContainsKey</span><span class="p">(</span><span class="s">&quot;user&quot;</span><span class="p">))</span>
</span><span class='line'>        <span class="p">{</span>
</span><span class='line'>            <span class="n">tweet</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Tweet</span><span class="p">(</span><span class="k">value</span><span class="p">);</span>
</span><span class='line'>            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
</span><span class='line'>        <span class="p">}</span>
</span><span class='line'>        <span class="n">tweet</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
</span><span class='line'>        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">private</span> <span class="nf">Tweet</span><span class="p">(</span><span class="n">JsonObject</span> <span class="n">json</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="n">_json</span> <span class="p">=</span> <span class="n">json</span><span class="p">;</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">Text</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_json</span><span class="p">[</span><span class="s">&quot;text&quot;</span><span class="p">].</span><span class="n">ToValueString</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>
</span><span class='line'>    <span class="k">public</span> <span class="kt">string</span> <span class="n">ScreenName</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">_json</span><span class="p">[</span><span class="s">&quot;user&quot;</span><span class="p">][</span><span class="s">&quot;screen_name&quot;</span><span class="p">].</span><span class="n">ToValueString</span><span class="p">();</span> <span class="p">}</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span><span class='line'>
</span><span class='line'><span class="k">internal</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">TweetEx</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">ToValueString</span><span class="p">(</span><span class="k">this</span> <span class="n">JsonValue</span> <span class="n">s</span><span class="p">)</span>
</span><span class='line'>    <span class="p">{</span>
</span><span class='line'>        <span class="k">return</span> <span class="n">s</span><span class="p">.</span><span class="n">ToString</span><span class="p">().</span><span class="n">Trim</span><span class="p">(</span><span class="sc">&#39;&quot;&#39;</span><span class="p">);</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>To keep things simple I’m only extracting the screen name and text.  I won’t bore you setting up the views since it’s just simple ListBox bound to an <code>ObservableCollection&lt;Tweet&gt;</code>, and a DataTemplate for Tweet.  When it’s all said and done, we see something like this:</p>

<p><img src="http://lh3.ggpht.com/-sVzoQRx_V2s/TlqFswXVhUI/AAAAAAAAAFc/d9nLfBSrARA/image_thumb3.png?imgmax=800" alt="img" /></p>

<p>Performance is still good at 2-5% CPU, even though we’re scrolling through 1000 items in near real-time.</p>

<p>Stay tuned for part 3, when we introduce Expression Blend and go into basics of UI design.  Also, most of this will hit GitHub very soon.</p>
]]></content>
  </entry>
  
</feed>
