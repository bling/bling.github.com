<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: vim | bling on software development]]></title>
  <link href="http://bling.github.io//blog/categories/vim/atom.xml" rel="self"/>
  <link href="http://bling.github.io//"/>
  <updated>2013-08-20T18:35:42+00:00</updated>
  <id>http://bling.github.io//</id>
  <author>
    <name><![CDATA[Bailey Ling]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Modularizing VimScript]]></title>
    <link href="http://bling.github.io//blog/2013/08/16/modularizing-vimscript/"/>
    <updated>2013-08-16T20:22:00+00:00</updated>
    <id>http://bling.github.io//blog/2013/08/16/modularizing-vimscript</id>
    <content type="html"><![CDATA[<h1>The prerequisites</h1>

<p>First off, there are two very good resources that are required reading in addition to what&rsquo;s provided in the official documentation.  Steve Losh&rsquo;s <a href="http://learnvimscriptthehardway.stevelosh.com/">Learn Vim the Hard Way</a> is an excellent book and I highly recommend it.  The <a href="http://www.ibm.com/developerworks/library/l-vim-script-1/">IBM Series</a> by Dr. Damian Conway is another great resource.  Without these I would not have been able to do what I have achieved, so thanks to them!</p>

<h1>Where I started</h1>

<p>When I first wrote <a href="https://github.com/bling/vim-bufferline">vim-bufferline</a> and <a href="https://github.com/bling/vim-airline">vim-airline</a> I was very much a newbie Vim scripter and I tried to follow as many existing patterns as possible.  It was evident that the community at large had a very &ldquo;C-like&rdquo; mentality, in that most things were done with functions declared in the global scope (I don&rsquo;t know if this still holds true for modern C development, but as an expression I think people will get what I&rsquo;m saying).  Many of the older scripts (pre GitHub) tended to be large, single file plugins which lived under the <code>plugin</code> folder.  For example, <a href="http://www.vim.org/scripts/script.php?script_id=2438">EasyGrep</a> is a 3000+ line plugin that helps you search and replace in Vim.</p>

<!-- more -->


<p>Most tutorials also taught writing functions in this fashion (most likely due to simplicity).  For example, this is from <a href="http://www.ibm.com/developerworks/library/l-vim-script-1/">part 1</a> of the IBM developer series:</p>

<p>``` vim
function! ToggleSyntax()
   if exists(&ldquo;g:syntax_on&rdquo;)</p>

<pre><code>  syntax off
</code></pre>

<p>   else</p>

<pre><code>  syntax enable
</code></pre>

<p>   endif
endfunction
nmap <silent> ;s :call ToggleSyntax()<CR>
```</p>

<p>We all have to start somewhere, but what I found was that these patterns and practices followed beyond their original intention and into plugins.</p>

<p>I think part of the problem is that Vim has a very unique scoping system, in that you can scope variables to a script, window, or buffer, for example.  People ended up using this as a form of encapsulation:</p>

<p>`&ldquo; vim
let s:text = &rdquo;</p>

<p>function! s:somefile#set_text(val)
  let s:text = a:val
endfunction</p>

<p>function! g:somefile#get_text()
  return s:text
endfunction
```</p>

<p>The <code>g:</code> variables are your exposed public API, and the <code>s:</code> variables are private.  That&rsquo;s all good, but <em>everything is still global!</em></p>

<h1>Where I am now</h1>

<p>There is nothing particular wrong with the approach of using global variables and functions.  Many complex software systems have been designed this way with much success, and often times, they perform much faster than counterparts with &ldquo;objects&rdquo; and &ldquo;polymorphism&rdquo;.</p>

<p>Nonetheless, everything has pros and cons, and the cost of maintenance goes up when you have a bunch of global variables interacting with each other.</p>

<p>The more VimScript I wrote the more I sought for a way to manage complexity and splitting up my code into smaller, manageable pieces.</p>

<h1>Modularizing VimScript</h1>

<p>Let&rsquo;s take a look at how we can create an object that is transient, has state, and contains methods you can invoke, like any modern OOP language can do.</p>

<p>``` vim
function! myobject#new()
  let obj = {}
  let obj._cats = []</p>

<p>  function! obj.add_cat()</p>

<pre><code>call add(self._cats, '(^.^)')
</code></pre>

<p>  endfunction</p>

<p>  function! obj.meow()</p>

<pre><code>for cat in self._cats
  echo cat
endfor
</code></pre>

<p>  endfunction</p>

<p>  return obj
endfunction</p>

<p>&ldquo; somewhere else
let x = myobject#new()
call x.add_cat()
call x.meow()
```</p>

<p>This might look familiar to some of you.  Yes, it&rsquo;s almost the same as the <a href="https://www.google.com/search?q=javascript+module+pattern">JavaScript Module Pattern</a>.  Unfortunately, closures are not supported, but otherwise all of the usual benefits apply here, mainly controlled visibility into private state <strong>and</strong> <strong><em>transience!</em></strong></p>

<p>You can even take this concept further and replicate &ldquo;static&rdquo; functions:</p>

<p>``` vim
function! s:object#private_static()
endfunction</p>

<p>function! g:object#public_static()
endfunction</p>

<p>function! g:object#new()
  let obj = {}</p>

<p>  function! obj.public()
  endfunction</p>

<p>  function! obj._private()
  endfunction</p>

<p>  return obj
endfunction
```</p>

<p>Yep, same story as JavaScript here &mdash; <code>_</code> variables/functions are &ldquo;private&rdquo;.</p>

<h1>Where from here?</h1>

<p>Does this mean we should throw out procedural programming and go full on object oriented?  Hell no.  <a href="http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/aop/framework/AbstractSingletonProxyFactoryBean.html">This</a> is what happens when you go too far!  But we should always take a look at what we&rsquo;re doing and use the best tool and technique for the job.  Sometimes that&rsquo;s procedural, other times it&rsquo;s object-oriented.  It pays to be flexible.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1000 stars in 1 month]]></title>
    <link href="http://bling.github.io//blog/2013/07/30/1000-stars-in-1-month/"/>
    <updated>2013-07-30T21:26:00+00:00</updated>
    <id>http://bling.github.io//blog/2013/07/30/1000-stars-in-1-month</id>
    <content type="html"><![CDATA[<h1>1000 stars in 1 month</h1>

<p>One month ago I pushed the first <a href="https://github.com/bling/vim-airline/commit/25b9d4d48bd8c0a3daf3859998825e2e55562f70">commit</a> of my plugin <a href="https://github.com/bling/vim-airline">vim-airline</a>.</p>

<p>Two weeks later I wrote a blog <a href="http://bling.github.io/blog/2013/07/15/flight-of-an-open-source-project/">post</a> about the experience.  By that time the plugin gained over 700 stars.</p>

<p>Two more weeks later, today the project has over 1000 stars.  Here are some other numbers:</p>

<ul>
<li>35 merged pull requests</li>
<li>8 contributed airline themes</li>
<li>4 contributed ctrlp themes</li>
<li>23 total contributors</li>
<li>15 plugins integrated</li>
</ul>


<p>Wow!  That is all I can say&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Smart tab expansions in Vim with expression mappings]]></title>
    <link href="http://bling.github.io//blog/2013/07/21/smart-tab-expansions-in-vim-with-expression-mappings/"/>
    <updated>2013-07-21T20:38:00+00:00</updated>
    <id>http://bling.github.io//blog/2013/07/21/smart-tab-expansions-in-vim-with-expression-mappings</id>
    <content type="html"><![CDATA[<p>I&rsquo;ve been having a small itch for a while now, and it&rsquo;s a very simple thing &mdash; I want to make my tab smarter.  This all starts with a dive into <a href="http://www.emmet.io">Emmet</a>.  To understand what it is, here&rsquo;s a quick introduction.  First, you type something using its syntax:</p>

<p><code>
div&gt;li*4
</code></p>

<p>and after you &ldquo;expand&rdquo; it, usually with a hotkey, and it gets converted to</p>

<p>``` html</p>

<div>
  <li></li>
  <li></li>
  <li></li>
  <li></li>
</div>


<p>```</p>

<p>As you can imagine, this saves you <em>a lot</em> of typing and lets you prototype a web page (or CSS) in no time once you learn the syntax.  It is snippets on steriods!  The Sublime <a href="https://github.com/sergeche/emmet-sublime">plugin</a> handles this perfectly.  It maps <code>&lt;tab&gt;</code> as the expansion key.  Hitting tab after typing <code>div&gt;li*4</code> will expand it and put the cursor at the first <code>&lt;li&gt;|&lt;/li&gt;</code>.  Then after you type something, if you hit <code>&lt;tab&gt;</code> again, it will jump to the next <code>li</code>.  It is smart enough to know whether to expand or jump to the next tag.</p>

<p>So how does this functionality look like in Vim?  <!--more-->First, you must install the <a href="https://github.com/mattn/zencoding-vim">zencoding-vim</a> plugin to get this functionality (Emmet used to be named Zen Coding).  However, by default it&rsquo;s mappings are <code>&lt;C-y&gt;,</code> to expand, and <code>&lt;C-y&gt;n</code> to jump to the next tag.  There are two problems here.  First, these mappings are <strong>really</strong> awkward to type.  And secondly, there are two mappings!  You could, of course, remap it do something else, but let&rsquo;s be honest, <code>&lt;leader&gt;</code> whatever just does not compare with <code>&lt;tab&gt;</code>.</p>

<p>How can we replicate this functionality in Vim?</p>

<h1>Expression Mappings</h1>

<p>Most of the time, you will see people do mappings in Vim like <code>nnoremap j gj</code> which is a very simple and straightforward mapping.  Other times you may see something like <code>nnoremap Q :call CloseWindow()&lt;cr&gt;</code> where a key is mapped to a function.  But rarely will you see anyone use <code>&lt;expr&gt;</code> mappings.  What are these?  Long story short, you can determine what to map based on the return value of the function.  To replicate the above tab behavior, let&rsquo;s first set up a basic mapping:</p>

<p><code>vim
function! s:zen_html_tab()
  return "\&lt;c-y&gt;,"
endfunction
autocmd FileType html imap &lt;buffer&gt;&lt;expr&gt;&lt;tab&gt; &lt;sid&gt;zen_html_tab()
</code></p>

<p>There&rsquo;s a lot of things going on here, so I&rsquo;ll go over them one by one.</p>

<ul>
<li><code>s:</code> denotes that the function is scoped to the script.  You can, of course, define the function globally (must be PascalCased or script#prefixed), but I prefer not to pollute the global scope if I don&rsquo;t have to.  The return value is an escaped string which are the keys you want to map.  An additional thing to note is that you need <code>&lt;sid&gt;</code> to reference the function in the mapping.</li>
<li>The FileType autocmd is used to set up the mapping only for HTML files.</li>
<li><code>&lt;buffer&gt;</code> denotes that the mapping should only apply for the current buffer (without this when you open an HTML file it will apply the mapping globally).</li>
<li><code>&lt;expr&gt;</code> is the special sauce that lets you to execute code to determine the value of the mapping.</li>
</ul>


<p>OK, the above doesn&rsquo;t actually do anything yet.  In fact, it&rsquo;s pretty much equivalent to <code>imap &lt;tab&gt; &lt;c-y&gt;,</code>.  So let&rsquo;s add some context into it:</p>

<p>``` vim
function! s:zen_html_tab()
  let line = getline(&lsquo;.&rsquo;)
  if match(line, &lsquo;&lt;.*>&rsquo;) >= 0</p>

<pre><code>return "\&lt;c-y&gt;n"
</code></pre>

<p>  endif
  return &ldquo;&lt;c-y>,&rdquo;
endfunction
```</p>

<p>This is a simple implementation that captures the majority of use cases.  <code>getline('.')</code> gets the current line under the cursor.  <code>match()</code> is a built-in function which returns the index of the matched regular expression.  I am relying on the fact that Emmet syntax will <em>not</em> have an opening &lt;.  This makes the function very simple; if there&rsquo;s an &lt;> then jump to the next tag, otherwise, expand.</p>

<p>And that&rsquo;s all there is to it!  This function won&rsquo;t cover more &ldquo;advanced&rdquo; scenarios like nested expansions (although you could cheat by creating a newline), but otherwise it shows that expression mappings are an easy way to get more umph from your mappings.</p>

<p>For more details, contact your local Vim department by calling <code>:help map-&lt;expr&gt;</code>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The flight of an open-source project]]></title>
    <link href="http://bling.github.io//blog/2013/07/15/flight-of-an-open-source-project/"/>
    <updated>2013-07-15T10:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2013/07/15/flight-of-an-open-source-project</id>
    <content type="html"><![CDATA[<h1>Welcome aboard!</h1>

<p>Those were the words that a flight attendant said to me as a boarded a plane to visit Paris for a summer vacation of wine and cheese.  It was a long flight; about 8 hours.  This particular plane was older and didn&rsquo;t have the personal TVs installed yet.  What this meant was I didn&rsquo;t have any movies to distract me from working on a pet project I had going on.  This little project was a single vim file in my vimrc.</p>

<!--more-->


<h1>That color thing</h1>

<p>I was a huge fan of the original <a href="https://github.com/Lokaltog/vim-powerline">vim-powerline</a> project.  Even though it was purely cosmetic and didn&rsquo;t really add value (compared other plugins like <a href="https://github.com/tpope/vim-surround">vim-surround</a> where a productivity increase was measurable), I still considered it one of the most important plugins in my arsenal because I like things to look pretty.  I choose colorschemes with a lot of prejudice.  And I choose my font carefully as well (I&rsquo;m currently using Ubuntu Mono as the preferred choice).  As developers we stare at a text editor the majority of our time, and if I can make that experience a little more enjoyable then that&rsquo;s a good enough reason for me!</p>

<h1>Prologue</h1>

<p>If vim-powerline was already so good, why bother writing a replacement?  The biggest reason why I bothered was powerline <a href="https://github.com/Lokaltog/powerline">v2</a>.  This was the python rewrite of powerline which unified the codebase so that it could be used outside of vim, such as in bash, zsh, and tmux.  And just like that, vim-powerline was deprecated.</p>

<p>I was one of the early adopters because I like to use bleeding edge software.  I compile my vim to the latest tip, my preferred Linux distribution is <a href="http://www.archlinux.org">ArchLinux</a> (a rolling release distribution), and all my browsers are beta (sometimes alpha).</p>

<p>Early versions of powerline were very buggy for me to the point where I couldn&rsquo;t use it and had to fall back to vim-powerline.  It also lost a lot of features in the process, like integration with third party plugins like ctrlp and tagbar.  And lastly, installation made it very difficult to get working consistently across all operating systems.  And even within an OS, you would run into problems, e.g. system python vs homebrew python on OSX, or python3 being the default on Arch.  Ironically, I found installing on Windows the easiest of them all.</p>

<p>I started looking for alternatives and found <a href="https://github.com/molok/vim-smartusline">smartusline</a>, which is a simple statusline plugin which changes colors like powerline.  I used it for a while, but eventually I felt a strong yearning for a nicer looking statusline.  Honestly, I didn&rsquo;t have a good reason not to use vim-powerline other than the fact that it was &ldquo;old&rdquo;.  But powerline v2 wasn&rsquo;t ready yet either.  And with that I had enough of an excuse to spend my hacking hours writing statuslines.</p>

<h1>:help statusline</h1>

<p>The first working version I had was <a href="https://github.com/bling/dotvim/blob/c39021c45289d11e515bd08c1f4a976f7ba4352e/plugin/statusline.vim">65 lines</a> of code.  It was not configurable and everything was hardcoded, but it served my needs and worked pretty well.  Over time I tweaked it slowly, making small changes here and there, changing colors, and eventually using powerline font symbols.  And then I thought, wait a minute, maybe someone else might find this useful!  So on that airplane ride I decided to create a plugin out of it and share it with the community.</p>

<p><a href="https://github.com/bling/vim-airline">vim-airline</a> was born.</p>

<p>I published a link to the <a href="http://www.reddit.com/r/vim/comments/1hfbfz/vimairline_a_lightweight_statusline_light_as_air/">vim subreddit</a> and it was well received.  I got a boost to 100 stars on GitHub in a day.  Cool!  People like what I built!</p>

<h1>The first pull request</h1>

<p>The first pull request was to fix a spelling mistake where I used sep<strong>e</strong>rator instead of sep<strong>a</strong>rator.  It was also the first time I saw the big green &ldquo;Merge Pull Request&rdquo; button on GitHub.  And let me tell you that entire process is nothing short of amazing.  It is so damn easy to collaborate I wish I had this at work.</p>

<p>And then issues started coming in; bugs and feature requests.  More pull requests were submitted, some to fix bugs, others to fix performance problems.  I had my little open source project going and it was so much fun!  And people were open to suggestions, code reviews, and just generally very receptive to discussion.  It was awesome!</p>

<p>I continued working on the plugin to add theming support, and once I finished I posted it to <a href="https://news.ycombinator.com/item?id=6002518">HackerNews</a>.</p>

<h1>A lesson in marketing</h1>

<p>It sounds obvious now after the fact, but I didn&rsquo;t really realize what a big difference marketing makes.  Last year I made a relatively significant contribution to the WPF world &mdash; I added <a href="http://bling.github.io/blog/2012/07/01/snoopshell-marriage-of-snoop-wpf-and/">PowerShell to Snoop</a>.  Snoop is a staple tool for any WPF developer, and for my work to be accepted and merged into the main product was really quite something.  After many retweets, my fork acquired a whopping 6 stars.  The reason?  My target audience was C# developers who did WPF, <em>and</em> who used PowerShell.  It was tiny market!</p>

<p>vim-airline is different.  The market is all terminal users, which is a <strong>huge</strong> market.  It didn&rsquo;t matter if you were doing sysadmin work scripting the shell or developing a website in JavaScript or deploying a distributed cluster using Ruby.  Somebody would be using vim, and furthormore, because airline was written in 100% VimScript it worked for everyone.</p>

<p>After I posted it to HackerNews, momentum <strong><em>really</em></strong> picked up and a flood of bugs and feature requests came in.  A lot of people also starting writing themes for it, which validated my claim that it was easy to do.  The project gained another 200-300 stars overnight.</p>

<h1>Murphy&rsquo;s Law</h1>

<p>Last Tuesday night, vim-airline became the default in the <a href="http://vim.spf13.com/">spf13</a> distribution, which is one of the most popular distributions out there.  On that same night, I <a href="https://github.com/bling/vim-airline/commit/c0427e435d2eb2170517438ddd4f0b5fa7a8b691">pushed</a> a change to improve the extendability of the plugin.  It was the last thing I did that night and I went to bed shortly after.  Everything that could go wrong, went wrong &mdash; I woke up to a flurry of emails about it breaking in the most <a href="https://github.com/bling/vim-airline/issues/49">catastrophic</a> <a href="https://github.com/bling/vim-airline/issues/45">way</a> <a href="https://github.com/spf13/spf13-vim/issues/397">possible</a>.  I jumped from my bed to the computer in record time to revert that change.  After a lot of (manual) investigation, I narrowed it down to the exact <a href="https://code.google.com/p/vim/source/detail?r=66e615ce7f61948a2a4a8615d703a42d56763490&amp;name=v7-3-1058">patch</a> (1058) in Vim that affected my code.  That&rsquo;s what I get for using bleeding edge software&hellip;</p>

<p>Since this incident I&rsquo;ve been testing with Vim 7.2 prior to pushing any code changes to the core.</p>

<h1>Destination to be determined&hellip;</h1>

<p>Popularity continued to grow, and as of now, after being live for only 2 weeks, the project has 772 stars, 36 forks, and 15 contributors.  6 themes have been contributed.</p>

<p>It&rsquo;s hard to describe the feeling I&rsquo;m having &mdash; I guess I&rsquo;m just really thrilled to have so many people take interest in something I built.  I had no idea it would be this popular, and now I&rsquo;m just trying to keep up with the issues.</p>

<p>The community aspect of open source is incredible.  I don&rsquo;t know where the project will go from here, but for the time being, I&rsquo;m going to sit back, relax, and enjoy the flight.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unite.vim, The plugin you didn't know you need]]></title>
    <link href="http://bling.github.io//blog/2013/06/02/unite-dot-vim-the-plugin-you-didnt-know-you-need/"/>
    <updated>2013-06-02T19:34:00+00:00</updated>
    <id>http://bling.github.io//blog/2013/06/02/unite-dot-vim-the-plugin-you-didnt-know-you-need</id>
    <content type="html"><![CDATA[<h1><a href="https://github.com/Shougo/unite.vim">Unite.vim</a></h1>

<p>What is this?  If you&rsquo;ve never heard of this Vim plugin, then this post is for you.  This is one of those hidden gems in the Vim plugin world that is truly life changing.  I think this plugin is so awesome that I&rsquo;ve decided to write a post dedicated to it so that more people know about it.</p>

<p>The plugin is written by <a href="https://github.com/Shougo">Shougo Matsushita</a>.  He has written a lot of other popular plugins, notably <a href="https://github.com/Shougo/neocomplcache.vim">neocomplcache</a> and <a href="https://github.com/Shougo/vimshell.vim">vimshell</a>.  I use a lot of his plugins, so I started to notice when certain plugins started using Unite as a dependency, like <a href="https://github.com/Shougo/neobundle.vim">neobundle</a> and <a href="https://github.com/Shougo/vimfiler.vim">vimfiler</a>.</p>

<p>At first it looked like Unite was just a general purpose library, but I was in for a surprise because it is so much more than that.</p>

<!--more-->


<h1>What is it?</h1>

<p>This is the problem I had initially.  The project <a href="https://github.com/Shougo/unite.vim">homepage</a> describes it as &ldquo;&hellip;can search and display information from arbitrary sources like files, buffers, recently used files or registers.&rdquo;  It goes on to show some usage samples, but there is no &ldquo;wow&rdquo; factor.  After reading the readme I still didn&rsquo;t have a clue what the plugin could do.</p>

<p>(edit: After I wrote blog post, Unite&rsquo;s homepage has been dramatically improved with screenshots, animated gifs, and even a kickass logo.  It definitely has a lot of &ldquo;wow&rdquo; now.)</p>

<p>It wasn&rsquo;t until I stumbled upon terryma&rsquo;s <a href="https://github.com/terryma/dotfiles/blob/master/.vimrc">vimrc</a> (the author of <a href="https://github.com/terryma/vim-multiple-cursors">multiple-cursors</a> and realized that he replaced <a href="https://github.com/kien/ctrlp.vim">ctrlp</a> entirely with unite).  ctrlp is by far one of the best/most popular plugins and for it to be replacable is no easy feat.</p>

<p>So how do you do it?</p>

<h1>First things first, configuration</h1>

<p>Unite is geared towards experienced vim users &mdash; it does not create any bindings by default.  To make any use of it, you will need to create the bindings yourself.  And in certain cases, rather than declaring <code>g:variables</code>, you configure it with method calls, like <code>unite#filters#matcher_default#use(['matcher_fuzzy'])</code>, but thankfully, like all of Shougo&rsquo;s plugins, the plugin is <em>very</em> well documented, so feel free to <code>:help unite</code> to figure out how to use the plugin.</p>

<p>If you&rsquo;re lazy, you can go directly to my <a href="https://github.com/bling/dotvim">vim distribution</a> and take the configuration out of there.</p>

<p>But enough talking, here&rsquo;s some quick demos of what Unite can do&hellip;</p>

<h1>What can it do?</h1>

<h2>File searching like <a href="https://github.com/kien/ctrlp.vim">ctrlp.vim</a></h2>

<p><code>
nnoremap &lt;C-p&gt; :Unite file_rec/async&lt;cr&gt;
</code></p>

<p><img class="center" src="/images/unite-ctrlp.gif"></p>

<p>Did you notice the async flag?  Unite uses <a href="https://github.com/Shougo/vimproc.vim">vimproc</a> behind the scenes, which affords for searching while it populates the file list in the background.  That is amazing!</p>

<h2>Content searching like <a href="https://github.com/mileszs/ack.vim">ack.vim</a> (or <a href="https://github.com/rking/ag.vim">ag.vim</a>)</h2>

<p><code>
nnoremap &lt;space&gt;/ :Unite grep:.&lt;cr&gt;
</code></p>

<p><img class="center" src="/images/unite-grep.gif"></p>

<p>Unite can be configured to use <code>grep</code>, <code>ack</code>, or <code>ag</code>; whichever is available.</p>

<h2>Yank history like <a href="https://github.com/vim-scripts/YankRing.vim">yankring</a>/<a href="https://github.com/maxbrunsfeld/vim-yankstack">yankstack</a></h2>

<p><code>
let g:unite_source_history_yank_enable = 1
nnoremap &lt;space&gt;y :Unite history/yank&lt;cr&gt;
</code></p>

<p><img class="center" src="/images/unite-yanks.gif"></p>

<p>To be fair, unite cannot bind to a key to cycle the history, so it&rsquo;s not a 100% replacement.  However, if you only rarely use the yankring then this is a pretty good alternative.</p>

<h2>Buffer switching like <a href="https://github.com/sjbach/lusty">LustyJuggler</a></h2>

<p><code>
nnoremap &lt;space&gt;s :Unite -quick-match buffer&lt;cr&gt;
</code></p>

<p><img class="center" src="/images/unite-juggle.gif"></p>

<p>Notice that <code>-quick-match</code> is just a flag, which means you can apply this to any source.</p>

<h2>Bonus</h2>

<p>Ever been jealous of Sublime&rsquo;s auto preview feature?  Well, turns out unite has an <code>-auto-preview</code> flag that you can add.</p>

<h1>Finale</h1>

<p>And that&rsquo;s all I got for now.  I&rsquo;m still learning more about what this plugin can do, but it&rsquo;s definitely earned its place in my vim toolbox.</p>
]]></content>
  </entry>
  
</feed>
