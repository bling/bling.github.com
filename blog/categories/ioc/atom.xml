<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ioc | bling on software development]]></title>
  <link href="http://bling.github.io/blog/categories/ioc/atom.xml" rel="self"/>
  <link href="http://bling.github.io/"/>
  <updated>2013-10-27T22:16:15+00:00</updated>
  <id>http://bling.github.io/</id>
  <author>
    <name><![CDATA[Bailey Ling]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Thoughts on MEF]]></title>
    <link href="http://bling.github.io/blog/2011/10/31/my-thoughts-on-mef/"/>
    <updated>2011-10-31T00:00:00+00:00</updated>
    <id>http://bling.github.io/blog/2011/10/31/my-thoughts-on-mef</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Ever since MEF was conceived, despite the authors saying that it is <strong>not<em> </em></strong>an IoC container, it has since evolved to become one of the more popular IoC containers.&nbsp; I’ve always avoided it because I disagree with using attributes, and I’ve had no reason to use it over Autofac or Windsor.</p> <p>Recently, I found a reason to use it – Metro-style applications only support MEF so far.&nbsp; My Twitter client ping.pong uses Autofac as the IoC container.&nbsp; It uses some very basic functionality like factories and hooks.&nbsp; To my surprise, MEF has no support for either of these.</p> <p>Coming across these limitations solidifies my opinion that MEF is a plugin container, not an IoC container.</p> <p>First let’s take a look at automated factories. What I mean is that by registering Foo, like so:</p> <div id="codeSnippetWrapper"> <div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px">container.RegisterType&lt;Foo&gt;();</pre><!--CRLF--></div></div>
<p>the container will automatically provide us a Func&lt;Foo&gt; without explicitly having to register it. This can be useful when you want to create an instance of Foo some time in the future rather than at constructor time.&nbsp; You can do this with MEF via an ExportFactory&lt;T&gt;, but it’s limited because you cannot override dependencies at resolve time.</p>
<p>For example, let’s say Foo has a constructor of Foo(Bar1, Bar2, Bar3). With MEF, you have no control at resolution time what the Bars are. A container that has support for automated factories (like Autofac and Castle Windsor), will let you resolve a Func&lt;Bar1, Foo&gt;, which lets you override Bar1 at resolve time. Similarly, you can resolve a Func&lt;Bar1, Bar2, Bar3, Foo&gt; and override all dependencies. Any dependencies not overridden fall back to their configuration in the bootstrapper. This is a <em>very</em> useful feature, and coupled with the scoping features for automatic disposal it opens up many doors for elegant solutions for what otherwise are complicated problems.</p>
<p>On to the second point; MEF has limited extension points. This one sounds odd since MEF is all about designing decoupled plugins so surely it should have extension points! The problem here is that MEF is designed as an explicit API (attributes are required) rather than an implicit API. In Autofac, you can scan an assembly and register every type. In MEF, every class needs to have an [Export] on it.&nbsp; It also baffles my mind why [ImportingConstructor] is required even when there’s only one constructor. All this explicitness means you lose a bunch of “free” extension points that typical IoC containers have, like this:</p>
<div id="codeSnippetWrapper">
<div style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px" id="codeSnippet"><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: white; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px">b.RegisterAssemblyTypes(GetType().Assembly)</pre><!--CRLF--><pre style="border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; background-color: #f4f4f4; margin: 0em; border-left-style: none; padding-left: 0px; width: 100%; padding-right: 0px; font-family: 'Courier New', courier, monospace; direction: ltr; border-top-style: none; color: black; border-right-style: none; font-size: 8pt; overflow: visible; padding-top: 0px">  .OnActivated(x =&gt; x.Context.Resolve&lt;IEventAggregator&gt;().Subscribe(x.Instance));</pre><!--CRLF--></div></div>
<p>What the code above is saying that every time <em>any</em> component is activated, it will subscribe to the event aggregator. If the component doesn’t IHandle&lt;&gt; any messages, it’s a no-op and continues on. If the instance does IHandle&lt;&gt; messages, this will ensure it’s hooked up.</p>
<p>The closest thing I could find in MEF was IPartImportsSatisfiedNotification (yes, an interface, more explicitness!).&nbsp; It contains a single method OnImportsSatisfied() which gets called when the part is created.&nbsp; Needless to say, the one line of code from Autofac would translate into a method for every implementation of IHandle&lt;&gt;, and since OnImportsSatisfied() contains no contextual information, every component will need IEventAggregator injected just to be able to call Subscribe.</p>
<p>To fully complete this example, Autofac has the following methods when registering a component: <em>OnRegistered, OnPreparing, OnActivating, OnActivated, </em>and<em> OnRelease</em>.&nbsp; Each of these methods gives you complete contextual information at the time it is called like access to the current scope of the container, the instance (if applicable), which component which requested the dependency, etc.&nbsp; This makes it almost too easy to extend the container.</p>
<p>For MEF, the only real extension point is an ExportProvider.&nbsp; It is pretty low level (all it does is parse attributes for you) so to write anything similar for MEF requires a lot more code.&nbsp; To further illustrate this point, compare the interception modules from AutofacContrib and MefContrib.&nbsp; The Autofac implementation is a single file with a couple extension methods.&nbsp; The MEF implementation is an entire namespace, over multiple classes, not the mention that it also relies on other infrastructure code in MefContrib.&nbsp; Basically, the guys that wrote MefContrib had to write a mini-container within MEF.</p>
<p>MEF is great for building <em><strong>extremely</strong> loosely coupled </em>applications.&nbsp; I don’t think it has any business in an application where you know and own all of the dependencies; there are simply better libraries for that.</p>  </div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>bling</div>
<div class='content'>
Thanks for the reply Nick!<br /><br />I have yet to check out all the new MEF features of 4.5, but it definitely looks very interesting with what&#39;s happening in the previews.<br /><br />The new RegistrationBuilder looks pretty good, especially since attributes are optional now, but that only solves wiring up the application.<br /><br />IMO, the most useful (and powerful) thing you can add is the equivalent of Autofac&#39;s IComponentContext -- something that will let you easily hook into any part of the resolution chain from creation to disposal.<br /><br />Once that&#39;s in it&#39;ll be much easier to extend the container and use it for more &quot;advanced&quot; scenarios --and with less code.<br /><br />Cheers,<br />Bailey</div>
</div>
<div class='comment'>
<div class='author'>Nick</div>
<div class='content'>
Hi Bailey! Nice thoughtful article - I have a foot in both camps, so I&#39;m glad that the Autofac extension points work for you, but I&#39;m also keen to close some of the gaps on the MEF side :)<br /><br />I am curious, have you had a chance to look at RegistrationBuilder, being delivered in the .NET 4.5 version of MEF? It opens up the possibility for us to support activation events like the ones you mention, although it doesn&#39;t as of writing.<br /><br />In case you didn&#39;t catch it, the release announcement is at: http://blogs.msdn.com/b/bclteam/archive/2011/10/27/what-s-new-in-mef-version-2-preview-4.aspx<br /><br />Thanks for writing this up anyway, it will give us something to think about.<br /><br />Regards,<br />Nick</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Contextual Lifestyle with Castle Windsor]]></title>
    <link href="http://bling.github.io/blog/2010/05/14/contextual-lifestyle-with-castle/"/>
    <updated>2010-05-14T00:00:00+00:00</updated>
    <id>http://bling.github.io/blog/2010/05/14/contextual-lifestyle-with-castle</id>
    <content type="html"><![CDATA[<div class='post'>
<b>EDIT:</b>&nbsp;As of version 3, scoped lifestyles are now a first class citizen supported out of the box (<a href="http://docs.castleproject.org/Windsor.Whats-New-In-Windsor-3.ashx">http://docs.castleproject.org/Windsor.Whats-New-In-Windsor-3.ashx</a>)<br />
<strong>EDIT:</strong> A much better implementation can be found at <a href="https://github.com/castleprojectcontrib/Castle.Windsor.Lifestyles" title="https://github.com/castleprojectcontrib/Castle.Windsor.Lifestyles">https://github.com/castleprojectcontrib/Castle.Windsor.Lifestyles</a><br />
<br />
IMO, one of the big missing features of Castle Windsor is that it doesn’t come with a built-in way for dealing with contextual lifestyles.&nbsp; It handles transients and singletons fairly well, but once you get to other lifestyles it’s pretty heavily dependent on having some “state manager” handling the instances.&nbsp; For example, PerWebRequest uses the HttpContext, PerThread uses thread static variables, etc.<br />
Contextual lifestyles is one of those things where it doesn’t seem all that useful at first, and then when you see the possibilities it’s like getting hit with a huge truck.<br />
A question was posted to the Castle Google Group recently, which I follow, which illustrates a relatively common example of why someone would want to have a contextual lifestyle.&nbsp; Basically, you have a whole bunch of components you want to resolve, but only within a context.<br />
Here’s some boiler plate code of the domain model:<br />
<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">interface</span> IRepository { ISession Session { get; } }
<span class="kwrd">public</span> <span class="kwrd">interface</span> ISession : IDisposable { <span class="kwrd">bool</span> IsDisposed { get; } }
<span class="kwrd">public</span> <span class="kwrd">class</span> Session : ISession
{
    <span class="kwrd">public</span> <span class="kwrd">bool</span> IsDisposed { get; set; }
    <span class="kwrd">public</span> <span class="kwrd">void</span> Dispose() { IsDisposed = <span class="kwrd">true</span>; }
}
<span class="kwrd">public</span> <span class="kwrd">class</span> Repository1 :IRepository
{
    <span class="kwrd">public</span> ISession Session { get; <span class="kwrd">private</span> set; }
    <span class="kwrd">public</span> Repository1(ISession session){ Session = session; }
}
<span class="kwrd">public</span> <span class="kwrd">class</span> Repository2 : IRepository
{
    <span class="kwrd">public</span> ISession Session { get; <span class="kwrd">private</span> set; }
    <span class="kwrd">public</span> Repository2(ISession session){ Session = session; }
}
<span class="kwrd">public</span> <span class="kwrd">class</span> Model1
{
    <span class="kwrd">public</span> IRepository First { get; <span class="kwrd">private</span> set; }
    <span class="kwrd">public</span> IRepository Second { get; <span class="kwrd">private</span> set; }
    <span class="kwrd">public</span> Model1(IRepository first, IRepository second) { First = first; Second = second; }
}
<span class="kwrd">public</span> <span class="kwrd">class</span> Model2
{
    <span class="kwrd">public</span> IRepository Second { get; <span class="kwrd">private</span> set; }
    <span class="kwrd">public</span> Model2(IRepository second) { Second = second; }
}</pre><style type="text/css">
.csharpcode, .csharpcode pre
{
 font-size: small;
 color: black;
 font-family: consolas, "Courier New", courier, monospace;
 background-color: #ffffff;
 /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
 background-color: #f4f4f4;
 width: 100%;
 margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>And here’s the unit test I want to pass:<br />
<pre class="csharpcode">[Test]
        <span class="kwrd">public</span> <span class="kwrd">void</span> ResolutionsByContext()
        {
            IWindsorContainer root = <span class="kwrd">new</span> WindsorContainer();
            root.Register(Component.For&lt;Model1&gt;().LifeStyle.Transient,
                          Component.For&lt;Model2&gt;().LifeStyle.Transient,
                          Component.For&lt;IRepository&gt;().ImplementedBy&lt;Repository1&gt;().LifeStyle.Transient,
                          Component.For&lt;IRepository&gt;().ImplementedBy&lt;Repository2&gt;().LifeStyle.Transient,
                          Component.For&lt;ISession&gt;().ImplementedBy&lt;Session&gt;().LifeStyle.PerContextScope());

            Model1 model1;
            Model2 model2;
            ISession session1, session2;
            <span class="kwrd">using</span> (var context1 = root.BeginLifetimeScope())
            {
                model1 = context1.Resolve&lt;Model1&gt;();
                session1 = model1.First.Session;
                Assert.AreSame(model1.First.Session, model1.Second.Session);
                Assert.AreSame(context1.Resolve&lt;ISession&gt;(), context1.Resolve&lt;ISession&gt;());

                <span class="kwrd">using</span> (var context2 = root.BeginLifetimeScope())
                {
                    model2 = context2.Resolve&lt;Model2&gt;();
                    session2 = model2.Second.Session;
                    Assert.AreNotSame(model1.First.Session, model2.Second.Session);

                    var anotherModel2 = context2.Resolve&lt;Model2&gt;();
                    Assert.AreSame(anotherModel2.Second.Session, model2.Second.Session);

                    Assert.AreSame(session2, context2.Resolve&lt;ISession&gt;());
                    Assert.AreNotSame(context1.Resolve&lt;ISession&gt;(), context2.Resolve&lt;ISession&gt;());
                }
                Assert.IsTrue(session2.IsDisposed);
                Assert.IsFalse(session1.IsDisposed);
            }
            Assert.IsTrue(session1.IsDisposed);
        }</pre><style type="text/css">
.csharpcode, .csharpcode pre
{
 font-size: small;
 color: black;
 font-family: consolas, "Courier New", courier, monospace;
 background-color: #ffffff;
 /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
 background-color: #f4f4f4;
 width: 100%;
 margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style>  <br />
I copied the name BeginLifetimeScope from Autofac, which inherently supports contextual scopes as a first-class citizen (of which the test passes).&nbsp; The question now, is how do we get Castle Windsor to do the same?<br />
Initially, I took a look at ISubDependencyResolver and caching variables.&nbsp; Unfortunately, this didn’t work too well because sub resolvers never got hit if they were resolved from the container directly.<br />
The next step I tried was with lifestyle managers, but alas, the CreationContext was always transient and I was unable to store any state that distinguished between different context resolutions.<br />
After digging deeper into the Windsor codebase and getting into the subsystems and handlers, I found a solution that seems to work.&nbsp; It passes the test above, but that’s about it.&nbsp; Test well if you’re gonna use this in production code!!!<br />
Here goes!<br />
First, you have a lifestyle manager to distinguish between other lifestyles.<br />
<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">class</span> ContextualLifestyleManager : AbstractLifestyleManager
    {
        <span class="kwrd">private</span> <span class="kwrd">object</span> instance;
        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">object</span> Resolve(CreationContext context)
        {
            <span class="kwrd">return</span> instance ?? (instance = <span class="kwrd">base</span>.Resolve(context));
        }
        <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">void</span> Dispose()
        {
        }
    }</pre>And finally, the magic happens with this:<br />
<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">static</span> <span class="kwrd">class</span> ContextualExtensions
    {
        <span class="kwrd">public</span> <span class="kwrd">static</span> ComponentRegistration&lt;T&gt; PerContextScope&lt;T&gt;(<span class="kwrd">this</span> LifestyleGroup&lt;T&gt; group)
        {
            <span class="kwrd">return</span> group.Custom&lt;ContextualLifestyleManager&gt;();
        }
        <span class="kwrd">public</span> <span class="kwrd">static</span> IWindsorContainer BeginLifetimeScope(<span class="kwrd">this</span> IWindsorContainer parent)
        {
            var child = <span class="kwrd">new</span> WindsorContainer();
            var ss = (INamingSubSystem)parent.Kernel.GetSubSystem(SubSystemConstants.NamingKey);
            <span class="kwrd">foreach</span> (var handler <span class="kwrd">in</span> ss.GetHandlers())
            {
                <span class="kwrd">if</span> (handler.ComponentModel.CustomLifestyle == <span class="kwrd">typeof</span>(ContextualLifestyleManager))
                {
                    child.Kernel.AddCustomComponent(handler.ComponentModel);
                }
            }
            parent.AddChildContainer(child);
            <span class="kwrd">return</span> child;
        }
    }</pre>First method is just a helper method to be a little more fluent in the registration for when you want many things to have contextual lifestyle.&nbsp; The second method is the guts.&nbsp; Long story short, we create a child container, and duplicate all component models of contextual lifestyle.&nbsp; Thus, whenever components are resolved, the “override” is found in the child and resolved.&nbsp; Anything else will be found in the parent.<br />
I was initially pretty happy with this, until I profiled the performance.&nbsp; With Autofac, creating and disposing 100,000 contexts took 5ms on my computer.&nbsp; Doing the same with with Windsor took 3.8 <strong>seconds</strong>.&nbsp; Out of curiosity, I profiled again, but this time just creating child containers without copying handlers down: 1.9 seconds.&nbsp; So while this implementation works, it’s not as performant as I’d like it to be….<br />
Maybe I’ll come up with another solution, but for now if the performance is acceptable maybe this would be useful for others!</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>bling</div>
<div class='content'>
LOL I need to check these comments more often.  Thanks for responding!</div>
</div>
<div class='comment'>
<div class='author'>Krzysztof Koźmic (2)</div>
<div class='content'>
That&#39;s my quick and dirty impl based on per-web-request lifestyle that is far more lightweight and should have similar perf characteristics to other lifestyles<br /><br />http://gist.github.com/400979<br />http://gist.github.com/400980</div>
</div>
<div class='comment'>
<div class='author'>Krzysztof Koźmic (2)</div>
<div class='content'>
No wonder it is taking so long, you&#39;re doing it in very heavyweight fashion.<br /><br /><br />It can be done w/o nested containers, much more lightweight.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Forcing Castle Windsor to Generate Class Proxies]]></title>
    <link href="http://bling.github.io/blog/2010/04/21/forcing-castle-windsor-to-generate/"/>
    <updated>2010-04-21T00:00:00+00:00</updated>
    <id>http://bling.github.io/blog/2010/04/21/forcing-castle-windsor-to-generate</id>
    <content type="html"><![CDATA[<div class='post'>
I don't know why it took me so long to come up with this idea, but to save others potential headaches...have you ever thought "hmmmm, I registered this as an interface with an implementation, but I want Windsor to use a class proxy, not an interface proxy, how do I do that?"<br />
<br />
For me, initially I <i>almost</i> went as far as implementing my own ProxyFactory to force it to use class proxy no matter what, and then the light bulb hit me and it turns out that there's a much easier way to accomplish this.<br />
<br />
c.Register(Component.For&lt;ConcreteImpl, IService&gt;().Interceptors&lt;AnInterceptor&gt;());<br />
<br />
Tada!&nbsp; The actual service is now a concrete type, so Windsor will go, OK, I need to create a class proxy.&nbsp; But since it's forwarded to the interface as well, all your dependencies can simply use the interface and everything magically works.<br />
<br />
Yay!</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>bling</div>
<div class='content'>
void IService.SomeLongRunningOperation() {<br />  Action1();<br />  Action2();<br />  Action3();<br />}<br /><br />protected virtual void Action1() {}<br />protected virtual void Action2() {}<br />protected virtual void Action3() {}<br /><br />Without class proxies, those action methods could not be intercepted, and in our case, we would not be able to collect metrics/statistics on those methods.</div>
</div>
<div class='comment'>
<div class='author'>Krzysztof Koźmic (2)</div>
<div class='content'>
Why did you want a class proxy for interface service?</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Windsor/DynamicProxy/Mixin Powers!]]></title>
    <link href="http://bling.github.io/blog/2010/04/05/windsordynamicproxymixin-powers/"/>
    <updated>2010-04-05T00:00:00+00:00</updated>
    <id>http://bling.github.io/blog/2010/04/05/windsordynamicproxymixin-powers</id>
    <content type="html"><![CDATA[<div class='post'>
Hmmm, I couldn’t really think of a good title except that this blog post has a little bit of everything of the title.<br />
<br />
As with any multithreaded program, deadlocks are a huge pain in the butt, and when they happen it costs time, money, and stress.<br />
<br />
In my code base I’ve introduced something called an ExtendedLock, which basically has something like this inside:<br />
<div class="csharpcode"><pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> ExtendedLock : IExtendedLock {</pre><pre><span class="lnum">   2:  </span>  <span class="kwrd">public</span> IDisposable Lock() {</pre><pre class="alt"><span class="lnum">   3:  </span>    <span class="kwrd">while</span> (!Monitor.TryEnter(<span class="kwrd">this</span>, 5000)) {</pre><pre><span class="lnum">   4:  </span>      IncrementLockTime();</pre><pre class="alt"><span class="lnum">   5:  </span>    }</pre><pre><span class="lnum">   6:  </span>    <span class="kwrd">return</span> <span class="kwrd">new</span> Disposer(() =&gt; Release());</pre><pre class="alt"><span class="lnum">   7:  </span>  }</pre><pre><span class="lnum">   8:    public event Deadlock;</span></pre><pre>9<span class="lnum">: </span>}</pre></div><style type="text/css">
.csharpcode, .csharpcode pre
{
font-size: small;
color: black;
font-family: consolas, "Courier New", courier, monospace;
background-color: #ffffff;
/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
background-color: #f4f4f4;
width: 100%;
margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><br />
<br />
Pretty simple.&nbsp; IncrementLockTime, as the name implies keeps track of how long the current thread has been attempting to acquire the lock.&nbsp; It returns a Disposer which takes an Action, which releases the lock.&nbsp; This allows us to take advantage of the <b>using</b> syntax, and avoid boiler plate try/finally (oh, and it avoids typos in Monitor.Exit).&nbsp; After some configurable amount of time, if the lock cannot be acquired within, say, 2 minutes, it’s probably a good probability your application is blocked somewhere.<br />
<br />
Now, using this class basically means replacing lock(_syncRoot) type code with _elock.Lock().&nbsp; Also, I believe it’s a good candidate for “mixing” into any other component.&nbsp; Mixins are sort of like multiple-inheritance, but not.&nbsp; I like to think of mixins as a “can do” rather than “is a.”<br />
<br />
Now, we know that C# doesn’t let you do multiple inheritance, but with libraries like Castle’s DynamicProxy2, it lets you do something very similar, and is extremely powerful.&nbsp; In a sense, it will automatically generate the following code for you:<br />
<br />
<div class="csharpcode"><br />
<pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">public</span> <span class="kwrd">class</span> SomeService : ISomeService, IExtendedLock {</pre><pre><span class="lnum">   2:  </span>  IExtendedLock _lock = <span class="kwrd">new</span> ExtendedLock();</pre><pre class="alt"><span class="lnum">   3:  </span>  <span class="kwrd">public</span> <span class="kwrd">void</span> DoSomething() { }</pre><pre><span class="lnum">   4:  </span>  IDisposable IExtendedLock.Lock() { <span class="kwrd">return</span> _lock.Lock(); }</pre><pre class="alt"><span class="lnum">   5:  </span>}</pre><br />
</div><style type="text/css">
.csharpcode, .csharpcode pre
{
font-size: small;
color: black;
font-family: consolas, "Courier New", courier, monospace;
background-color: #ffffff;
/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
background-color: #f4f4f4;
width: 100%;
margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><style type="text/css">
.csharpcode, .csharpcode pre
{
font-size: small;
color: black;
font-family: consolas, "Courier New", courier, monospace;
background-color: #ffffff;
/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
background-color: #f4f4f4;
width: 100%;
margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><br />
<br />
_lock is a private instance variable, SomeService implements IExtendedLock, and simply redirects all the interface methods to _lock.&nbsp; This seems pretty simple and straightforward, but becomes tedious when the type you want to mix in has many methods (as my actual IExtendedLock is).<br />
<br />
With Windsor/DynamicProxy, you can do this automatically with minimal amount of code.&nbsp; For example, first you define something like this:<br />
<br />
<pre class="csharpcode"><span class="kwrd">public</span> <span class="kwrd">interface</span> ILockableDictionary : IDictionary, IExtendedLock { }</pre><br />
Then, you register it in the container:<br />
<div class="csharpcode"><br />
<pre class="alt"><span class="lnum">   1:  </span>var container = <span class="kwrd">new</span> WindsorContainer();</pre><pre><span class="lnum">   2:  </span>container.Register(Component.For(<span class="kwrd">typeof</span>(ILockableHashtable))</pre><pre class="alt"><span class="lnum">   3:  </span>                                   .LifeStyle.Transient</pre><pre><span class="lnum">   4:  </span>                                   .Activator&lt;LockableHashtableActivator&gt;());</pre></div><style type="text/css">
.csharpcode, .csharpcode pre
{
font-size: small;
color: black;
font-family: consolas, "Courier New", courier, monospace;
background-color: #ffffff;
/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
background-color: #f4f4f4;
width: 100%;
margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><br />
<br />
Now, whenever you need an instance of a lockable hashtable you can simply do something like this:<br />
<br />
<pre class="csharpcode">var hash = container.Resolve&lt;ILockableHashtable&gt;();
<span class="kwrd">using</span> (hash.Lock()) {
hash[<span class="str">"1"</span>] = 1;
}</pre><style type="text/css">
.csharpcode, .csharpcode pre
{
font-size: small;
color: black;
font-family: consolas, "Courier New", courier, monospace;
background-color: #ffffff;
/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
background-color: #f4f4f4;
width: 100%;
margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><br />
<br />
You might be wondering why it’s worth all this trouble, and what’s wrong with regular locks and Monitor.&nbsp; For our system it’s pretty critical that it stays running 24/7, and every minute it’s down is money lost, so it is in our best interest to detect any problematic condition.<br />
<br />
Last but not least, here’s the important code that actually generates the proxy:<br />
<div class="csharpcode"><br />
<pre class="alt"><span class="lnum">   1:  </span><span class="kwrd">internal</span> <span class="kwrd">class</span> LockableHashtableActivator : DefaultComponentActivator</pre><pre><span class="lnum">   2:  </span>{</pre><pre class="alt"><span class="lnum">   3:  </span>    <span class="kwrd">public</span> LockableHashtableActivator(ComponentModel model, IKernel kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction)</pre><pre><span class="lnum">   4:  </span>        : <span class="kwrd">base</span>(model, kernel, onCreation, onDestruction)</pre><pre class="alt"><span class="lnum">   5:  </span>    {</pre><pre><span class="lnum">   6:  </span>    }</pre><pre class="alt"><span class="lnum">   7:  </span>&nbsp;</pre><pre><span class="lnum">   8:  </span>    <span class="kwrd">public</span> <span class="kwrd">override</span> <span class="kwrd">object</span> Create(CreationContext context)</pre><pre class="alt"><span class="lnum">   9:  </span>    {</pre><pre><span class="lnum">  10:  </span>        IExtendedLock lockMixin = Kernel.Resolve&lt;IExtendedLock&gt;();</pre><pre class="alt"><span class="lnum">  11:  </span>&nbsp;</pre><pre><span class="lnum">  12:  </span>        <span class="rem">// an additional object we want to "mix" with the implementation to provide combined functionality</span></pre><pre class="alt"><span class="lnum">  13:  </span>        ProxyGenerationOptions options = <span class="kwrd">new</span> ProxyGenerationOptions();</pre><pre><span class="lnum">  14:  </span>        options.AddMixinInstance(lockMixin);</pre><pre class="alt"><span class="lnum">  15:  </span>        </pre><pre><span class="lnum">  16:  </span>        <span class="kwrd">return</span> Kernel.Resolve&lt;ProxyGenerator&gt;().CreateInterfaceProxyWithTarget(</pre><pre class="alt"><span class="lnum">  17:  </span>            <span class="kwrd">typeof</span>(IDictionary), <span class="rem">// the interface of the implementation</span></pre><pre><span class="lnum">  18:  </span>            <span class="kwrd">new</span>[] { <span class="kwrd">typeof</span>(ILockableHashtable) }, <span class="rem">// additional interfaces to use</span></pre><pre class="alt"><span class="lnum">  19:  </span>            Activator.CreateInstance&lt;Hashtable&gt;(), <span class="rem">// concrete implementation to mix into</span></pre><pre><span class="lnum">  20:  </span>            options);</pre><pre class="alt"><span class="lnum">  21:  </span>    }</pre><pre><span class="lnum">  22:  </span>}</pre><br />
</div><style type="text/css">
.csharpcode, .csharpcode pre
{
font-size: small;
color: black;
font-family: consolas, "Courier New", courier, monospace;
background-color: #ffffff;
/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
background-color: #f4f4f4;
width: 100%;
margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><style type="text/css">
.csharpcode, .csharpcode pre
{
font-size: small;
color: black;
font-family: consolas, "Courier New", courier, monospace;
background-color: #ffffff;
/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
background-color: #f4f4f4;
width: 100%;
margin: 0em;
}
.csharpcode .lnum { color: #606060; }
</style><br />
For those who are familiar with Windsor and wondering why I didn’t use the fluent Proxy.Mixins method, it’s because those mixins are created once per registration.&nbsp; In this case, it is very important that each mixin (which is an extended lock), is transient, otherwise every lockable hashtable ends up with the same extended lock, which is just asking for trouble.</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Krzysztof Koźmic</div>
<div class='content'>
actually, with the trunk version the limitation &quot;one mixin per registration&quot; was lifted off. Now Mixins behave pretty much like interceptors, which means they can have any lifestyle, including being transient.</div>
</div>
</div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Autofac’s extremely powerful and flexible ContainerScope]]></title>
    <link href="http://bling.github.io/blog/2009/09/26/autofacs-extremely-powerful-containerscope/"/>
    <updated>2009-09-26T00:00:00+00:00</updated>
    <id>http://bling.github.io/blog/2009/09/26/autofacs-extremely-powerful-containerscope</id>
    <content type="html"><![CDATA[<div class='post'>
I need to show some love and support for my favorite IoC tool because it’s most powerful feature needs more explaining.&nbsp; It’s not that the main site doesn’t provide a good explanation, because it does, but because most people don’t really understand what the solution is solving.<br />
The following is on Autofac’s <a href="http://code.google.com/p/autofac/">front page</a>:<br />
<blockquote><pre class="csharpcode">var container = // ...
using (var inner = container.CreateInnerContainer())
{
  var controller = inner.Resolve&lt;IController&gt;();
  controller.Execute(); // use controller..
}</pre></blockquote>The first time I saw this I basically glanced right passed it.&nbsp; Honestly I didn’t think anything of it, and initially the reason I tried out Autofac was for its very slick lambda registrations.&nbsp; I didn’t realize I was in a world of surprises when I finally realized the power and flexibility of Autofac’s container scope.<br />
<br />
If <a href="http://www.codinginstinct.com/2008/05/ioc-container-benchmark-rerevisted.html">benchmarks</a> and <a href="http://blog.ashmind.com/index.php/2008/09/08/comparing-net-di-ioc-frameworks-part-2/">feature comparisons</a> are not enough show off Autofac’s features, this blog post hopes to show how to solve “complex” problems elegantly.<br />
<br />
Let’s start with the typical NHibernate use-case.&nbsp; Create 1 singleton, create many sessions-per-request.&nbsp; Here’s a solution with <a href="http://nhforge.org/blogs/nhibernate/archive/2009/08/29/part-7-nhibernate-and-ninject-for-asp-net-mvc.aspx">Ninject</a> (not that I’m picking on Ninject, because I love its very slick contextual binding, but because most other IoC containers have a similar solution, like <a href="http://ayende.com/Blog/archive/2007/06/14/Using-NHibernate-Session-Per-Request-with-WCF-Windsor-Integration.aspx">per-session with WCF &amp; Windsor</a>).<br />
<br />
Basically, the solutions mentioned above will following an approach like this: <br />
<br />
a) Hook into the beginning of a request, and create the ISession from the ISessionFactory. <br />
b) Set it in the HttpContext.Current or OperationContext.Current’s dictionaries. <br />
c) Get this property in all the dependencies that need it. <br />
d) At the end of the request, Dispose() the ISession.<br />
<br />
OK, pretty simple and straightforward solution, but there’s one key thing that really bugs me is that by doing this we have introduced a dependency…that is, HttpContext.Current[].&nbsp; That, or you could wrap that around a class, like SessionManager, again, basically coupling to a dependency under a different name.&nbsp; With Autofac, we can bypass steps b and c entirely and only worry about the beginning and end of a request.<br />
<br />
To start off, here's the basic wiring needed:<br />
<div style="text-align: left;"><blockquote><div class="csharpcode"><pre class="alt">1:   var cb = new ContainerBuilder(); 
2:   cb.Register(x =&gt; CreateSessionFactory())
       .As&lt;ISessionFactory&gt;()
       .SingletonScoped(); 
3:   cb.Register(x =&gt; x.Resolve&lt;ISessionFactory&gt;().OpenSession())
       .As&lt;ISession&gt;()
       .ContainerScoped(); 
4:   IContainer c = cb.Build(); 
5:  &nbsp;
6:   Assert.AreSame(c.Resolve&lt;ISessionFactory&gt;(), c.Resolve&lt;ISessionFactory&gt;()); 
7:   Assert.AreSame(c.Resolve&lt;ISession&gt;(), c.Resolve&lt;ISession&gt;()); 
8:  &nbsp;
9:   var inner1 = c.CreateInnerContainer(); 
10:  Assert.AreSame(c.Resolve&lt;ISessionFactory&gt;(), inner1.Resolve&lt;ISessionFactory&gt;()); 
11:  Assert.AreNotSame(c.Resolve&lt;ISession&gt;(), inner1.Resolve&lt;ISession&gt;());</pre></div></blockquote></div>That’s the configuration.&nbsp; And that’s it!&nbsp; Nothing more.&nbsp; No additional SessionManager class.&nbsp; No need to use HttpContext.Current to store the session.&nbsp; Just pass ISession in with regular constructor/property injection.<br />
<br />
Here’s how it works:<br />
<br />
Line 2: ISessionFactory is created from CreateSessionFactory().&nbsp; This is a singleton so there will always be one and only one instance of it within the container (and all child containers).<br />
<br />
Line 3: This is where it’s interesting.&nbsp; We’re saying “whenever I need an ISession, resolve ISessionFactory and call OpenSession() on it”.&nbsp; Also, by specifying ContainerScope, we only get 1 instance per-container.<br />
<br />
And this is where it’s sort of confusing with the terminology.&nbsp; You can think of Autofac as a tree of containers.&nbsp; The root container (variable c in this case), can create children containers (inner1 in this case, and inner1 could create an inner2, and so on).&nbsp; So when something is Singleton scoped, that means that the root container, and any child containers (and child’s children) will only have 1 instance of a service.&nbsp; With ContainerScope, each “node = container” in the tree gets 1 instance.<br />
<br />
So back to the unit test above, in line 6 we verify that there is only 1 instance of ISessionFactory.&nbsp; We resolve ISession twice as well, which shows that we get the same instance.<br />
<br />
Line 9, we create an inner container, and here we see that ISessionFactory is the same for both the container <b>c</b> and inner container <b>inner1</b>.&nbsp; However, the ISession resolved is <b>different</b> between the two.<br />
Thus, by specifying ContainerScope, you can very easily group <i>multiple</i> services and dependencies together as one unit.&nbsp; Implementing the Unit of Work pattern is insanely easy with Autofac.&nbsp; Create services A, which depends on B, which depends on C, which all the previous depends on D.&nbsp; Resolve A within a new inner container, and B, C, and D will always be the same instances.&nbsp; Resolve A in another inner container and you will get a new set of instances.<br />
<br />
Last but not least, Autofac will automatically call Dispose() on all resolved services once the container is disposed.&nbsp; So for the above, once <b>inner1</b>.Dispose() is called, ISession.Dispose() is automatically called.&nbsp; If you needed to, you can very easily hook into this mechanism and implement things like transactions and rollbacks.<br />
<br />
I hope this blog post clears things up a little bit about Autofac’s ContainerScope!</div>


<h2>Comments</h2>


<div class='comments'>
<div class='comment'>
<div class='author'>Nick</div>
<div class='content'>
Heya Bailey! Think there is more than one &#39;Nick&#39; lurking around your blog (or else I have a case of amnesia :))<br /><br />Love the article, definitely need more info like this around the &#39;net.<br /><br />Nick (mk II)</div>
</div>
<div class='comment'>
<div class='author'>bling</div>
<div class='content'>
Thanks for dropping by Nick!<br /><br />To answer the question, what I ended up doing was creating a set of services for each request/session, basically like how I described in my post.<br /><br />I also wrote my own custom interception module (took some ideas from the one in contrib) based on Castle&#39;s DynamicProxy2.<br /><br />The main difference was that my interceptors work iff methods have specific attributes, and with that I was able to selectively say which methods got transactions (among other things).<br /><br />This made things really easy because I could have the transaction span multiple methods as one huge call or a simple 1 line method depending on where my transaction attributes appear in the code.</div>
</div>
<div class='comment'>
<div class='author'>Nick</div>
<div class='content'>
I&#39;ve been toying with a similar approach, but I&#39;m uncertain about how to manage NHibernate&#39;s Transaction (Commits and Rollbacks) in this scenario.  I&#39;ve seen examples that make use of TransactionAttributes (in the case of MVC apps), and previously I had been managing transactions in the begin/end request events (in global.asax), but that ties every request to a transaction which isn&#39;t necessary.  How did you go about handling transactions in this scenario?</div>
</div>
</div>

]]></content>
  </entry>
  
</feed>
