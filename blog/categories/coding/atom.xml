<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: coding | bling on software development]]></title>
  <link href="http://bling.github.io//blog/categories/coding/atom.xml" rel="self"/>
  <link href="http://bling.github.io//"/>
  <updated>2013-08-20T18:35:42+00:00</updated>
  <id>http://bling.github.io//</id>
  <author>
    <name><![CDATA[Bailey Ling]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[On TypeScript]]></title>
    <link href="http://bling.github.io//blog/2013/04/19/on-typescript/"/>
    <updated>2013-04-19T23:31:00+00:00</updated>
    <id>http://bling.github.io//blog/2013/04/19/on-typescript</id>
    <content type="html"><![CDATA[<h1>What&rsquo;s the deal?</h1>

<p>For the past week I&rsquo;ve been fortunate to work on an internal project which was purely greenfield and built on Node/Express on the backend, and AngularJS on the front-end.  It was a ton of fun and I learned a lot in the process, most particularly TypeScript and CoffeeScript.</p>

<p>TypeScript was of interest because the application I was writing contained some pretty complex calculations.  The existing implementation was in Java, and at first glance it seemed like it would be a good idea to have some type safety whilst reimplementing the algorithm.</p>

<!--more-->


<h1>Getting Started</h1>

<p>I don&rsquo;t know why there&rsquo;s this misconception that you need to have Microsoft tooling to use Typescript, but it is 100% false and a myth.  To install it you just run <code>npm install typescript</code>.  Yes!  It&rsquo;s just a standard node package.  Once it&rsquo;s installed you have access to a <code>tsc</code> command, similar to how you would use the <code>coffee</code>, i.e. you give it input, and it spits output.</p>

<p>If you&rsquo;ve ever been to <a href="http://typescriptlang.org">TypeScript</a>&rsquo;s website, you will have seen the rather impressive playground where you can see side by side Javascript vs Typescript.  This is a trick!  It gives you the illusion that you can simply annotate variables with types and it will automatically check only those types.  This is only half true.  Let&rsquo;s look at a innocent Node application:</p>

<p><code>javascript
var http = require('http');
http.createServer(function(req, res) {
  res.write('hello world');
  res.end();
}).listen(3000);
</code></p>

<p>That is just plain &lsquo;ol Javascript, and if the claim that all Javascript is valid Typescript, this should compile fine.  Except that it doesn&rsquo;t&hellip;we are greeted with the following error:</p>

<p><code>
The name 'require' does not exist in the current scope.
</code></p>

<p>As it turns out, if you&rsquo;re using Typescript you need to tell the compiler of <em>every</em> object and function that you&rsquo;re using.  In the above example, the compiler doesn&rsquo;t know anything about <code>require</code>, so it threw an error.</p>

<p>The way to correct this is with definition files.  These are like header files and they define the API of a module.  The pseudo standard for definition files currently lives in a GitHub repository named <a href="https://github.com/borisyankov/DefinitelyTyped">DefinitedlyTyped</a>.  This contains definition files for many popular libraries and is actively updated by the community.</p>

<p>Once you have a definition file, you add <code>///&lt;reference path="./d.ts/requirejs/require.d.ts"/&gt;</code> to the top of the file, and the code will compile.</p>

<p>The second option is to add <code>declare var require: any;</code> to the top of the file, effectively telling the compiler to ignore anything to do with that variable.</p>

<p>Either way, this was completely different from my initial expectations.  I thought that I would be able to take a large application, rename everything from <code>js</code> to <code>ts</code>, and then slowly upgrade the code to Typescript.  This is obviously not possible.  For this to work, you would need to define an application definition file, which references all other definition files (or declare variables for those that do not have definition files), and then for <em>every file in your project</em>, you would ///reference the application definition file.</p>

<p>I suppose this is a necessary evil for type checking, although it would have been nice to have this baked into the compiler to ease the migration path of existing applications.</p>

<h1>Clean output</h1>

<p>One of the nice things about TypeScript is that the output is very clean and predictable.  For example, here is an empty class:</p>

<p><code>javascript
class Foo { }
</code></p>

<p>It will compile to this:</p>

<p>``` javascript
var Foo = (function() {</p>

<pre><code>function Foo() { }
return Foo;
</code></pre>

<p>})();
```</p>

<p>All classes are done so with an immediately executed anonymous function.  If you define <code>Foo</code> as <code>export class Foo</code>, then the output will have an extra line at the bottom: <code>exports.Foo = Foo;</code>.  In other words, it&rsquo;s got first class support for the CommonJS syntax (as well as AMD).</p>

<h1>Competing thought processes</h1>

<p>For people coming from C#, it will feel very comfortable, because it is <em>extremely</em> similar to C#.  You have classes, methods, modules (aka namespaces), just like you have in C#.  If you try to use a method that doesn&rsquo;t exist, the compiler will complain.  These features are the bread and butter of compiled languages and people coming from Visual Studio (the majority of the audience) will feel very comfortable.</p>

<p>Then why is it that I did <em>not</em> enjoy writing in Typescript?</p>

<p>I&rsquo;m about 99% sure that I was just so used to working in untyped Javascript that I became annoyed that I had to &ldquo;annotate yet another variable&rdquo;.  TypeScript doesn&rsquo;t force you to annotate every variable, in fact, you could annotate nothing and it&rsquo;ll still compile (as long as you have the definition files).  But if you&rsquo;re going to use TypeScript it seems silly not to use types.</p>

<p>But what this comes down to is the classic static vs dynamic languages.  Static proponents will state that the compiler saves you from a lot of mistakes earlier on.  Dynamic proponents will state that &ldquo;if it quacks like a duck, it&rsquo;s a duck, I shouldn&rsquo;t need to declare it&rdquo;.  They&rsquo;re both right.</p>

<p>Either way, given an open mind and some time, you can be productive in either environment, and makes you a better developer in the end.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[.NET/WPF to HTML/CSS/Javscript]]></title>
    <link href="http://bling.github.io//blog/2013/04/13/dot-net-slash-wpf-to-html-slash-css-slash-javscript/"/>
    <updated>2013-04-13T11:58:00+00:00</updated>
    <id>http://bling.github.io//blog/2013/04/13/dot-net-slash-wpf-to-html-slash-css-slash-javscript</id>
    <content type="html"><![CDATA[<h1>In the beginning&hellip;</h1>

<p>For the vast majority of my career I&rsquo;d say I was a Microsoft guy.  I took Java in university and toyed around with Linux at home, but what paid the bills was my knowledge and expertise in Microsoft technologies that I&rsquo;ve built up over the years.</p>

<p>Then Metro and Windows 8 came, and the writing was on the wall.  Microsoft really screwed up.  In their efforts to play catch up, they alienated their business customers and came up with solutions that consumers did not want.  Despite their best efforts they could not stop the avalanche that was Node and HTML5.  Everyone was moving to HTML5, and even Microsoft themselves could not ignore this as now they&rsquo;re supporting hosting Node on Azure.</p>

<!--more-->


<p>People who have been in the industry for a long time will say this is just the same desktop vs web debacle and that it is cyclical and that people will realize that the web isn&rsquo;t good enough and go back to desktop applications.  But I think this time is different.  This time around, the browser has hardware acceleration.</p>

<p>Performance has always been the deciding factor for going back to the desktop.  I don&rsquo;t think that argument holds true anymore.  It&rsquo;s clear you can build some amazing applications on the web now that perform well.  You can build an IDE in the browser, like <a href="http://c9.io">Cloud9</a>, or you could create impressive animations like <a href="http://famo.us">Famous</a> demonstrates.  And even 3D games are possible now.</p>

<p>The web is here to stay, and with more and more people having phones and tablets as their primary computing devices (and <em>not</em> a desktop), naturally the technologies we use to build around these devices become more important, i.e. technologies that are cross platform and work on every device from phone to desktop.</p>

<p>So what happens when you throw a C#/WPF guru into the water with no knowledge of HTML, CSS, or Javascript?</p>

<h1>And then there was pain&hellip;</h1>

<p>From Friday to Monday, I went from a Windows 7 machine with Visual Studio, Resharper, PowerShell, Blend to a OSX machine.  I left out the tools on purpose, because literally I had none.  The only thing I knew was that I would be working on HTML/Javascript and I&rsquo;d have to bring my own knives to the kitchen.</p>

<p>Except that I had no knives&hellip;</p>

<h1>Baby steps</h1>

<p>I was comfortable with the command line, since I&rsquo;m a huge Linux fan and prefer a CLI over a GUI most of the time.  But it became clear that I had acquired quite a bit of PowerShell knowledge in my previous efforts to force myself to learn it, i.e. replace <code>cmd.exe</code> with <code>powershell.exe</code>.  When I tried to do <code>ls | % { $_.Length }</code> I was in for a sad realization&hellip;these aren&rsquo;t objects anymore.  Damn, all that muscle memory can&rsquo;t be used here.  Damn you vendor lock in!</p>

<p>But as you can see, I still used <code>ls</code> instead of <code>dir</code> or <code>gcm</code>, so I was already in this weird world of mixing UNIX with PowerShell, and moving back to UNIX wasn&rsquo;t too bad since I didn&rsquo;t have to remember a whole new set of commands for common use cases.  Although it annoys me from time to time that I cannot just <code>(get-date).addweeks(3)</code> from the command line anymore, I&rsquo;m going to have to live without it.</p>

<p>Next up was getting my environment set up.  A quick Google search showed that <a href="https://github.com/mxcl/homebrew">Homebrew</a> was the hotness, so I installed it, and yes, it was pretty cool.  It still has a ways to go before it&rsquo;s comparable to Linux package managers like <code>apt-get</code> or my favorite, Archlinux&rsquo;s <code>pacman</code>, but that is understandable since OSX is not built from the ground up using package managers like Linux distributions typically are.  For the most part, it worked as advertised, and after <code>brew install git</code> I was ready to check out the source code.</p>

<h1>Making the first commit</h1>

<p>Naturally, the first thing I did was download <a href="http://www.jetbrains.com/webstorm/">Webstorm</a>.  Programming without an IDE, yeah right!  I&rsquo;m a professional!</p>

<p>Alright, let&rsquo;s get working.  Let&rsquo;s start up Webstorm.  OK, it&rsquo;s loading&hellip;loading&hellip;loading&hellip;loading.  OK, great, that&rsquo;s a little faster than Visual Studio, so I&rsquo;m happy.  OK, it looks familiar.  It&rsquo;s got a side bar with my files, it&rsquo;s got navigation like Resharper, let&rsquo;s start working!</p>

<p>Blah blah blah, type type type, <code>this.</code> bam!  What the hell?  Why did autocomplete just list everything in the project?  I&rsquo;m in the current file and clearly it only has 4 properties defined.</p>

<h1>And so it starts</h1>

<p>As it turns out, <code>this.foo</code> is the same as <code>this['foo']</code> in Javascript, effectively making every object into a dictionary.  Webstorm&rsquo;s take on this dynamic behavior is to give you every possible option in the project, effectively turning the feature into a glorified spell checker.  Webstorm has an option to disable this, so I did and now it behaved more like what I expected.  Nonetheless, one thing was crystal clear &mdash; the &ldquo;this dot&rdquo; method of working (and discovering the API) is not possible anymore in the Javascript world.</p>

<p>It was apparent now that the IDE was still in its infant stages.  It had some refactorings built in, but for the most part it was not remotely comparable to what was available in Resharper/C# or IntelliJ.</p>

<p>I have always been a big proponent of tools.  And back in the .NET days I found it incredibly frustrating when some coworkers preferred working <em>without</em> Resharper.  Yes, it was much faster.  But even so, even after waiting for Resharper during its sluggish moments, it saved you time in the end, which in my mind meant you were more efficient with your time.</p>

<p>I consider myself lucky because if it weren&rsquo;t for Webstorm being in its infant stages, I probably would not have done what I was going to do next&hellip;venture into vim.</p>

<h1>Vim</h1>

<p>I still can&rsquo;t remember the exact reason why I decided to learn Vim.  The majority of my coworkers were using Sublime Text.  Maybe I was stubborn and wanted to be different.  Maybe I was curious and wanted to see why this 30 year old editor was still so popular.  Whatever the reason, I decided to use Vim code turkey and refused to open anything else up until I convinced myself that I gave it a fair chance.</p>

<p>The rest is <a href="http://bling.github.io/blog/2013/02/10/love-affair-with-vim/">history</a>.</p>

<p>Don&rsquo;t get me wrong, I was <em>hugely</em> unproductive for the first couple weeks.  But I can confidently say that as a proficient Vim user that I am now, I am <em>far</em> more efficient than I was before.</p>

<h1>How much is your time worth?</h1>

<p><img src="/images/editor-learning-curve.png"></p>

<p>I can vouch for this popular comic because I have tried every editor on there (yes even Emacs) and I can confirm that it is true.  There really is no contestant that can match the speed and flexibility of modal editing (and why most other editors out there have a vi emulation mode).  New users are often confused why the default mode in vim&rsquo;s default mode is&hellip;normal mode and not insert mode (like every other editor).</p>

<p>As it turns out, the majority of our time as programmers are spent <em>reading and editing</em> text, not writing it.  And that is why vim&rsquo;s default mode is normal mode.  Right off the bat you have 26 different commands that you can use to operate on text.  Add a shift, and you have another 26 commands.  In normal mode, you have 52 unique operations that is a single/double keystroke away!</p>

<p>Whether it&rsquo;s vim, or emacs, or Sublime text, invest in your editor and learn what it can do for you.  Even if it&rsquo;s just a couple seconds saved here and a couple seconds saved there, do realize that as programmers we stare at a text editor the vast majority of our working hours.  And all those seconds add up.</p>

<h1>Javascipt was easy to learn</h1>

<p>Well, for me it was.  <a href="http://jshint.com">JSHint</a> caught all the newbie mistakes.  C# already had lambdas and closures, so programming in the functional style of Javascript was weird at first, but ultimately it was a subset of the features available to C#.  Basically, if I were to program in C# like I did in Javascript, it would look like this:</p>

<p>``` csharp
public void Main() { // this is effectively window</p>

<pre><code>var namespace = new {
    foo = new {
        bar = new {
            create = () =&gt; {
                return new {
                    hello = () =&gt; {
                        Console.WriteLine("hello world");
                    };
                };
            }
        }
    }
};
namespace.foo.bar.create().hello();
</code></pre>

<p>}
```</p>

<p>Yes, there is variable hoisting, privileged vs public functions, truthy and falsey values, prototypical inheritance, etc. but like any language, this is just syntax.  You read tutorials, you try it out, you struggle against your previous habits, but then you figure it out.</p>

<h1>Javascript changed the way I think</h1>

<p>There is something incredibly liberating to just add some random property to an existing object, or change its prototype altogether.  At first I fought against this quite heavily.  We need constants!  We need well defined interfaces!  But in the end, it didn&rsquo;t matter.  We had some conventions, we followed them, and everything worked just fine.</p>

<p>Over time all the things I thought I needed, like intellisense, well defined interfaces, static analysis, I didn&rsquo;t actually need them.  Sure, they are nice to have around, but I was productive all the same without them.  And the users using our application didn&rsquo;t care whether it was written in C#/WPF or in HTML/Javascript, as long as it did was it was supposed to do.</p>

<p>Ultimately, what still mattered were architectural decisions.  We still had services, models, and views for properly separating data from business logic and presentation.  We had unit tests which tested all the functionality.  All of these concepts were very important in C# and WPF, and they are just as important here.</p>

<h1>Javascript made me a better developer</h1>

<p>Writing in Javascript made me realize just how much I relied on IDEs and static analysis.  Sometimes I would purposely abuse the IDE to do the job faster.  For example, if I wanted to refactor something, rather than using refactoring tools, sometimes the easier way is to just delete code and then go through the error list one by one.  Obviously you can&rsquo;t use this technique in Javascript.</p>

<p>Another thing I would do is purposely write bad code, wait for Resharper to come up with the suggestion, and then auto-correct it.</p>

<p>These were backwards patterns.</p>

<p>With Javascript, I found myself being proactive again.  I understood the code more.  I used snippets a lot more.  And since I was using vim, I never <em>ever</em> had to wait for the IDE anymore, which that in itself changed the way I worked.</p>

<h1>CSS is one big hack</h1>

<p>Going from XAML to CSS was extremely annoying and where I&rsquo;ve struggled the most with the transition.  If you want to vertical center something in XAML, you set <code>VerticalAlignment=Center</code> on it and you&rsquo;re done.  How do you do that in CSS?  Well, you could hack it with <code>table-cell</code>, or you could hack it with negative margins, or you could hack it with absolute positioning, or <code>line-height</code> or something else.  But point is, they are all hacks.</p>

<p>Coming from XAML, CSS is one big hack.  I want to create a grid that resizes to the window size, and is always 30% left side and 70% right side.  In XAML, I just do this:</p>

<p>``` xml
<Grid></p>

<pre><code>&lt;Grid.ColumnDefinitions&gt;
    &lt;ColumnDefinition Width="3*" /&gt;
    &lt;ColumnDefinition Width="7*" /&gt;
&lt;/Grid.ColumnDefinitions&gt;
</code></pre>

<p></Grid>
```</p>

<p>In CSS, here&rsquo;s one way:</p>

<p>``` css</p>

<h1>left { float: left; width: 30%; height: 100%; }</h1>

<h1>right { margin-left: 30%; width: 100%; height: 100%; }</h1>

<p>```</p>

<p>Again, more hacks.  And it&rsquo;ll only work if the parent element has a size defined.</p>

<p>Or you could do it this way:</p>

<p>``` css</p>

<h1>left { position: absolute; left: 0; right: 70%; bottom: 0; top: 0; }</h1>

<h1>right { position: absolute; left: 30%; right: 0; bottom: 0; top: 0; }</h1>

<p>```</p>

<p>But it&rsquo;s not going to work if the parent element doesn&rsquo;t have a position of <code>absolute</code> or <code>relative</code>.</p>

<p>Once I let go of trying to be &ldquo;correct&rdquo; from a XAML point of view and just accepted that CSS is just hacks over top of a document model that was never designed to be used like it is today, I actually really enjoyed CSS.</p>

<p>It became a fun challenge, to be presented with a UX design and then think about what kind of hacks I&rsquo;d have to do to make it look exactly the same.  Pseudo elements became my new best friend.</p>

<p>There was no such kind of fun in the XAML world &mdash; if the UX designer could do something in Illustrator, I could do the same in Blend no problem.  There was no challenge.</p>

<p>It was all fun and games until&hellip;</p>

<h1>Enter the beast&hellip;Internet Explorer</h1>

<p>If you charged X amount of dollars for a project, it should be X raised to the number of versions older than IE10 you have to support.  If it&rsquo;s IE9, it&rsquo;s X<sup>1</sup>.  If it&rsquo;s IE8, it&rsquo;s X<sup>2</sup>.  How about IE7, X<sup>3</sup> !</p>

<p>That would cover the cost of sheer annoyance and frustration that developers and UX designers will have to face, not to mention the increased amount of time to support these older browsers.  Oh, you want to support responsive design?  Ooops, IE8 doesn&rsquo;t support media queries.  Oh, you want to have shadows and gradients, well you&rsquo;re only going to get mono colored boxes instead.  Oh, you want it to run fast?  Here, take a 20x performance hit instead.</p>

<p>If you could do it, my recommendation for supporting IE is to have the page be one big fat button that spans the entire screen that says inside with two buttons: install Chrome, or install Firefox.  It worked for Flash and Silverlight!</p>

<h1>Back to an IDE&hellip;maybe?</h1>

<p>I never did venture back.  With my stubbornness to stick with Vim, I ended up installing plugins and optimizing my workflow around it.  I even created my own <a href="http://bling.github.io/dotvim">distribution</a>.  Chrome became my pseudo-IDE and I used its debugging tools heavily.  I used <a href="http://livereload.com">LiveReload</a> from time to time.  And coupled with a zsh terminal I had an extremely productive development environment.  In the end I didn&rsquo;t have a reason to use Webstorm anymore because at this point it <em>slowed me down</em>.</p>

<h1>Programming became fun again</h1>

<p>Perhaps the biggest change I experienced, once I got over the initial pains, was that I really enjoyed programming again.  When I was writing in Javascript, I felt like a hacker.  When I was programming in C#, I felt like a programmer.  Maybe this is temporary and I&rsquo;ll feel the same way when my experience level in Javascript matches with C#.  But for now, I&rsquo;m enjoying that feeling of rediscovering my inner child of building something from nothing.</p>

<h1>Finale</h1>

<p>Wow.  I didn&rsquo;t expect this blog post to be this long.  But if you got this far I hope you enjoyed the read, because I had fun writing about my experiences.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SnoopShell: Evolution]]></title>
    <link href="http://bling.github.io//blog/2012/07/29/snoopshell-evolution/"/>
    <updated>2012-07-29T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2012/07/29/snoopshell-evolution</id>
    <content type="html"><![CDATA[<p>It’s been a while since I last announced <a href="http://blingcode.blogspot.com/2012/07/snoopshell-marriage-of-snoop-wpf-and.html">SnoopShell</a>, where I took some PowerShell and injected that into Snoop.  Well, I didn’t stop there!  I decided to continue working on it and adding more useful features.</p>

<p>Well, a bunch of things have changed.  For one, it’s no longer targeted at .NET 4 and PS v3 anymore (and you’ll soon know why).  Second, there’s a bunch of new features!</p>

<h1>Automatic Profile Loading</h1>

<p>Upon startup, the shell will look for a couple well known locations and automatically dot-source them to load them into the current session.  This works the same as the standard $profile.  The filename needs to be <code>SnoopProfile.ps1</code>, and the search paths are <code>%USERPROFILE%,</code> the <code>WindowsPowerShell</code>, and the <code>Scripts</code> folder deployed with Snoop.exe.</p>

<p>This is incredibly useful since you can write your own custom functions and scripts and have them available to you all the time.  As an added bonus, because of the dynamic nature of PowerShell, you can make modifications to the <code>SnoopProfile.ps1,</code> save, and then invoke a <code>. $profile</code> to reload the profile and update the session with your changes (all without restarting the application).</p>

<p>That’s awesome sauce indeed ;&ndash;)</p>

<h1>PowerShell Provider</h1>

<p>This was more of a for-fun thing at first just to see if I could do it.  Writing a PS provider is not fun at all, since it’s not very well documented and I actually needed some help from ILSpy to figure out how things really worked.  Nonetheless, it’s got some basic functionality that is helpful to navigate around.</p>

<p><a href="http://lh6.ggpht.com/-hpRCncySB3g/UBXOagD2xII/AAAAAAAAALs/qBCKmxV-B0M/s1600-h/image%25255B10%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh6.ggpht.com/-QMqNxt2DmZ8/UBXOa1SVqwI/AAAAAAAAAL0/ULMweSOFso0/image_thumb%25255B8%25255D.png?imgmax=800" width="654" height="399"></a></p>

<p>Yep, the selected grid actually has a path, like how you would navigate the file system.  Let’s see what happens with a <code>cd</code>.</p>

<p><a href="http://lh4.ggpht.com/-R3wQmpiA7dw/UBXObb7FNsI/AAAAAAAAAL8/z3mgZwnFLok/s1600-h/image%25255B15%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/-mdRas9rg4gs/UBXOb4W6z7I/AAAAAAAAAME/pNH-1jzMbGA/image_thumb%25255B11%25255D.png?imgmax=800" width="654" height="399"></a></p>

<p>Cool, you can <code>cd</code> into the child “directory”, and it’ll automatically select the item in the tree view as well.  What if you’re lazy and don’t want to type?</p>

<p><a href="http://lh3.ggpht.com/-QgZ0iBA1AKw/UBXOcPU9uDI/AAAAAAAAAMM/iy9qHsS0zHA/s1600-h/image%25255B20%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh5.ggpht.com/-YV-f5-aPnP0/UBXOcRFGPkI/AAAAAAAAAMU/oo85Qg9fohU/image_thumb%25255B14%25255D.png?imgmax=800" width="654" height="399"></a></p>

<p>Wildcards are supported.  And because the visual tree doesn’t exactly require unique names, I needed to trick it by adding a number after each duplicate item.  So the above matches the third Rectangle child of the Grid.</p>

<h1>Code Injection</h1>

<p>One of the cool things about Javascript is that it’s so darn easy to test.  You make a change, save, reload, and you’ll immediately see if something worked or not.  This feedback loop is so fast it changes how you work and formulate ideas.</p>

<p>In the static world, we don’t really have this luxury, and especially not when you’re working on a large project, which at work, takes just under a minute for a full rebuild.  And this is on a monster machine.  Because of this, we had to employ tricks and workarounds to speed things up, like messing with build configurations and build output paths to minimize duplicate work.  Despite that, it’s still a pain to wait for the application to start and all that jazz.</p>

<p>What if we could do the super fast feedback loop development, in a static world?  Well, now you can!</p>

<p>It starts with a simple function:</p>

<p>``` powershell
function replace-command([string]$msg = &lsquo;hello world&rsquo;) {</p>

<pre><code>$action = { [system.windows.messagebox]::show($msg) }.GetNewClosure()
$cmd = new-object galasoft.mvvmlight.command.relaycommand([system.action]$action)
$selected.target.command = $cmd
</code></pre>

<p>}
```</p>

<p>The above function will replace anything that has a <code>Command</code> property on the target, like a Button or MenuItem, with a MessageBox showing a message.  For the curious, <code>GetNewClosure</code> is needed so that $msg is available within the inner script block.  Unlike C#, closures are not automatic.</p>

<p>Since PowerShell is dynamic, if you need to make a change, simply save the script, reload it with a dot-source, which will overwrite the existing function, and then set the target’s <code>Command</code> property again.  Awesome!</p>

<p>The only annoyance is converting PowerShell code back into C# code once you’re done.</p>

<h1>Evolution</h1>

<p>If you made it this far you didn’t forget about my comment about untargeting .NET 4 and PS v3.  Well, changes have been <a href="https://github.com/cplotts/snoopwpf/commit/16030418b14778029d10e198b288b4efa9bad65c">merged</a> to the main branch!  Soon the masses will be able to experiment with supercharging their applications with PowerShell!</p>

<p>I’ll likely continue working on my <a href="https://github.com/bling/snoopwpf">fork</a> as there’s still more goodies I’d like to add.  Stay tuned!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SnoopShell: The marriage of Snoop WPF and PowerShell]]></title>
    <link href="http://bling.github.io//blog/2012/07/01/snoopshell-marriage-of-snoop-wpf-and/"/>
    <updated>2012-07-01T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2012/07/01/snoopshell-marriage-of-snoop-wpf-and</id>
    <content type="html"><![CDATA[<div class='post'>
<p>I was given the opportunity to review a couple chapters of the excellent book <a href="http://shop.oreilly.com/product/0636920024491.do">PowerShell for Developers</a>, written by my colleague <a href="http://dougfinke.com/blog/">Doug Finke</a>.&nbsp; One of the concepts in the book was embedding a PowerShell console into your application.&nbsp; This idea is ingenious and we added this feature to our client’s software, and so far it has increased our productivity and opened the doors to many possibilities.</p> <p>So what’s so cool about embedding a shell into your application?&nbsp; Well, for starters, one of the immediate advantages is that it gives you the opportunity to test your application at run time.&nbsp; If you are implementing the MVVM pattern then basically anything you can see in the UI is bound to some property in your view model.&nbsp; What if you could expose an instance of your view model to the PowerShell console?&nbsp; Yes, you would be able to interact with it directly, change values, and property change notification will kick in and update the UI.</p> <p>The possibilities start to open up from there.&nbsp; You can start scripting out common tasks – write once, run many times.&nbsp; Or you can write a full fledge test suite as a script, give it to a QA tester, and have them run through it as a special kind of integration testing, one that happens with live, real data.&nbsp; Or how about being able to modify code, <em>at runtime</em>, to try out an implementation without need to recompile or restart the application?&nbsp; Sounds pretty awesome to me!</p> <p>With this, I started thinking why don’t I try and add this to Snoop?&nbsp; It’s a staple tool for any WPF developer, and adding scripting capabilities to Snoop will make it even more useful.</p> <p>So, I sat down for a weekend and took a shot at it.&nbsp; And with that, SnoopShell was born!</p> <p>My fork of Snoop can be found here: <a href="https://github.com/bling/snoopwpf">https://github.com/bling/snoopwpf</a></p> <p>It’s still in super-duper alpha, so features/ideas are still getting formulated, but here’s a glimpse of what it can do now.</p> <p>The $root variable points to the root of the tree.&nbsp; As you can see, Snoop represents this as a ApplicationTreeItem, which has a bunch of properties, the important ones being IsSelected and IsExpanded.</p> <p><a href="http://lh6.ggpht.com/-G1xK0p7454U/T_CIl9YKnlI/AAAAAAAAAJg/z4SEb20go04/s1600-h/image%25255B29%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh4.ggpht.com/-NgT7mhbVSBY/T_CImZIe6NI/AAAAAAAAAJk/fkNeG2UGFH0/image_thumb%25255B17%25255D.png?imgmax=800" width="640" height="381"></a></p> <p>Let’s try interacting with the object by setting the IsExpanded to true.</p> <p><a href="http://lh4.ggpht.com/-uKcevwtnUO4/T_CImnGxyWI/AAAAAAAAAJo/5v1AZnM_SHw/s1600-h/image%25255B28%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh6.ggpht.com/-STnkYWGudRU/T_CInKa1nyI/AAAAAAAAAJs/qk92Zjm3BWU/image_thumb%25255B16%25255D.png?imgmax=800" width="640" height="383"></a></p> <p>So far so good.&nbsp; Now let’s find my username using Ctrl+Shift.&nbsp; The $selected variable is automatically synchronized with the selected item in the tree.</p> <p><a href="http://lh6.ggpht.com/-uUeaZMYbuDc/T_CInhNnmAI/AAAAAAAAAJw/Q--l4hrlEis/s1600-h/image%25255B27%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh6.ggpht.com/-hnDhWbHtn8w/T_CIoIzVSCI/AAAAAAAAAJ0/BiqbUMnfigM/image_thumb%25255B15%25255D.png?imgmax=800" width="640" height="379"></a></p>  <p>Let’s do some black magic and change my name.</p> <p><a href="http://lh6.ggpht.com/-hC4FVTnZDxc/T_CIoTrYfiI/AAAAAAAAAJ4/aQQGFbrxCzM/s1600-h/image%25255B26%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/-RqOCvfsU6cU/T_CIo6zvtcI/AAAAAAAAAJ8/e8XMWPj60BM/image_thumb%25255B14%25255D.png?imgmax=800" width="640" height="382"></a></p> <p>Finally, let’s find every ListBox in the application.&nbsp; <em>Find-Item</em> is used to recursively find everything in the visual tree which is a ListBox.</p> <p><a href="http://lh6.ggpht.com/-nlycDcpP-bk/T_CIpXMcWxI/AAAAAAAAAKA/gIGruuduR9g/s1600-h/image%25255B25%25255D.png"><img style="background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px" title="image" border="0" alt="image" src="http://lh3.ggpht.com/-oAB7IIj6LLY/T_CIqDPWS6I/AAAAAAAAAKE/aX1DNZnIOVo/image_thumb%25255B13%25255D.png?imgmax=800" width="640" height="367"></a></p> <p>And from here, it’s as simple as grabbing the <em>DataContext</em> of any control to get access to the view model.</p> <p>By the way, this is targeting PowerShell V3, so you will need to have the RC installed.</p> <p>Try it out and let me know what you think!</p>  </div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[N2N: .NET 2 Node]]></title>
    <link href="http://bling.github.io//blog/2012/06/03/n2n-net-2-node/"/>
    <updated>2012-06-03T00:00:00+00:00</updated>
    <id>http://bling.github.io//blog/2012/06/03/n2n-net-2-node</id>
    <content type="html"><![CDATA[<div class='post'>
<p>Well, it’s been quite a while since I’ve blogged about…well…anything, and I figured it’s about time I get off my lazy butt and do something with my spare time on weekends.&nbsp; What better option than to see what all the hype is about Node?&nbsp; I had to do it sooner or later.</p> <p>As any newbie would do, they go to Google and type “nodejs tutorial”.&nbsp; <a href="http://www.nodebeginner.org/">The Node Beginner Book</a> came up first, so I went with that.&nbsp; It was an excellent tutorial.&nbsp; Prior to this I also skimmed through the book <a href="http://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742">JavaScript, The Good Parts</a>, so I had a basic understanding of the language syntax.</p> <p>One of the first oddities I noticed, was that NodeJS seems to have a convention of comma-first.&nbsp; You notice this immediately because most examples start with require(‘module’), and if they require more than one module, the second line is prefixed with a comma (as opposed to the more traditional comma at the end of the line).&nbsp; I apparently missed the <a href="https://gist.github.com/357981">discussion</a> by 2 years!&nbsp; It was still interesting nonetheless.</p> <p>As someone with a strong .NET background, I definitely experienced all the usual ‘gotchas’:</p> <ul> <li>== vs ===  <li>falsey values  <li>variable hoisting</li></ul> <p>Once you understand all of these things, Javascript isn’t so bad.&nbsp; Oh, and of course understanding closures will get you <em>a long</em> way in being effective with Javascript, because that’s what you need to use to do proper scoping.&nbsp; If C# didn’t have lambdas and closures it would have been a much longer journey to “get it”.</p> <p>Not too longer after, I deployed my first Heroku app running on NodeJS.</p> <p>Anyways, enough with the prologue…I won’t bore you with anymore beginner/tutorial stuff.</p> <p>Let’s get on with what I plan on doing over a multi-part blog series.&nbsp; When I build something on my own time, I can’t build something just for the hell of it to learn something….that’s not enough.&nbsp; If I build something it has to be useful – something that I (or someone else) will find valuable.</p> <p>I won’t reveal what it is yet, but it’s going to involve Node/MongoDB on the backend, with Backbone on the front-end.&nbsp; Should be fun :-)</p>  </div>

]]></content>
  </entry>
  
</feed>
