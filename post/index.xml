<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on bling on software</title>
    <link>http://bling.github.io/post/</link>
    <description>Recent content in Posts on bling on software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 31 Dec 2015 22:55:37 -0500</lastBuildDate>
    <atom:link href="http://bling.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Migrating from Jekyll/Octopress to Hugo</title>
      <link>http://bling.github.io/blog/2015/12/31/migrating-from-jekyll-octopress-to-hugo/</link>
      <pubDate>Thu, 31 Dec 2015 22:55:37 -0500</pubDate>
      
      <guid>http://bling.github.io/blog/2015/12/31/migrating-from-jekyll-octopress-to-hugo/</guid>
      <description>

&lt;p&gt;Migrating my blog from &lt;a href=&#34;https://github.com/octopress/octopress&#34;&gt;Octopress&lt;/a&gt; to &lt;a href=&#34;https://github.com/spf13/hugo&#34;&gt;Hugo&lt;/a&gt; has been on my TODO list for a very long time.  In fact, the only reason holding me back was lack of pagination support, but that has been implemented for a while now, so I finally got around to migrating my blog over.&lt;/p&gt;

&lt;h1 id=&#34;getting-started:23dc397a3b9966843174ca31c40b0ee7&#34;&gt;Getting started&lt;/h1&gt;

&lt;p&gt;Since this is an entirely new generator, it made sense to start from scratch.  So I created an empty site, copied all the markdown files over, and voila, new blog!  But of course, it wasn&amp;rsquo;t all smooth sailing, and I needed to resolve some issues.&lt;/p&gt;

&lt;h1 id=&#34;permalinks:23dc397a3b9966843174ca31c40b0ee7&#34;&gt;Permalinks&lt;/h1&gt;

&lt;p&gt;First problem was all the permalinks that Octopress generated did not match the default value for Hugo.  This was easily resolved with a &lt;code&gt;[permalinks]&lt;/code&gt; section in the &lt;code&gt;config.toml&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;title-title:23dc397a3b9966843174ca31c40b0ee7&#34;&gt;Title != title&lt;/h1&gt;

&lt;p&gt;This was most troubling, and resulted in a lot of manual labor to fix.  The problem was that Octopress (or Jekyll), would generate a URL from the title, but would omit things like &amp;ldquo;the&amp;rdquo;, or &amp;ldquo;a&amp;rdquo;.  For example, the very first post of my blog is titled &lt;a href=&#34;http://bling.github.io/blog/2008/09/11/importance-of-color-schemes/&#34;&gt;The Importance of Color Schemes&lt;/a&gt;, but the URL is actually &lt;code&gt;/importance-of-color-schemes&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Luckily, you can define a &lt;code&gt;slug&lt;/code&gt; parameter in the front matter which can override this.  Suffice to say, I had to do this for a lot of posts.&lt;/p&gt;

&lt;p&gt;In most migrations you don&amp;rsquo;t have to worry about keeping the same URLs, but in my case I needed them to be the same because that&amp;rsquo;s how &lt;a href=&#34;http://www.disqus.com&#34;&gt;Disqus&lt;/a&gt; tracks discussions, and I wanted all the existing conversations to remain intact.&lt;/p&gt;

&lt;h1 id=&#34;code-fences:23dc397a3b9966843174ca31c40b0ee7&#34;&gt;Code fences&lt;/h1&gt;

&lt;p&gt;Jekyll supports doing syntax highlighting with code fences, e.g.:&lt;/p&gt;

&lt;pre&gt;
``` javascript
alert(&#39;Hello World&#39;!);
```
&lt;/pre&gt;

&lt;p&gt;Support for this can be done via Pygments, with is off by default.  If you add &lt;code&gt;pygmentscodefences = true&lt;/code&gt; to your &lt;code&gt;config.toml&lt;/code&gt; then these sections will be parsed correctly.  You&amp;rsquo;ll also want to use &lt;code&gt;pygmentsuseclasses = true&lt;/code&gt; so that you can style it appropriately.&lt;/p&gt;

&lt;h1 id=&#34;markdown-references:23dc397a3b9966843174ca31c40b0ee7&#34;&gt;Markdown references&lt;/h1&gt;

&lt;p&gt;This last one was a bit of an annoyance because I needed to download the source of Hugo and make code modifications.  Specifically, this &lt;a href=&#34;https://github.com/spf13/hugo/pull/1667&#34;&gt;pull request&lt;/a&gt; was needed.&lt;/p&gt;

&lt;p&gt;Long story short, if you use references for links, instead of inline, then summaries will not work.&lt;/p&gt;

&lt;h1 id=&#34;and-the-rest:23dc397a3b9966843174ca31c40b0ee7&#34;&gt;And the rest&lt;/h1&gt;

&lt;p&gt;Once all the heavily lifting was done, now it was a matter of picking a theme and modifying it to my liking.  I ended up using &lt;a href=&#34;https://github.com/bling/herring-cove&#34;&gt;herring cove&lt;/a&gt;.  I really liked how Hugo separates the content from the theme, making it relatively easy to switch back and forth.&lt;/p&gt;

&lt;h1 id=&#34;and-the-benefits:23dc397a3b9966843174ca31c40b0ee7&#34;&gt;And the benefits?&lt;/h1&gt;

&lt;p&gt;Holy crap this is too fast!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacs as my &lt;Leader&gt; 1 Year Later</title>
      <link>http://bling.github.io/blog/2015/01/06/emacs-as-my-leader-1-year-later/</link>
      <pubDate>Tue, 06 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2015/01/06/emacs-as-my-leader-1-year-later/</guid>
      <description>

&lt;p&gt;Last year, I wrote a &lt;a href=&#34;http://bling.github.io/blog/2013/10/27/emacs-as-my-leader-vim-survival-guide&#34;&gt;Vim Survival Guide&lt;/a&gt; for a Vim user switching to Emacs.  In that blog post I wrote:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;My Emacs setup right now is still not as efficient as my vim/tmux/zsh setup.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I got an email from someone a couple days ago asking whether that&amp;rsquo;s still true.  Rather than replying to him directly, I figured I should blog about it since it would make for an interesting topic.&lt;/p&gt;

&lt;p&gt;Well, it started out pretty simple.  I used Vim as my text editor, and after switching, I continued using Emacs as my text editor as well.  But as you already know, Emacs is much more than that, and slowly over time, unexpectedly, it took over other parts of my workflow that I thought were untouchable.&lt;/p&gt;

&lt;h1 id=&#34;victim-1-the-terminal:1e749a88314d0c8274107a81cde84d26&#34;&gt;Victim 1, The Terminal&lt;/h1&gt;

&lt;p&gt;One of those untouchable things was the terminal.  Vim is at its best when paired with a competent terminal environment, which typically means zsh and tmux.  What is often left out in that recommendation is that it also implies a UNIX operating system.  Well, sometimes that&amp;rsquo;s not an option, and in my case, I had to make do with the Windows machine sitting in front me.&lt;/p&gt;

&lt;p&gt;Getting UNIX on Windows is a lot easier these days.  Installing Git alone will get you a decent minimal shell, and projects like &lt;a href=&#34;http://babun.github.io/&#34;&gt;Babun&lt;/a&gt; will get you a preconfigured Cygwin environment up in no time.  As great as these options are, you&amp;rsquo;ll always be a second class citizen compared to a real UNIX machine, and you will suffer the emulation performance costs or the odd compatibility problems here and there when switching between Cygwin and native Windows binaries.&lt;/p&gt;

&lt;p&gt;Rather than doing all of that, and since I was already using Emacs, I tried &lt;code&gt;eshell&lt;/code&gt; out for a change &amp;ndash; what was supposed to be temporary, became permanent.  eshell is surprisingly good.  Granted, this was likely only possible because I was a basic terminal user &amp;ndash; my zshrc was no where near as complicated as my vimrc or my init.el.  I also wrote quite a few Emacs Lisp functions by now, which meant that my Emacs Lisp scripting prowess was much better than my non-existent Bash scripting, making eshell even better based on my capabilities.&lt;/p&gt;

&lt;p&gt;An expected surprise was that eshell reimplements most of UNIX &amp;ndash; &lt;code&gt;ls&lt;/code&gt; is Emacs Lisp function, so is &lt;code&gt;grep&lt;/code&gt; and a slue of other UNIX commands.
Some of you may think that this is NIH syndrome, but guess what?  With eshell as my main shell, I can use Windows, OSX, and Linux interchangeably with the same configuration and same key bindings.  The integration of eshell with other Emacs features is also much more seamless.  &lt;code&gt;grep&lt;/code&gt;ing for text will put the results into a new buffer, of which I can search to narrow down further, and also opening the files at the matching line numbers.&lt;/p&gt;

&lt;p&gt;Before I discovered Babun, I&amp;rsquo;d joke that the easiest way to get UNIX onto a Windows machine was to extract the Emacs zip file and run the exe.&lt;/p&gt;

&lt;h1 id=&#34;victim-2-tmux:1e749a88314d0c8274107a81cde84d26&#34;&gt;Victim 2, tmux&lt;/h1&gt;

&lt;p&gt;tmux ups your game by allowing you to manage multiple screens at a time.  Most terminal users probably get by this by using tabs in their terminal &amp;ndash; I used iTerm for the longest time on OSX, and still do.  However, using tmux does free you up from OS lock in.  tmux exists on Cygwin for Windows, but the last time I tried it, around of Summer 2014, it had bugs and would segfault, so I had to use screen instead.&lt;/p&gt;

&lt;p&gt;Managing multiple windows in Emacs is one of its natural strengths, so replacing tmux didn&amp;rsquo;t take much thought or training.&lt;/p&gt;

&lt;h1 id=&#34;victim-3-background-processes:1e749a88314d0c8274107a81cde84d26&#34;&gt;Victim 3, Background Processes&lt;/h1&gt;

&lt;p&gt;With the terminal and multiple screens taken care of, the next step was figuring out how I would run my development servers.  I do a lot of Web and Java development these days, which means spinning up &lt;code&gt;node&lt;/code&gt; for watching/bundling the client and running &lt;code&gt;java&lt;/code&gt; processes for the backend.  In the past, I would use dedicated iTerm tabs for each process (or &lt;a href=&#34;https://code.google.com/p/conemu-maximus5/&#34;&gt;ConEmu&lt;/a&gt; tabs in Windows).  It worked just fine, but having these run in Emacs gives some neat advantages.&lt;/p&gt;

&lt;p&gt;Any output is piped directly into a buffer.  And that buffer acts the same as any other buffer, which means you can search, jump around, yank, cut (if read-only mode is off), etc.  You can navigate to and from it just like any other file buffer you have open, and even cool things like defining your own syntax highlighting so that anything that matches &lt;code&gt;[ERROR]&lt;/code&gt; comes out bright bold red.&lt;/p&gt;

&lt;p&gt;Part of development also means killing and spinning up these processes periodically.  In the past, I would Alt-Tab, mouse around, C-c, up, enter, etc.  Now, I have it automated with an elisp function bound to a key.&lt;/p&gt;

&lt;h1 id=&#34;victom-4-intellij:1e749a88314d0c8274107a81cde84d26&#34;&gt;Victom 4, IntelliJ&lt;/h1&gt;

&lt;p&gt;Just kidding!  IntelliJ for Java is untouchable.  I tried the various options available to Emacs but none of them can hold a candle against IntelliJ.&lt;/p&gt;

&lt;h1 id=&#34;victim-5-me:1e749a88314d0c8274107a81cde84d26&#34;&gt;Victim 5, Me&lt;/h1&gt;

&lt;p&gt;When I was a Vim user, what annoyed me the most was not being able to use my muscle memory outside of Vim.  I lost so many chat messages by prematurely hitting &lt;code&gt;Escape&lt;/code&gt; that I had to write a &lt;a href=&#34;http://www.autohotkey.com/&#34;&gt;AutoHotKey&lt;/a&gt; script that would disable the key when those windows are open.&lt;/p&gt;

&lt;p&gt;As an Emacs user, I was going to say that I want everything to be running inside Emacs.  And while that&amp;rsquo;s somewhat true, if I had to pick only one thing, it would have to be &lt;code&gt;eval-last-sexp&lt;/code&gt;.  The ability to not only tweak every little detail of your editor, but to do it while it is running is very intoxicating.&lt;/p&gt;

&lt;p&gt;When I did web development in the past with Vim, I would make changes, wait for live reload to kick in, and verify my changes in the browser.  This was not slow by any means &amp;ndash; it happened in about 1-2 seconds.  After switching to Emacs, all of a sudden this was intolerable &amp;ndash; it was too slow!  I wanted instant gratification!  These days I jack into my browser with &lt;a href=&#34;https://github.com/skeeto/skewer-mode&#34;&gt;skewer-mode&lt;/a&gt; and evaluate changes directly into the browser.&lt;/p&gt;

&lt;p&gt;Am I doing anything that you cannot do in Vim?  Nope.  &lt;a href=&#34;https://github.com/jaxbot/browserlink.vim&#34;&gt;browserlink.vim&lt;/a&gt; will get you the same experience.  But I think because both editors start from differing philosophies, doing it in Emacs feels natural, whereas doing it in Vim feels forced.&lt;/p&gt;

&lt;h1 id=&#34;turning-evil-mode-off:1e749a88314d0c8274107a81cde84d26&#34;&gt;Turning evil-mode off!&lt;/h1&gt;

&lt;p&gt;When I first started, I did what most people trying &lt;a href=&#34;https://gitorious.org/evil/evil&#34;&gt;evil-mode&lt;/a&gt; probably do &amp;ndash; I enabled it globally.  Unfortunately, over time this proved to me problematic for me because I developed the expectation that &lt;em&gt;everything&lt;/em&gt; should have Vim bindings, which was far from reality.  evil-mode comes with integration for some packages out of the box, but you&amp;rsquo;re bound to hit some package which is not supported.  You are left with 3 choices: 1) get repeatedly frustrated as you hit the wrong keys, 2) configure the keymap to have Vim bindings, or 3) suck it up and use Emacs bindings.&lt;/p&gt;

&lt;p&gt;But then I realized, despite my desire for modal editing, that is a &lt;em&gt;learned&lt;/em&gt; obsession.  I didn&amp;rsquo;t start with Vim, I started with Notepad.&lt;/p&gt;

&lt;p&gt;With that realization, I turned evil-mode off by default.  When I edit text, I turn it on.  For everything else, I use Emacs bindings.  With my expectations aligned, I don&amp;rsquo;t get frustrated anymore.&lt;/p&gt;

&lt;h1 id=&#34;after-a-year-am-i-more-efficient:1e749a88314d0c8274107a81cde84d26&#34;&gt;After a year, am I more efficient?&lt;/h1&gt;

&lt;p&gt;Without a doubt, yes!&lt;/p&gt;

&lt;p&gt;As far as editing text is concerned, in my mind evil-mode is, for all practical purposes, on par with Vim.  There might be some obscure feature that hasn&amp;rsquo;t been emulated yet, but in my experience that is usually because a) the feature is so rarely used that it&amp;rsquo;s a waste of time to implement, or b) there is a better, native Emacs alternative.&lt;/p&gt;

&lt;p&gt;A year ago, the biggest deficiency for me was the lack of a jump list which spread across buffer boundaries.  Well, rather than waiting for it to be implemented by someone else, I did it myself, and thus &lt;a href=&#34;https://github.com/bling/evil-jumper&#34;&gt;evil-jumper&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;Fuzzy matching was another biggie for me.  Thanks to all the hard work recently from the maintainers of &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;helm&lt;/a&gt;, I don&amp;rsquo;t have to be envious anymore.  Helm literally went from one of my least used packages to most used over night &amp;ndash; prior to this I relied on ido+smex.  &lt;a href=&#34;https://github.com/auto-complete/auto-complete&#34;&gt;auto-complete&lt;/a&gt; and &lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;company-mode&lt;/a&gt; aren&amp;rsquo;t there yet, but I suspect it won&amp;rsquo;t be too much longer for them to support it.  As of now, if you truly desire fuzzy auto completion as-you-type, it can be achieved through &lt;a href=&#34;https://github.com/abingham/emacs-ycmd&#34;&gt;emacs-ycmd&lt;/a&gt;, although setup is more involved as it requires compiling a daemon process.&lt;/p&gt;

&lt;p&gt;While I&amp;rsquo;m mentioning packages, &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;projectile&lt;/a&gt; is a must-have for any Emacs user.&lt;/p&gt;

&lt;h1 id=&#34;considering-the-switch:1e749a88314d0c8274107a81cde84d26&#34;&gt;Considering the switch?&lt;/h1&gt;

&lt;p&gt;Over the past year there have been a lot more threads lately in &lt;a href=&#34;http://www.reddit.com/r/emacs&#34;&gt;/r/emacs&lt;/a&gt; from curious Vim users.  A general theme I&amp;rsquo;ve observed is that people want to make Emacs act exactly like how they had their Vim set up.  If you&amp;rsquo;re considering the switch, empty your mind.  Trying to get Emacs to behave exactly like Vim will hinder your growth and you&amp;rsquo;ll probably give up with frustration before ever realising Emacs&amp;rsquo; full potential.  Remember, there are tons of highly productive Emacs users who do not use Vim or evil-mode &amp;ndash; it&amp;rsquo;s up to you to find out what tricks are up their sleeve&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Asynchronous Eval in Emacs with Stylus and Skewer</title>
      <link>http://bling.github.io/blog/2014/01/21/asynchronous-eval-with-stylus-and-skewer/</link>
      <pubDate>Tue, 21 Jan 2014 16:41:16 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2014/01/21/asynchronous-eval-with-stylus-and-skewer/</guid>
      <description>

&lt;p&gt;You haven&amp;rsquo;t experienced Emacs if you haven&amp;rsquo;t experienced the power of &lt;code&gt;C-x C-e&lt;/code&gt;.  This is the magical keybinding which evalulates the current line.  Another useful companion is &lt;code&gt;C-M-x&lt;/code&gt;, which evaluates the current function.&lt;/p&gt;

&lt;p&gt;Lisp dialects naturally work with these patterns seamlessly, and once I figured out the possibilities of this I got addicted and wanted it available in &lt;em&gt;all&lt;/em&gt; of my languages.  It&amp;rsquo;s like having a debugger available all the time.  But unlike debuggers where you inspect and change variables at run time, and then need to translate your changes back to code, in Lisp you just edit the code directly and eval (and repeat until you like the result).&lt;/p&gt;

&lt;h1 id=&#34;adapting-the-pattern-to-stylus:6219f9e2c0ad4a4dcda9b93b8ed614eb&#34;&gt;Adapting the Pattern to Stylus&lt;/h1&gt;

&lt;p&gt;Anyone doing serious web development will not be writing CSS directly.  There are many compelling alternatives; the 3 most popular being SASS/Compass, LESS, and Stylus.  On my current project I&amp;rsquo;m using Stylus, so I adapted this workflow to it.&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s start with &lt;a href=&#34;https://github.com/skeeto/skewer-mode&#34;&gt;skewer-mode&lt;/a&gt;.  This minor mode lets you connect to a real browser and evaluate to it.  It can evaluate Javascript or CSS on the fly.  It even has a bookmarklet script that allows you to evaluate arbitrary code against &lt;em&gt;any&lt;/em&gt; website.  Yes, that is amazing!&lt;/p&gt;

&lt;p&gt;However, it only supports CSS&amp;hellip;so how am I going to use my beloved eval against Stylus code?&lt;/p&gt;

&lt;h1 id=&#34;the-first-attempt:6219f9e2c0ad4a4dcda9b93b8ed614eb&#34;&gt;The First Attempt&lt;/h1&gt;

&lt;p&gt;The first thing I did was do the simplest thing &amp;ndash; convert Stylus to CSS and show it in a temporary buffer.  This turned out to be pretty straightforward.  I came up with the following code snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stylus-compile-and-show-region&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;interactive&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;r&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;call-process-region&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;start&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;end&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;stylus&amp;quot;&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;get-buffer-create&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;*Stylus*&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;display-buffer&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;*Stylus*&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-current-buffer&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;*Stylus*&amp;quot;&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;css-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Easy!  It creates an interactive command which takes in a region, then calls out to the external &lt;code&gt;stylus&lt;/code&gt; command and puts the output into a buffer named &lt;code&gt;*Stylus*&lt;/code&gt;, and finally shows it and enables &lt;code&gt;css-mode&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Now, I just switch to that buffer and &lt;code&gt;C-x C-e&lt;/code&gt; to my heart&amp;rsquo;s content!  But there was a problem here&amp;hellip;.Anything I change in the CSS buffer I would have to translate it back to Stylus, which was very annoying, and I might as well do it in the browser directly with Dev Tools if I&amp;rsquo;m going to do that.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s fix that.&lt;/p&gt;

&lt;h1 id=&#34;evaluating-stylus-directly:6219f9e2c0ad4a4dcda9b93b8ed614eb&#34;&gt;Evaluating Stylus Directly&lt;/h1&gt;

&lt;p&gt;First things first, I realized that I don&amp;rsquo;t need to show a buffer to interact with it.  So evaluating from Stylus directly actually involved replacing one line of code.  Instead of &lt;code&gt;(display-buffer)&lt;/code&gt;, I put in &lt;code&gt;(skewer-css-eval-buffer)&lt;/code&gt;, and viola!!  Now I can eval any Stylus code and have it appear in the browser!&lt;/p&gt;

&lt;p&gt;For brevity I&amp;rsquo;ve excluded other necessary code like emptying the buffer before compiling Stylus, but you get the idea.&lt;/p&gt;

&lt;p&gt;But, there was one last itch I still needed to scratch&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;it-was-blocking:6219f9e2c0ad4a4dcda9b93b8ed614eb&#34;&gt;It was blocking!&lt;/h1&gt;

&lt;p&gt;All things considered, blocking the UI for 1 second isn&amp;rsquo;t the end of the world.  But it was enough of an annoyance that I felt compelled to fix it!&lt;/p&gt;

&lt;p&gt;And with that, I started reading the documentation.  I wish Emacs would provide a categorzied listing of all functions (instead of the &lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/elisp/Index.html#Index&#34;&gt;alphabetical listing&lt;/a&gt;), because finding what I needed took longer than expected (if you know of such a listing please let me know).&lt;/p&gt;

&lt;p&gt;I eventually stumbled across &lt;code&gt;start-process&lt;/code&gt;, which lets you control asynchronous processes.  Digging through the documentation further, I was able to find &lt;code&gt;set-process-sentinel&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And with that, the following snippet was born:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stylus-eval-region-async&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;start-process&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;stylus&amp;quot;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;*Stylus*&amp;quot;&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;stylus&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;set-process-sentinel&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;stylus-process-sentinel&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;process-send-region&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;begin&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;process-send-eof&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;

&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;defun&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;stylus-process-sentinel&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;process&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;when&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;equal&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;event&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;finished\n&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;with-current-buffer&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;*Stylus*&amp;quot;&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;css-mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;skewer-css-eval-buffer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Basically, what&amp;rsquo;s happening here is that I&amp;rsquo;m starting an asynchronous process which writes all output into the &lt;code&gt;*Stylus*&lt;/code&gt; buffer.  I send the region as input into the process, and finally, when the process terminates, which is detected by the sentinel function, it evaluates the buffer.&lt;/p&gt;

&lt;p&gt;And now I can eval to my heart&amp;rsquo;s content without blocking!&lt;/p&gt;

&lt;p&gt;The full source code (with emptying buffers and other housekeeping) can be found in my &lt;a href=&#34;https://github.com/bling/dotemacs/blob/master/config/init-stylus.el&#34;&gt;dotemacs&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;If you haven&amp;rsquo;t already noticed, this is not specific to Stylus and will work with any program which works with stdin/stdout!  Enjoy.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacs as my &lt;Leader&gt; Vim Survival Guide</title>
      <link>http://bling.github.io/blog/2013/10/27/emacs-as-my-leader-vim-survival-guide/</link>
      <pubDate>Sun, 27 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2013/10/27/emacs-as-my-leader-vim-survival-guide/</guid>
      <description>

&lt;p&gt;Two months ago I blogged about switching from Vim to Emacs.  Today, Emacs is my main editor.  I&amp;rsquo;ll try to keep this post short and to the point, because there is &lt;em&gt;a lot&lt;/em&gt; to cover!  But by the end of this post you&amp;rsquo;ll have to answer to the question whether you should give Emacs a try.&lt;/p&gt;

&lt;h1 id=&#34;what-is-a-text-editor:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;What is a text editor?&lt;/h1&gt;

&lt;p&gt;If we&amp;rsquo;re just talking about using Emacs as a text editor, then there is no comparison; Vim beats it, period.  But is our job description a text editor?  No.  We are system administrators, software developers, web designers, etc.  A text editor is a tool that we use to do our job (or hobby).  And any tool should be replaced when a better option is available.&lt;/p&gt;

&lt;p&gt;One simple example is &lt;code&gt;grep&lt;/code&gt;.  As a developer, you can immediately gain a productivity boost by replacing it with &lt;a href=&#34;http://beyondgrep.com/&#34;&gt;ack&lt;/a&gt; or &lt;a href=&#34;https://github.com/ggreer/the_silver_searcher&#34;&gt;ag&lt;/a&gt;.  Do they search faster than &lt;code&gt;grep&lt;/code&gt;?  No.  But since they&amp;rsquo;re so good at ignoring things (like your &lt;code&gt;.git&lt;/code&gt; directory) that for practical purposes they end up saving you a lot of time.&lt;/p&gt;

&lt;p&gt;As a text editor, I think Emacs is quite terrible.  Its key bindings are notoriously bad to the point that something called Emacs pinky exists.  If you&amp;rsquo;re an Emacs user not interested in Vim bindings you should seriously consider taking a look at &lt;a href=&#34;https://github.com/chrisdone/god-mode&#34;&gt;god-mode&lt;/a&gt; or &lt;a href=&#34;https://github.com/stephendavidmarsh/control-mode&#34;&gt;control-mode&lt;/a&gt;.  But where Emacs really excels is all of the things outside of text editing.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Emacs is a great operating system, if only it had a good text editor.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Well, the nice thing about an operating system is that you can write a text editor for it; that text editor is called &lt;a href=&#34;https://gitorious.org/evil/evil&#34;&gt;evil-mode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Now, as a text editor, Vim is still better than evil-mode for obvious reasons, so if you&amp;rsquo;re just swapping it out you&amp;rsquo;re at a net loss of productivity in terms of text editing.  However, what you &lt;em&gt;gain&lt;/em&gt; from all of the other things that Emacs can do far outweighs the missing features.&lt;/p&gt;

&lt;h1 id=&#34;enough-talk-give-me-real-life-examples:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Enough talk, give me real life examples!&lt;/h1&gt;

&lt;p&gt;There are a couple immediate advantages that Emacs has that Vim users have been requesting for a long time.  First, is asynchronous operations.  Second, is integration with background processes.  And third, multiple-monitor support.&lt;/p&gt;

&lt;p&gt;Here&amp;rsquo;s a quick video illustrating the difference:&lt;/p&gt;

&lt;iframe width=&#34;420&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/I6pvC3_zeP4&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;In the video, &lt;a href=&#34;https://github.com/flycheck/flycheck&#34;&gt;flycheck&lt;/a&gt;, &lt;a href=&#34;https://github.com/scrooloose/syntastic&#34;&gt;syntastic&lt;/a&gt;, &lt;a href=&#34;https://github.com/tpope/vim-dispatch&#34;&gt;vim-dispatch&lt;/a&gt;, &lt;a href=&#34;https://github.com/mileszs/ack.vim&#34;&gt;ack.vim&lt;/a&gt; and &lt;a href=&#34;https://github.com/Wilfred/ag.el&#34;&gt;ag.el&lt;/a&gt; are used.&lt;/p&gt;

&lt;h1 id=&#34;zero-to-hero:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Zero to hero&lt;/h1&gt;

&lt;p&gt;OK, I&amp;rsquo;ve caught your interest.  And now you want to use Emacs and be at the same efficiency as your Vim setup.  I&amp;rsquo;ll be frank with you.  My Emacs setup right now is &lt;em&gt;still&lt;/em&gt; not as efficient as my vim/tmux/zsh setup.  But I believe with enough time and tweaking I will eventually cross over, hence why I am sticking with it. But to get you started on the right track, here are steps to take.&lt;/p&gt;

&lt;h2 id=&#34;step-0-install-evil-mode:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Step 0: Install evil-mode&lt;/h2&gt;

&lt;p&gt;This is a given, but I figured I&amp;rsquo;d mention it.  This is the magical package which gives you Vim bindings.&lt;/p&gt;

&lt;p&gt;Remember though that evil-mode is an &lt;em&gt;emulation&lt;/em&gt; of Vim; it is &lt;em&gt;not&lt;/em&gt; Vim!  For example, you might try &lt;code&gt;cas&lt;/code&gt; and conclude that evil-mode is broken because it is changing a paragraph instead of a sentence.  That is, of course, until you realize that Emacs also has a notion of what a sentence is, and that the default value of &lt;code&gt;sentence-end-double-space&lt;/code&gt; is true.  Long story short, evil-mode will use Emacs functionality where it makes sense, so if something is not working as expected there is usually a good reason for it.&lt;/p&gt;

&lt;h2 id=&#34;step-1-resist-the-urge-to-google-it-initially:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Step 1: Resist the urge to Google it&amp;hellip;initially&lt;/h2&gt;

&lt;p&gt;I wasted a lot of time doing the thing most people do first: Google it.  The problem here is that you will find EmacsWiki.  The second problem is that EmacsWiki will contain &lt;em&gt;a lot&lt;/em&gt; of information, giving you the illusion that it is useful.  The third problem is that you will not know what it old and outdated, old and still useful, or new and useless.  Emacs has been around since 1976, so there is a lot of history go through.&lt;/p&gt;

&lt;p&gt;What you actually want to do is read the &lt;a href=&#34;http://www.gnu.org/software/emacs/manual/&#34;&gt;Emacs Manual&lt;/a&gt;.  And you should also read &lt;a href=&#34;http://www.gnu.org/software/emacs/manual/eintr.html&#34;&gt;Introduction to Programming Emacs Lisp&lt;/a&gt;.  If you are not going to learn how to program in Emacs Lisp, you should just stop now because you&amp;rsquo;re severely limiting the potential of Emacs.&lt;/p&gt;

&lt;h2 id=&#34;step-2-prepare-for-a-world-of-hurt-h-h-h-hlearning:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Step 2: Prepare for a world of hurt\^H\^H\^H\^Hlearning&lt;/h2&gt;

&lt;p&gt;Vim is difficult to learn because you&amp;rsquo;re learning a new language on how to interact with text.  Emacs, however, is difficult to learn because there is &lt;em&gt;so much&lt;/em&gt; to learn.  The &lt;em&gt;default&lt;/em&gt; distribution includes a email client, IRC client, file explorer, shell, and even tetris.  You will literally be learning a new operating system.  And operating systems have many applications; Emacs is no different.  You can choose to learn only one application, the text editor, but if you do that you might as well just stick with Vim.&lt;/p&gt;

&lt;h2 id=&#34;step-3-learn-how-to-help-the-help:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Step 3: Learn how to help the help&lt;/h2&gt;

&lt;p&gt;In Emacs, the prefix key for help is &lt;code&gt;C-h&lt;/code&gt;.  What this means is you hit &lt;code&gt;C-h&lt;/code&gt;, followed by another key to invoke help on something.  Typing &lt;code&gt;C-h C-h&lt;/code&gt; will give you the full list of possibilities.  When I first started, I found I used &lt;code&gt;f&lt;/code&gt;unction and &lt;code&gt;v&lt;/code&gt;ariable a lot.  In Emacs, &lt;em&gt;everything&lt;/em&gt; is a function (this is Lisp after all), so you can find out a lot about Emacs by reading the descriptions of functions.&lt;/p&gt;

&lt;h2 id=&#34;step-4-understanding-key-bindings:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Step 4: Understanding key bindings&lt;/h2&gt;

&lt;p&gt;It&amp;rsquo;s probably way too early to talk about this, but I feel this is a great way that describes the fundamental differences between customizing Vim vs customizing Emacs.&lt;/p&gt;

&lt;p&gt;First, let&amp;rsquo;s take an extremely common customization in Vim, where the cursor is centered after jumping to the next match:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;nb&#34;&gt;nnoremap&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;n&lt;/span&gt; nzz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Emacs does not have a notion of recursive vs non-recursive bindings, so it cannot be configured in the same fashion as Vim (doing it with key bindings would require you to define a throw away key binding in the middle).  However, the way you do it in Emacs is ultimately way more powerful and flexible.  One option is to do it like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;defadvice&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;evil-ex-search-next&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;after&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;advice-for-evil-ex-search-next&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;activate&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;evil-scroll-line-to-center&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;line-number-at-pos&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An advice lets you add behavior to an existing function without modifying it.  By default &lt;code&gt;n&lt;/code&gt; is bound to the command &lt;code&gt;evil-ex-search-next&lt;/code&gt;, so what we&amp;rsquo;re doing here is giving it some advice, such that &lt;em&gt;after&lt;/em&gt; the command is run, we center the line.  I&amp;rsquo;m a huge advocate of aspect oriented programming so when I found that this was built into Lisp I was jumping with joy.&lt;/p&gt;

&lt;p&gt;Another option is you could bind &lt;code&gt;n&lt;/code&gt; to a wrapper function which calls these two commands directly.&lt;/p&gt;

&lt;p&gt;While any path you take will be incredibly verbose in comparison to how Vim does it, there are a couple key take aways from this example.  One; every key is bound to a function (called a command in Emacs lingo).  Two; every function can be redefined entirely, or attached advice before, after, or around it.  Three; almost 80% of Emacs is written in Emacs Lisp.  This is where the &amp;ldquo;infinitely extensible&amp;rdquo; reputation comes from.&lt;/p&gt;

&lt;h2 id=&#34;step-5-understanding-major-and-minor-modes:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Step 5: Understanding major and minor modes&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve mentioned that Emacs is an operating system multiple times now, but to drive the point home, I want to briefly discuss major and minor modes.  You can have a single major mode and multiple minor modes, although there is &lt;a href=&#34;https://github.com/purcell/mmm-mode&#34;&gt;mmm-mode&lt;/a&gt; which allows you have multiple major modes.  A major mode is similar to &lt;code&gt;set filetype&lt;/code&gt; from Vim, and a minor mode is similar to a plugin like &lt;a href=&#34;https://github.com/tpope/vim-surround&#34;&gt;vim-surround&lt;/a&gt;, which spans all filetypes.  However, the biggest difference is that major modes in Emacs often change key bindings radically.&lt;/p&gt;

&lt;p&gt;For example, if you hit &lt;code&gt;M-x package-list-packages RET&lt;/code&gt; it will open up the package manager buffer.  Inside this buffer, you can use &lt;code&gt;C-n&lt;/code&gt; and &lt;code&gt;C-p&lt;/code&gt; to move lines up and down, just like the default Emacs bindings.  But you can also hit &lt;code&gt;n&lt;/code&gt; and &lt;code&gt;p&lt;/code&gt; instead of the chords, and keys like &lt;code&gt;i&lt;/code&gt;nstall, &lt;code&gt;d&lt;/code&gt;elete, and &lt;code&gt;h&lt;/code&gt;elp are available to you as well.  Emacs appears to be modal after all!&lt;/p&gt;

&lt;p&gt;Similarly, the customize buffer, via &lt;code&gt;M-x customize-group RET&lt;/code&gt; also sets up its own modal bindings; &lt;code&gt;TAB&lt;/code&gt; for example will jump to the next option.&lt;/p&gt;

&lt;p&gt;In Emacs it is common practice for modes to set up a host of bindings under the &lt;code&gt;C-c&lt;/code&gt; prefix.  I&amp;rsquo;m writing this post right now in &lt;a href=&#34;http://jblevins.org/projects/markdown-mode/&#34;&gt;markdown-mode&lt;/a&gt;, so I can use &lt;code&gt;C-c C-u&lt;/code&gt; to jump up a heading, but that binding will be completely different in a different mode.&lt;/p&gt;

&lt;p&gt;Essentially, activating a major-mode in Emacs is not much different from running a separate application on your operating system.&lt;/p&gt;

&lt;p&gt;This isn&amp;rsquo;t to say that you can&amp;rsquo;t do the same thing in Vim; in fact, email and IRC clients exist on Vim as well, but comparatively speaking these are rare due to the relative difficulty of implementation, and most are done as experiments.&lt;/p&gt;

&lt;h2 id=&#34;step-6-actually-getting-work-done:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Step 6: Actually getting work done&lt;/h2&gt;

&lt;p&gt;OK, so you&amp;rsquo;ve read the manual, you&amp;rsquo;ve learned the Emacs way, and you even know some basic Lisp now.  But unless you&amp;rsquo;re getting paid to customize Emacs and write Lisp, you didn&amp;rsquo;t get any work done yet.&lt;/p&gt;

&lt;p&gt;With that in mind, the first thing you will need to do is install all of the packages which replicate as most of your Vim setup as possible.&lt;/p&gt;

&lt;h3 id=&#34;auto-completion-engines:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Auto-completion engines&lt;/h3&gt;

&lt;p&gt;I&amp;rsquo;m torn between Emacs and Vim solutions.  With Vim, &lt;a href=&#34;https://github.com/Valloric/YouCompleteMe&#34;&gt;YouCompleteMe&lt;/a&gt; and &lt;a href=&#34;https://github.com/Shougo/neocomplete.vim&#34;&gt;NeoComplete&lt;/a&gt; offer amazing and fast fuzzy completion.  On Emacs, neither &lt;a href=&#34;https://github.com/auto-complete/auto-complete&#34;&gt;auto-complete&lt;/a&gt; or &lt;a href=&#34;https://github.com/company-mode/company-mode&#34;&gt;company-mode&lt;/a&gt; offer fuzzy completion yet.  auto-complete has a fuzzy match algorithm, but it has to be manually invoked, rendering it inferior to always-fuzzy-on.  While you have to give up fuzzy matching (for now), in exchange you get real documentation tooltips.  This is far superior to Vim&amp;rsquo;s use of the preview window which ends up bouncing your cursor all over the place as the window shows and hides.&lt;/p&gt;

&lt;p&gt;company-mode has a unique take on auto-completion where it will reject keystrokes if it doesn&amp;rsquo;t match any possibilities.  It can also search available completions and filter as well, something I&amp;rsquo;ve not seen in any other completion engine.&lt;/p&gt;

&lt;p&gt;auto-complete is far more popular than company-mode, so you will find that more packages integrate with it, however it&amp;rsquo;s pretty straightforward to write an adapter to get sources to work with company-mode.  I&amp;rsquo;d say try both and see which one you like more!&lt;/p&gt;

&lt;p&gt;Snippets are another huge time saver.  In Vim, you got &lt;a href=&#34;https://github.com/SirVer/ultisnips&#34;&gt;UltiSnips&lt;/a&gt; and &lt;a href=&#34;https://github.com/Shougo/neosnippet.vim&#34;&gt;NeoSnippet&lt;/a&gt;, whereas on Emacs you only got one contender, &lt;a href=&#34;https://github.com/capitaomorte/yasnippet&#34;&gt;YASnippet&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;moving-around:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Moving around&lt;/h3&gt;

&lt;p&gt;Emacs out of the box has superior capabilities for navigation; the built-in package &lt;a href=&#34;http://www.emacswiki.org/emacs/InteractivelyDoThings&#34;&gt;ido&lt;/a&gt; makes quick work of navigating files and buffers.  You can go a long way knowing just &lt;code&gt;C-x C-f&lt;/code&gt; and &lt;code&gt;C-x b&lt;/code&gt;.  However, most people will be used to the capabilities of &lt;a href=&#34;https://github.com/kien/ctrlp.vim&#34;&gt;ctrlp&lt;/a&gt; and &lt;a href=&#34;https://github.com/Shougo/unite.vim&#34;&gt;unite&lt;/a&gt;, which can recursively fuzzy search the project.  In Emacs, &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;projectile&lt;/a&gt; and &lt;a href=&#34;https://github.com/d11wtq/fiplr&#34;&gt;filpr&lt;/a&gt; will do the trick.&lt;/p&gt;

&lt;p&gt;Another powerful package worth mentioning is &lt;a href=&#34;https://github.com/emacs-helm/helm&#34;&gt;helm&lt;/a&gt;.  Although it shares many similarities with projectile, it also excels in areas that projectile does not, and vice versa, causing me to have both installed.  The situation is similar to me having both ctrlp and unite installed in Vim.&lt;/p&gt;

&lt;h3 id=&#34;fuzzy-extended-command-search:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Fuzzy extended command search&lt;/h3&gt;

&lt;p&gt;Sublime Text has a very useful feature called the command palette.  It&amp;rsquo;s a fuzzy searchable list of commands that you can use to operate on the current buffer.  Emacs has a very similar feature, called &lt;code&gt;M-x&lt;/code&gt;, which is bound to &lt;code&gt;execute-extended-command&lt;/code&gt;.  Unlike Sublime Text, it will not show you a list or description.  The default behavior requires you to type some things and use &lt;code&gt;TAB&lt;/code&gt; completion.  Luckily, you can get half-way there by installing a package called &lt;a href=&#34;https://github.com/nonsequitur/smex&#34;&gt;smex&lt;/a&gt;, which will give you the fuzzy searchable list (no descriptions though).&lt;/p&gt;

&lt;p&gt;This is a &lt;em&gt;very&lt;/em&gt; &lt;strong&gt;&lt;em&gt;very&lt;/em&gt;&lt;/strong&gt; commonly used operation in Emacs.  It pains me that the &lt;code&gt;ALT&lt;/code&gt; key is so hard to reach, requiring you to tuck your thumb under either hand on most keyboards.  The nice thing about Vim bindings though you can easily add normal mode mappings.  I have this bound to &lt;code&gt;SPC SPC&lt;/code&gt;, so I can just double tap the space to run a command.&lt;/p&gt;

&lt;h3 id=&#34;memorizing-key-bindings:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Memorizing key bindings&lt;/h3&gt;

&lt;p&gt;Emacs bindings are pretty hard to remember (not nearly as mnemonic as Vim keys).  Luckily, the most often used Emacs bindings are prefixed with &lt;code&gt;C-x&lt;/code&gt; and &lt;code&gt;C-c&lt;/code&gt;.  This actually makes mixing Emacs and Vim very easy, because you are only giving up decrementing a number (which you can easily rebind), and &lt;code&gt;C-c&lt;/code&gt;, which most people will be using &lt;code&gt;Esc&lt;/code&gt; anyway.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kbkbkbkb1/guide-key&#34;&gt;guide-key&lt;/a&gt; is an immensely useful package that will tell you all the available keys and what they are bound to after hitting a prefix key.&lt;/p&gt;

&lt;h3 id=&#34;file-browsers:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;File browsers&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/scrooloose/nerdtree&#34;&gt;NERDTree&lt;/a&gt; and &lt;a href=&#34;https://github.com/Shougo/vimfiler.vim&#34;&gt;vimfiler&lt;/a&gt; are both excellent plugins for Vim that give you a file browser on the side.&lt;/p&gt;

&lt;p&gt;I think fuzzy searching is a far more useful and productive way to navigate around, but file browsers hold a niche in my tool belt for when I&amp;rsquo;m working a foreign project where I don&amp;rsquo;t know where all the files are laid out.  I haven&amp;rsquo;t spent much time with file browsers for Emacs, but there are many available.  The built-in &lt;code&gt;speedbar&lt;/code&gt; will open up a new frame.  An installable package named &lt;code&gt;sr-speedbar&lt;/code&gt; will take the speedbar and place it inside a split window instead.&lt;/p&gt;

&lt;p&gt;A new kid of the block, released just a couple weeks ago is &lt;a href=&#34;https://github.com/sabof/project-explorer&#34;&gt;project-explorer&lt;/a&gt;, also looks very promising.&lt;/p&gt;

&lt;h3 id=&#34;your-choice-of-language-specific-packages:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Your choice of language specific packages&lt;/h3&gt;

&lt;p&gt;Last but not least, you will need to install mode packages, e.g. &lt;code&gt;coffee-mode&lt;/code&gt;, &lt;code&gt;stylus-mode&lt;/code&gt;, &lt;code&gt;jade-mode&lt;/code&gt;, &lt;code&gt;js2-mode&lt;/code&gt; etc.&lt;/p&gt;

&lt;h2 id=&#34;step-7-practice-makes-perfect:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Step 7: Practice makes perfect&lt;/h2&gt;

&lt;p&gt;And of course, practice practice practice!&lt;/p&gt;

&lt;h1 id=&#34;some-other-things-to-consider:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Some other things to consider&lt;/h1&gt;

&lt;p&gt;Here are some &lt;em&gt;subjective&lt;/em&gt; opinions I have on some&amp;hellip;softer things to consider&amp;hellip;&lt;/p&gt;

&lt;h2 id=&#34;vim-developers-are-very-tenacious:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Vim developers are &lt;em&gt;very&lt;/em&gt; tenacious&lt;/h2&gt;

&lt;p&gt;There is no dispute that Emacs Lisp is by far the superior language when compared to VimScript, but that doesn&amp;rsquo;t stop VimScript plugin developers from making some really amazing plugins and pushing the envelope.  Vim plugin developers always find a way, no matter how hacky the solution might be.  It&amp;rsquo;s fun to be &amp;ldquo;hacking&amp;rdquo; instead of &amp;ldquo;developing&amp;rdquo; after all.&lt;/p&gt;

&lt;p&gt;To illustrate this point, &lt;a href=&#34;https://github.com/wincent/Command-T&#34;&gt;commandt&lt;/a&gt; first came out early 2010, and &lt;a href=&#34;https://github.com/kien/ctrlp.vim&#34;&gt;ctrlp&lt;/a&gt; came out third quarter of 2011.  &lt;a href=&#34;https://github.com/bbatsov/projectile&#34;&gt;projectile&lt;/a&gt; and &lt;a href=&#34;https://github.com/d11wtq/fiplr&#34;&gt;fiplr&lt;/a&gt; both got recursive fuzzy searching the summer of &lt;strong&gt;2013&lt;/strong&gt; (yes, &lt;em&gt;this&lt;/em&gt; year).&lt;/p&gt;

&lt;h2 id=&#34;vim-is-much-more-popular-than-emacs:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Vim is &lt;em&gt;much&lt;/em&gt; more popular than Emacs&lt;/h2&gt;

&lt;p&gt;While popularity and internet stars as a metric does not necessarily correlate with the quality of a product, the side effects will definitely be felt if you use Emacs.&lt;/p&gt;

&lt;p&gt;For starters, for every Emacs colorscheme there will be at least 10 Vim colorschemes.  Good luck finding one that works well in the terminal.  I can count on one hand the number of themes I&amp;rsquo;ve found usable in the terminal (I use &lt;code&gt;monokai&lt;/code&gt;).  The irony is that Emacs packages tend to understand your code a lot better, for example &lt;code&gt;js2-mode&lt;/code&gt; is actually a full-blown parser, but Vim will still highlight more symbols because its colorschemes will define a lot more syntax rules.  The best themes with the most rules for Emacs are currently &lt;code&gt;zenburn&lt;/code&gt; and &lt;code&gt;solarized&lt;/code&gt; (unfortunately I&amp;rsquo;m not a fan of either).&lt;/p&gt;

&lt;p&gt;Another effect of popularity is that plugins tend to have more bells and whistles than their Emacs counterparts.  This, coupled with the attitude of Vim plugin developers mentioned earlier, results in a impressive set of plugins that no other ecosystem can match.&lt;/p&gt;

&lt;h2 id=&#34;vim-is-more-user-friendly:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Vim is more user friendly&lt;/h2&gt;

&lt;p&gt;I&amp;rsquo;ve mentioned before that if you want to use Emacs to its fullest potential, you &lt;em&gt;must&lt;/em&gt; learn Lisp.  Unless you&amp;rsquo;re lucky and the package you&amp;rsquo;re using has a very active and responsive maintainer, you are better off trying to implement that feature or bug on your own and then submit a pull request later.&lt;/p&gt;

&lt;h1 id=&#34;is-it-worth-it:1dfbe80e979aabf9b2dd7cd9b5de696e&#34;&gt;Is it worth it?&lt;/h1&gt;

&lt;p&gt;At the end of all of this, you&amp;rsquo;re probably thinking to yourself, I&amp;rsquo;m already at &lt;code&gt;X&lt;/code&gt; level of productivity, will switching to Emacs get me to &lt;code&gt;X + Y&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;One of the major reasons for me switching was an excuse to &lt;a href=&#34;http://bling.github.io/blog/2013/09/09/vim-in-emacs-bootstrap/&#34;&gt;learn a Lisp dialect&lt;/a&gt;.  Let me tell you; this reason alone is worth it to try Emacs.  Lisp will make you a better programmer by giving you a new perspective.  It will also make you question why all the complicated imperative languages today still do not compare to the simplicity and power that was available to us over 30 years ago.&lt;/p&gt;

&lt;p&gt;Yes, the learning curve is high.  But fear not!  You do not have to start from scratch.  You already know Vim, so you got the text editing part covered, which leaves just learning how to do things in Emacs one feature at a time.  If you configure Emacs to use the same key bindings as your Vim config, as I have in my &lt;a href=&#34;https://github.com/bling/dotvim&#34;&gt;dotvim&lt;/a&gt; and &lt;a href=&#34;https://github.com/bling/dotemacs&#34;&gt;dotemacs&lt;/a&gt; configs, it becomes seamless to switch between the two.  Lastly, you are not picking Vim &lt;em&gt;or&lt;/em&gt; Emacs, but rather you are picking Vim &lt;em&gt;and&lt;/em&gt; Emacs!  Use the best tool for the job.&lt;/p&gt;

&lt;p&gt;For me, Emacs is my &lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt; key, the set of customizations that are non-standard to Vim, just like &lt;code&gt;set nocompatible&lt;/code&gt; is the set of customizations that are non-standard to Vi.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Emacs as my &lt;Leader&gt; evil-mode</title>
      <link>http://bling.github.io/blog/2013/10/16/emacs-as-my-leader-evil-mode/</link>
      <pubDate>Wed, 16 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2013/10/16/emacs-as-my-leader-evil-mode/</guid>
      <description>&lt;p&gt;Hey guys, I just wanted to post a quick demo video on &lt;a href=&#34;https://gitorious.org/evil&#34;&gt;evil-mode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The video is targetted at intermediate/advanced Vim users, so if you&amp;rsquo;re just starting out you might miss some things. But&amp;hellip;hopefully it&amp;rsquo;ll be an enjoyable watch regardless!&lt;/p&gt;

&lt;iframe width=&#34;630&#34; height=&#34;473&#34; src=&#34;//www.youtube.com/embed/Uz_0i27wYbg&#34; frameborder=&#34;0&#34; allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;Let me know what you guys think of it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Vim in Emacs Bootstrap</title>
      <link>http://bling.github.io/blog/2013/09/09/vim-in-emacs-bootstrap/</link>
      <pubDate>Mon, 09 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2013/09/09/vim-in-emacs-bootstrap/</guid>
      <description>

&lt;p&gt;Did I wake up on the wrong side of the bed?&lt;/p&gt;

&lt;p&gt;My New Year&amp;rsquo;s resolution for 2013 was to learn Vim. I was so new to Vim that I did not even know how to &lt;a href=&#34;http://stackoverflow.com/questions/14107198/vim-delete-whitespace-between-2-lines&#34;&gt;join lines&lt;/a&gt; properly. However, I was diligent, patient, and stubborn enough to stick at it. It didn&amp;rsquo;t take long for me to &lt;a href=&#34;http://bling.github.io/blog/2013/02/10/love-affair-with-vim&#34;&gt;fall in love&lt;/a&gt;. I even ended up writing a &lt;a href=&#34;https://github.com/bling/vim-airline&#34;&gt;plugin&lt;/a&gt; for Vim that got so popular that I was writing VimL as a second job.&lt;/p&gt;

&lt;p&gt;Sounds like I&amp;rsquo;m pretty happy with Vim (and I am), so why am I trying Emacs?&lt;/p&gt;

&lt;p&gt;Curiosity is a major reason. But more I think the philosophy of Emacs fits my personality better. The Vim community is very much divided into two camps: the text editor people, and the people who try to turn Vim into an IDE. I am in the latter. My vim &lt;a href=&#34;https://github.com/bling/dotvim&#34;&gt;distribution&lt;/a&gt; has over 90 plugins. While I haven&amp;rsquo;t yet run into Vim&amp;rsquo;s limitations of trying to use it this way, I can already see the walls coming up&amp;hellip;&lt;/p&gt;

&lt;p&gt;But here&amp;rsquo;s the thing, I&amp;rsquo;m addicted to &lt;strong&gt;modal editing&lt;/strong&gt;, not Vim. It just so happens that Vim is the best implementation of modal editing, but Emacs has something that does a pretty damn good job too! And it&amp;rsquo;s none other than &lt;a href=&#34;http://www.emacswiki.org/emacs/Evil&#34;&gt;evil-mode&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;With evil-mode, it&amp;rsquo;s finally possible to have the best of both worlds. The power of modal editing with the near limitless extensibility of Emacs.&lt;/p&gt;

&lt;p&gt;And as an added bonus I can finally have an excuse to learn a Lisp dialect. I discovered with Vim that customizing your editor is an incredible catalyst for learning a new language. It wasn&amp;rsquo;t my intention to memorize a sizable portion of the VimL standard library when I started using Vim, but it happened anyway once I started tweaking and customizing&amp;hellip;&lt;/p&gt;

&lt;p&gt;My goal is that by the end of this post you&amp;rsquo;ll have a working Emacs installation with Vim keybindings out of the box.&lt;/p&gt;

&lt;h1 id=&#34;back-to-basics:dd5dcba472bf99cee57e5ad68e630909&#34;&gt;Back to Basics&lt;/h1&gt;

&lt;p&gt;The best way to learn is to start from scratch. And so I did exactly that starting with the built-in tutorial &lt;code&gt;C-h t&lt;/code&gt;. While the purpose of this blog post is to get modal editing working in Emacs, you&amp;rsquo;re not going to be able to make &lt;em&gt;everything&lt;/em&gt; modal, so you still need to know basic commands to navigate around.&lt;/p&gt;

&lt;h1 id=&#34;things-you-need-to-know:dd5dcba472bf99cee57e5ad68e630909&#34;&gt;Things you need to know&lt;/h1&gt;

&lt;p&gt;There are a couple important Emacs keys that you should know.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;C-g&lt;/code&gt; is the universal &amp;ldquo;get me out of here&amp;rdquo; key, equivalent to &lt;code&gt;C-c&lt;/code&gt; in Vim.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-h&lt;/code&gt; is the &amp;ldquo;help&amp;rdquo; prefix. &lt;code&gt;C-h C-h&lt;/code&gt; will show you all possible options. I&amp;rsquo;ve found that I use &lt;code&gt;C-h f&lt;/code&gt; very often, which is used to lookup help for functions.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-x&lt;/code&gt; is a also very important, as it&amp;rsquo;s the prefix for many common things like saving and finding files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;C-c&lt;/code&gt; by &lt;a href=&#34;http://www.gnu.org/software/emacs/manual/html_node/elisp/Key-Binding-Conventions.html&#34;&gt;convention&lt;/a&gt; are used for many things, including the equivalent of &lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt; for user customizations when followed by letters, but also for major and minor mode bindings.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;setting-up-your-vimrc:dd5dcba472bf99cee57e5ad68e630909&#34;&gt;Setting up your &amp;ldquo;vimrc&amp;rdquo;&lt;/h1&gt;

&lt;p&gt;In Emacs, this is the &lt;code&gt;~/.emacs&lt;/code&gt; file. But just like in Vim, where you usually have a &lt;code&gt;~/.vim&lt;/code&gt; directory for various plugins and configuration, Emacs has the &lt;code&gt;~/.emacs.d&lt;/code&gt; directory. As an added bonus, &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; is automatically loaded, so if you put your dotfiles up on GitHub it&amp;rsquo;s as simple as cloning it to &lt;code&gt;~/.emacs.d&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&#34;what-s-with-the:dd5dcba472bf99cee57e5ad68e630909&#34;&gt;What&amp;rsquo;s with the (((())))?&lt;/h1&gt;

&lt;p&gt;Going through the documentation is one thing, but making the first change to your &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; file is daunting, at least for me it was. While Vim also has its own scripting language, VimL, it is much more newbie friendly.&lt;/p&gt;

&lt;p&gt;How do you turn on line numbers? You add &lt;code&gt;set number&lt;/code&gt; to your vimrc. It&amp;rsquo;s simple, straightforward, and obvious. You don&amp;rsquo;t even know you&amp;rsquo;re scripting in Vim; it just looks like a configuration file at this point. How do you do that in Emacs? First you search on Google, which links you to this &lt;a href=&#34;http://www.emacswiki.org/emacs/LineNumbers&#34;&gt;EmacsWiki&lt;/a&gt; article. If that doesn&amp;rsquo;t scare you from using Emacs I don&amp;rsquo;t know what will.&lt;/p&gt;

&lt;p&gt;The short answer is, you add &lt;code&gt;(global-linum-mode t)&lt;/code&gt; to your &lt;code&gt;init.el&lt;/code&gt; file. Right off the bat the questions would be, is that a variable, a function? What is &lt;code&gt;t&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Configuring Emacs throws you into Lisp from the get go, so what you want to do is actually read &lt;a href=&#34;http://www.gnu.org/software/emacs/manual/eintr.html&#34;&gt;Introduction to Programming in Emacs Lisp&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;lisp-basics:dd5dcba472bf99cee57e5ad68e630909&#34;&gt;Lisp basics&lt;/h1&gt;

&lt;p&gt;You&amp;rsquo;re going to be seeing a lot of Lisp, so let&amp;rsquo;s summarize the basics:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;set&lt;/code&gt; will set a variable, but you will rarely see this.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setq&lt;/code&gt; is &lt;em&gt;very&lt;/em&gt; frequently seen. The q stands for quote, which will sidetrack you to understanding what a &lt;a href=&#34;http://stackoverflow.com/questions/134887/when-to-use-quote-in-lisp&#34;&gt;quote&lt;/a&gt; is.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setq-default&lt;/code&gt; sets a variable if it&amp;rsquo;s not already set/overridden.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;defun&lt;/code&gt; defines a function.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;-p&lt;/code&gt; by convention is added to functions that return true or false (the p stands for predicate).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that things are a bit more readable, we can begin setting up our configuration to get evil-mode installed.&lt;/p&gt;

&lt;h1 id=&#34;package-management:dd5dcba472bf99cee57e5ad68e630909&#34;&gt;Package management&lt;/h1&gt;

&lt;p&gt;Emacs 24 comes with built-in &lt;a href=&#34;http://www.emacswiki.org/emacs/ELP&#34;&gt;package management&lt;/a&gt;. The default GNU repository doesn&amp;rsquo;t really have many packages, but luckily there&amp;rsquo;s a community driven repository named &lt;a href=&#34;http://melpa.milkbox.net/&#34;&gt;MELPA&lt;/a&gt; where up to date packages are built directly from GitHub.&lt;/p&gt;

&lt;p&gt;So, let&amp;rsquo;s add the MELPA into our &lt;code&gt;~/.emacs.d/init.el&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;;;; this loads the package manager&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;package&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;;; here there&amp;#39;s a variable named package-archives, and we are adding the MELPA repository to it&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;add-to-list&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;package-archives&lt;/span&gt;
             &lt;span class=&#34;o&#34;&gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;melpa&amp;quot;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;quot;http://melpa.milkbox.net/packages/&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;

&lt;span class=&#34;c1&#34;&gt;;;; loads packages and activates them&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;package-initialize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;OK, straightforward so far.&lt;/p&gt;

&lt;h1 id=&#34;installing-evil:dd5dcba472bf99cee57e5ad68e630909&#34;&gt;Installing evil&lt;/h1&gt;

&lt;p&gt;Next up is the all important &lt;code&gt;M-x&lt;/code&gt; binding (on modern keyboards M is the Alt key). This is sort of like Vim&amp;rsquo;s &lt;code&gt;:&lt;/code&gt; where you can type commands. Here we are going to do a &lt;code&gt;M-x package-refresh-contents RET&lt;/code&gt;. In Emacs, &lt;code&gt;RET&lt;/code&gt; is the convention for &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt;. This will refresh the repository of available packages. And finally, &lt;code&gt;M-x package-install RET evil RET&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;And now it&amp;rsquo;s installed!&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s not enabled by default, so we need to append the following lines to our &lt;code&gt;init.el&lt;/code&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-cl&#34; data-lang=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nb&#34;&gt;require&lt;/span&gt; &lt;span class=&#34;ss&#34;&gt;&amp;#39;evil&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;evil-mode&lt;/span&gt; &lt;span class=&#34;no&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, &lt;code&gt;C-x C-c&lt;/code&gt; to quit Emacs and restart it. If you&amp;rsquo;re feeling adventurous you can use &lt;code&gt;M-x eval-buffer RET&lt;/code&gt; instead.&lt;/p&gt;

&lt;h1 id=&#34;finale:dd5dcba472bf99cee57e5ad68e630909&#34;&gt;Finale&lt;/h1&gt;

&lt;p&gt;Congratulations! You have a working Emacs installation with Vim modal editing!&lt;/p&gt;

&lt;p&gt;You may notice that in addition to &lt;code&gt;C-c&lt;/code&gt;, &lt;code&gt;C-h&lt;/code&gt;, and &lt;code&gt;C-x&lt;/code&gt; that I mentioned earlier, &lt;code&gt;C-u&lt;/code&gt; will not scroll up half a page as you would expect. This is because by default this is mapped to the Emacs &lt;code&gt;universal-argument&lt;/code&gt; function, which is used for repeating. You can of course customize all of this, but I&amp;rsquo;ll let you take it from here&amp;hellip;&lt;/p&gt;

&lt;p&gt;And so there you have it!&lt;/p&gt;

&lt;p&gt;TLDR: &lt;code&gt;git clone https://github.com/bling/emacs-evil-bootstrap.git ~/.emacs.d&lt;/code&gt; will automate this entire blog post and let you try Vim in Emacs in 10-20 seconds.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Modularizing VimScript</title>
      <link>http://bling.github.io/blog/2013/08/16/modularizing-vimscript/</link>
      <pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2013/08/16/modularizing-vimscript/</guid>
      <description>

&lt;h1 id=&#34;the-prerequisites:63ea627920250852a8af5077bddb656f&#34;&gt;The prerequisites&lt;/h1&gt;

&lt;p&gt;First off, there are two very good resources that are required reading in addition to what&amp;rsquo;s provided in the official documentation.  Steve Losh&amp;rsquo;s &lt;a href=&#34;http://learnvimscriptthehardway.stevelosh.com/&#34;&gt;Learn Vim the Hard Way&lt;/a&gt; is an excellent book and I highly recommend it.  The &lt;a href=&#34;http://www.ibm.com/developerworks/library/l-vim-script-1/&#34;&gt;IBM Series&lt;/a&gt; by Dr. Damian Conway is another great resource.  Without these I would not have been able to do what I have achieved, so thanks to them!&lt;/p&gt;

&lt;h1 id=&#34;where-i-started:63ea627920250852a8af5077bddb656f&#34;&gt;Where I started&lt;/h1&gt;

&lt;p&gt;When I first wrote &lt;a href=&#34;https://github.com/bling/vim-bufferline&#34;&gt;vim-bufferline&lt;/a&gt; and &lt;a href=&#34;https://github.com/bling/vim-airline&#34;&gt;vim-airline&lt;/a&gt; I was very much a newbie Vim scripter and I tried to follow as many existing patterns as possible.  It was evident that the community at large had a very &amp;ldquo;C-like&amp;rdquo; mentality, in that most things were done with functions declared in the global scope (I don&amp;rsquo;t know if this still holds true for modern C development, but as an expression I think people will get what I&amp;rsquo;m saying).  Many of the older scripts (pre GitHub) tended to be large, single file plugins which lived under the &lt;code&gt;plugin&lt;/code&gt; folder.  For example, &lt;a href=&#34;http://www.vim.org/scripts/script.php?script_id=2438&#34;&gt;EasyGrep&lt;/a&gt; is a 3000+ line plugin that helps you search and replace in Vim.&lt;/p&gt;

&lt;p&gt;Most tutorials also taught writing functions in this fashion (most likely due to simplicity).  For example, this is from &lt;a href=&#34;http://www.ibm.com/developerworks/library/l-vim-script-1/&#34;&gt;part 1&lt;/a&gt; of the IBM developer series:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; ToggleSyntax&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
   &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; exists&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;quot;g:syntax_on&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;syntax&lt;/span&gt; off
   &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;
      &lt;span class=&#34;nb&#34;&gt;syntax&lt;/span&gt; enable
   &lt;span class=&#34;k&#34;&gt;endif&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;endfunction&lt;/span&gt;
nmap &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;silent&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; ;s :&lt;span class=&#34;k&#34;&gt;call&lt;/span&gt; ToggleSyntax&lt;span class=&#34;p&#34;&gt;()&amp;lt;&lt;/span&gt;CR&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We all have to start somewhere, but what I found was that these patterns and practices followed beyond their original intention and into plugins.&lt;/p&gt;

&lt;p&gt;I think part of the problem is that Vim has a very unique scoping system, in that you can scope variables to a script, window, or buffer, for example.  People ended up using this as a form of encapsulation:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; s:text &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; s:somefile#set_text&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;val&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; s:text &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;a&lt;/span&gt;:val
&lt;span class=&#34;k&#34;&gt;endfunction&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;g&lt;/span&gt;:somefile#get_text&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; s:text
&lt;span class=&#34;k&#34;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;g:&lt;/code&gt; variables are your exposed public API, and the &lt;code&gt;s:&lt;/code&gt; variables are private.  That&amp;rsquo;s all good, but &lt;em&gt;everything is still global!&lt;/em&gt;&lt;/p&gt;

&lt;h1 id=&#34;where-i-am-now:63ea627920250852a8af5077bddb656f&#34;&gt;Where I am now&lt;/h1&gt;

&lt;p&gt;There is nothing particular wrong with the approach of using global variables and functions.  Many complex software systems have been designed this way with much success, and often times, they perform much faster than counterparts with &amp;ldquo;objects&amp;rdquo; and &amp;ldquo;polymorphism&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;Nonetheless, everything has pros and cons, and the cost of maintenance goes up when you have a bunch of global variables interacting with each other.&lt;/p&gt;

&lt;p&gt;The more VimScript I wrote the more I sought for a way to manage complexity and splitting up my code into smaller, manageable pieces.&lt;/p&gt;

&lt;h1 id=&#34;modularizing-vimscript:63ea627920250852a8af5077bddb656f&#34;&gt;Modularizing VimScript&lt;/h1&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at how we can create an object that is transient, has state, and contains methods you can invoke, like any modern OOP language can do.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; myobject#&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; obj &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; {}
  &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; obj._cats &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; []

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; obj.add_cat&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;call&lt;/span&gt; add&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;self._cats&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;(^.^)&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;endfunction&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; obj.meow&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;cat&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;in&lt;/span&gt; self._cats
      echo &lt;span class=&#34;k&#34;&gt;cat&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;endfor&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;endfunction&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; obj
&lt;span class=&#34;k&#34;&gt;endfunction&lt;/span&gt;

&lt;span class=&#34;c&#34;&gt;&amp;quot; somewhere else&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;x&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; myobject#&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;x&lt;/span&gt;.add_cat&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;call&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;x&lt;/span&gt;.meow&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This might look familiar to some of you.  Yes, it&amp;rsquo;s almost the same as the &lt;a href=&#34;https://www.google.com/search?q=javascript+module+pattern&#34;&gt;JavaScript Module Pattern&lt;/a&gt;.  Unfortunately, closures are not supported, but otherwise all of the usual benefits apply here, mainly controlled visibility into private state &lt;strong&gt;and&lt;/strong&gt; &lt;strong&gt;&lt;em&gt;transience!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;You can even take this concept further and replicate &amp;ldquo;static&amp;rdquo; functions:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; s:object#private_static&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;endfunction&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;g&lt;/span&gt;:object#public_static&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;endfunction&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;g&lt;/span&gt;:object#&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; obj &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; {}

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; obj.public&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;endfunction&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; obj._private&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;endfunction&lt;/span&gt;

  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; obj
&lt;span class=&#34;k&#34;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yep, same story as JavaScript here &amp;ndash; &lt;code&gt;_&lt;/code&gt; variables/functions are &amp;ldquo;private&amp;rdquo;.&lt;/p&gt;

&lt;h1 id=&#34;where-from-here:63ea627920250852a8af5077bddb656f&#34;&gt;Where from here?&lt;/h1&gt;

&lt;p&gt;Does this mean we should throw out procedural programming and go full on object oriented?  Hell no.  &lt;a href=&#34;http://static.springsource.org/spring/docs/2.5.x/api/org/springframework/aop/framework/AbstractSingletonProxyFactoryBean.html&#34;&gt;This&lt;/a&gt; is what happens when you go too far!  But we should always take a look at what we&amp;rsquo;re doing and use the best tool and technique for the job.  Sometimes that&amp;rsquo;s procedural, other times it&amp;rsquo;s object-oriented.  It pays to be flexible.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>1000 stars in 1 month</title>
      <link>http://bling.github.io/blog/2013/07/30/1000-stars-in-1-month/</link>
      <pubDate>Tue, 30 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2013/07/30/1000-stars-in-1-month/</guid>
      <description>

&lt;h1 id=&#34;1000-stars-in-1-month:d6489e8b08d05f74444a08a201ab5e81&#34;&gt;1000 stars in 1 month&lt;/h1&gt;

&lt;p&gt;One month ago I pushed the first &lt;a href=&#34;https://github.com/bling/vim-airline/commit/25b9d4d48bd8c0a3daf3859998825e2e55562f70&#34;&gt;commit&lt;/a&gt; of my plugin &lt;a href=&#34;https://github.com/bling/vim-airline&#34;&gt;vim-airline&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Two weeks later I wrote a blog &lt;a href=&#34;http://bling.github.io/blog/2013/07/15/flight-of-an-open-source-project/&#34;&gt;post&lt;/a&gt; about the experience.  By that time the plugin gained over 700 stars.&lt;/p&gt;

&lt;p&gt;Two more weeks later, today the project has over 1000 stars.  Here are some other numbers:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;35 merged pull requests&lt;/li&gt;
&lt;li&gt;8 contributed airline themes&lt;/li&gt;
&lt;li&gt;4 contributed ctrlp themes&lt;/li&gt;
&lt;li&gt;23 total contributors&lt;/li&gt;
&lt;li&gt;15 plugins integrated&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wow!  That is all I can say&amp;hellip;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Smart tab expansions in Vim with expression mappings</title>
      <link>http://bling.github.io/blog/2013/07/21/smart-tab-expansions-in-vim-with-expression-mappings/</link>
      <pubDate>Sun, 21 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2013/07/21/smart-tab-expansions-in-vim-with-expression-mappings/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve been having a small itch for a while now, and it&amp;rsquo;s a very simple thing &amp;ndash; I want to make my tab smarter.  This all starts with a dive into &lt;a href=&#34;http://www.emmet.io&#34;&gt;Emmet&lt;/a&gt;.  To understand what it is, here&amp;rsquo;s a quick introduction.  First, you type something using its syntax:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;div&amp;gt;li*4
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and after you &amp;ldquo;expand&amp;rdquo; it, usually with a hotkey, and it gets converted to&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-html&#34; data-lang=&#34;html&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
  &lt;span class=&#34;nt&#34;&gt;&amp;lt;li&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can imagine, this saves you &lt;em&gt;a lot&lt;/em&gt; of typing and lets you prototype a web page (or CSS) in no time once you learn the syntax.  It is snippets on steriods!  The Sublime &lt;a href=&#34;https://github.com/sergeche/emmet-sublime&#34;&gt;plugin&lt;/a&gt; handles this perfectly.  It maps &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; as the expansion key.  Hitting tab after typing &lt;code&gt;div&amp;gt;li*4&lt;/code&gt; will expand it and put the cursor at the first &lt;code&gt;&amp;lt;li&amp;gt;|&amp;lt;/li&amp;gt;&lt;/code&gt;.  Then after you type something, if you hit &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt; again, it will jump to the next &lt;code&gt;li&lt;/code&gt;.  It is smart enough to know whether to expand or jump to the next tag.&lt;/p&gt;

&lt;p&gt;So how does this functionality look like in Vim?  First, you must install the &lt;a href=&#34;https://github.com/mattn/zencoding-vim&#34;&gt;zencoding-vim&lt;/a&gt; plugin to get this functionality (Emmet used to be named Zen Coding).  However, by default it&amp;rsquo;s mappings are &lt;code&gt;&amp;lt;C-y&amp;gt;,&lt;/code&gt; to expand, and &lt;code&gt;&amp;lt;C-y&amp;gt;n&lt;/code&gt; to jump to the next tag.  There are two problems here.  First, these mappings are &lt;strong&gt;really&lt;/strong&gt; awkward to type.  And secondly, there are two mappings!  You could, of course, remap it do something else, but let&amp;rsquo;s be honest, &lt;code&gt;&amp;lt;leader&amp;gt;&lt;/code&gt; whatever just does not compare with &lt;code&gt;&amp;lt;tab&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;How can we replicate this functionality in Vim?&lt;/p&gt;

&lt;h1 id=&#34;expression-mappings:91868e466ddaafbf7a8c06537dbb09f4&#34;&gt;Expression Mappings&lt;/h1&gt;

&lt;p&gt;Most of the time, you will see people do mappings in Vim like &lt;code&gt;nnoremap j gj&lt;/code&gt; which is a very simple and straightforward mapping.  Other times you may see something like &lt;code&gt;nnoremap Q :call CloseWindow()&amp;lt;cr&amp;gt;&lt;/code&gt; where a key is mapped to a function.  But rarely will you see anyone use &lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; mappings.  What are these?  Long story short, you can determine what to map based on the return value of the function.  To replicate the above tab behavior, let&amp;rsquo;s first set up a basic mapping:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; s:zen_html_tab&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;\&amp;lt;c-y&amp;gt;,&amp;quot;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;endfunction&lt;/span&gt;
autocmd &lt;span class=&#34;nb&#34;&gt;FileType&lt;/span&gt; html imap &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;buffer&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;expr&lt;span class=&#34;p&#34;&gt;&amp;gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;tab&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;sid&lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt;zen_html_tab&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There&amp;rsquo;s a lot of things going on here, so I&amp;rsquo;ll go over them one by one.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;s:&lt;/code&gt; denotes that the function is scoped to the script.  You can, of course, define the function globally (must be PascalCased or script#prefixed), but I prefer not to pollute the global scope if I don&amp;rsquo;t have to.  The return value is an escaped string which are the keys you want to map.  An additional thing to note is that you need &lt;code&gt;&amp;lt;sid&amp;gt;&lt;/code&gt; to reference the function in the mapping.&lt;/li&gt;
&lt;li&gt;The FileType autocmd is used to set up the mapping only for HTML files.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;buffer&amp;gt;&lt;/code&gt; denotes that the mapping should only apply for the current buffer (without this when you open an HTML file it will apply the mapping globally).&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;expr&amp;gt;&lt;/code&gt; is the special sauce that lets you to execute code to determine the value of the mapping.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;OK, the above doesn&amp;rsquo;t actually do anything yet.  In fact, it&amp;rsquo;s pretty much equivalent to &lt;code&gt;imap &amp;lt;tab&amp;gt; &amp;lt;c-y&amp;gt;,&lt;/code&gt;.  So let&amp;rsquo;s add some context into it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;k&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;!&lt;/span&gt; s:zen_html_tab&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; line &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; getline&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;.&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;match&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;line&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s1&#34;&gt;&amp;#39;&amp;lt;.*&amp;gt;&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;\&amp;lt;c-y&amp;gt;n&amp;quot;&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;endif&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;quot;\&amp;lt;c-y&amp;gt;,&amp;quot;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;endfunction&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is a simple implementation that captures the majority of use cases.  &lt;code&gt;getline(&#39;.&#39;)&lt;/code&gt; gets the current line under the cursor.  &lt;code&gt;match()&lt;/code&gt; is a built-in function which returns the index of the matched regular expression.  I am relying on the fact that Emmet syntax will &lt;em&gt;not&lt;/em&gt; have an opening &amp;lt;.  This makes the function very simple; if there&amp;rsquo;s an &amp;lt;&amp;gt; then jump to the next tag, otherwise, expand.&lt;/p&gt;

&lt;p&gt;And that&amp;rsquo;s all there is to it!  This function won&amp;rsquo;t cover more &amp;ldquo;advanced&amp;rdquo; scenarios like nested expansions (although you could cheat by creating a newline), but otherwise it shows that expression mappings are an easy way to get more umph from your mappings.&lt;/p&gt;

&lt;p&gt;For more details, contact your local Vim department by calling &lt;code&gt;:help map-&amp;lt;expr&amp;gt;&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>The flight of an open-source project</title>
      <link>http://bling.github.io/blog/2013/07/15/flight-of-an-open-source-project/</link>
      <pubDate>Mon, 15 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2013/07/15/flight-of-an-open-source-project/</guid>
      <description>

&lt;h1 id=&#34;welcome-aboard:602ff5bea17444c399dd8101b9427cef&#34;&gt;Welcome aboard!&lt;/h1&gt;

&lt;p&gt;Those were the words that a flight attendant said to me as a boarded a plane to visit Paris for a summer vacation of wine and cheese.  It was a long flight; about 8 hours.  This particular plane was older and didn&amp;rsquo;t have the personal TVs installed yet.  What this meant was I didn&amp;rsquo;t have any movies to distract me from working on a pet project I had going on.  This little project was a single vim file in my vimrc.&lt;/p&gt;

&lt;h1 id=&#34;that-color-thing:602ff5bea17444c399dd8101b9427cef&#34;&gt;That color thing&lt;/h1&gt;

&lt;p&gt;I was a huge fan of the original &lt;a href=&#34;https://github.com/Lokaltog/vim-powerline&#34;&gt;vim-powerline&lt;/a&gt; project.  Even though it was purely cosmetic and didn&amp;rsquo;t really add value (compared other plugins like &lt;a href=&#34;https://github.com/tpope/vim-surround&#34;&gt;vim-surround&lt;/a&gt; where a productivity increase was measurable), I still considered it one of the most important plugins in my arsenal because I like things to look pretty.  I choose colorschemes with a lot of prejudice.  And I choose my font carefully as well (I&amp;rsquo;m currently using Ubuntu Mono as the preferred choice).  As developers we stare at a text editor the majority of our time, and if I can make that experience a little more enjoyable then that&amp;rsquo;s a good enough reason for me!&lt;/p&gt;

&lt;h1 id=&#34;prologue:602ff5bea17444c399dd8101b9427cef&#34;&gt;Prologue&lt;/h1&gt;

&lt;p&gt;If vim-powerline was already so good, why bother writing a replacement?  The biggest reason why I bothered was powerline &lt;a href=&#34;https://github.com/Lokaltog/powerline&#34;&gt;v2&lt;/a&gt;.  This was the python rewrite of powerline which unified the codebase so that it could be used outside of vim, such as in bash, zsh, and tmux.  And just like that, vim-powerline was deprecated.&lt;/p&gt;

&lt;p&gt;I was one of the early adopters because I like to use bleeding edge software.  I compile my vim to the latest tip, my preferred Linux distribution is &lt;a href=&#34;http://www.archlinux.org&#34;&gt;ArchLinux&lt;/a&gt; (a rolling release distribution), and all my browsers are beta (sometimes alpha).&lt;/p&gt;

&lt;p&gt;Early versions of powerline were very buggy for me to the point where I couldn&amp;rsquo;t use it and had to fall back to vim-powerline.  It also lost a lot of features in the process, like integration with third party plugins like ctrlp and tagbar.  And lastly, installation made it very difficult to get working consistently across all operating systems.  And even within an OS, you would run into problems, e.g. system python vs homebrew python on OSX, or python3 being the default on Arch.  Ironically, I found installing on Windows the easiest of them all.&lt;/p&gt;

&lt;p&gt;I started looking for alternatives and found &lt;a href=&#34;https://github.com/molok/vim-smartusline&#34;&gt;smartusline&lt;/a&gt;, which is a simple statusline plugin which changes colors like powerline.  I used it for a while, but eventually I felt a strong yearning for a nicer looking statusline.  Honestly, I didn&amp;rsquo;t have a good reason not to use vim-powerline other than the fact that it was &amp;ldquo;old&amp;rdquo;.  But powerline v2 wasn&amp;rsquo;t ready yet either.  And with that I had enough of an excuse to spend my hacking hours writing statuslines.&lt;/p&gt;

&lt;h1 id=&#34;help-statusline:602ff5bea17444c399dd8101b9427cef&#34;&gt;:help statusline&lt;/h1&gt;

&lt;p&gt;The first working version I had was &lt;a href=&#34;https://github.com/bling/dotvim/blob/c39021c45289d11e515bd08c1f4a976f7ba4352e/plugin/statusline.vim&#34;&gt;65 lines&lt;/a&gt; of code.  It was not configurable and everything was hardcoded, but it served my needs and worked pretty well.  Over time I tweaked it slowly, making small changes here and there, changing colors, and eventually using powerline font symbols.  And then I thought, wait a minute, maybe someone else might find this useful!  So on that airplane ride I decided to create a plugin out of it and share it with the community.&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/bling/vim-airline&#34;&gt;vim-airline&lt;/a&gt; was born.&lt;/p&gt;

&lt;p&gt;I published a link to the &lt;a href=&#34;http://www.reddit.com/r/vim/comments/1hfbfz/vimairline_a_lightweight_statusline_light_as_air/&#34;&gt;vim subreddit&lt;/a&gt; and it was well received.  I got a boost to 100 stars on GitHub in a day.  Cool!  People like what I built!&lt;/p&gt;

&lt;h1 id=&#34;the-first-pull-request:602ff5bea17444c399dd8101b9427cef&#34;&gt;The first pull request&lt;/h1&gt;

&lt;p&gt;The first pull request was to fix a spelling mistake where I used sep&lt;strong&gt;e&lt;/strong&gt;rator instead of sep&lt;strong&gt;a&lt;/strong&gt;rator.  It was also the first time I saw the big green &amp;ldquo;Merge Pull Request&amp;rdquo; button on GitHub.  And let me tell you that entire process is nothing short of amazing.  It is so damn easy to collaborate I wish I had this at work.&lt;/p&gt;

&lt;p&gt;And then issues started coming in; bugs and feature requests.  More pull requests were submitted, some to fix bugs, others to fix performance problems.  I had my little open source project going and it was so much fun!  And people were open to suggestions, code reviews, and just generally very receptive to discussion.  It was awesome!&lt;/p&gt;

&lt;p&gt;I continued working on the plugin to add theming support, and once I finished I posted it to &lt;a href=&#34;https://news.ycombinator.com/item?id=6002518&#34;&gt;HackerNews&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&#34;a-lesson-in-marketing:602ff5bea17444c399dd8101b9427cef&#34;&gt;A lesson in marketing&lt;/h1&gt;

&lt;p&gt;It sounds obvious now after the fact, but I didn&amp;rsquo;t really realize what a big difference marketing makes.  Last year I made a relatively significant contribution to the WPF world &amp;ndash; I added &lt;a href=&#34;http://bling.github.io/blog/2012/07/01/snoopshell-marriage-of-snoop-wpf-and/&#34;&gt;PowerShell to Snoop&lt;/a&gt;.  Snoop is a staple tool for any WPF developer, and for my work to be accepted and merged into the main product was really quite something.  After many retweets, my fork acquired a whopping 6 stars.  The reason?  My target audience was C# developers who did WPF, &lt;em&gt;and&lt;/em&gt; who used PowerShell.  It was tiny market!&lt;/p&gt;

&lt;p&gt;vim-airline is different.  The market is all terminal users, which is a &lt;strong&gt;huge&lt;/strong&gt; market.  It didn&amp;rsquo;t matter if you were doing sysadmin work scripting the shell or developing a website in JavaScript or deploying a distributed cluster using Ruby.  Somebody would be using vim, and furthormore, because airline was written in 100% VimScript it worked for everyone.&lt;/p&gt;

&lt;p&gt;After I posted it to HackerNews, momentum &lt;strong&gt;&lt;em&gt;really&lt;/em&gt;&lt;/strong&gt; picked up and a flood of bugs and feature requests came in.  A lot of people also starting writing themes for it, which validated my claim that it was easy to do.  The project gained another 200-300 stars overnight.&lt;/p&gt;

&lt;h1 id=&#34;murphy-s-law:602ff5bea17444c399dd8101b9427cef&#34;&gt;Murphy&amp;rsquo;s Law&lt;/h1&gt;

&lt;p&gt;Last Tuesday night, vim-airline became the default in the &lt;a href=&#34;http://vim.spf13.com/&#34;&gt;spf13&lt;/a&gt; distribution, which is one of the most popular distributions out there.  On that same night, I &lt;a href=&#34;https://github.com/bling/vim-airline/commit/c0427e435d2eb2170517438ddd4f0b5fa7a8b691&#34;&gt;pushed&lt;/a&gt; a change to improve the extendability of the plugin.  It was the last thing I did that night and I went to bed shortly after.  Everything that could go wrong, went wrong &amp;ndash; I woke up to a flurry of emails about it breaking in the most &lt;a href=&#34;https://github.com/bling/vim-airline/issues/49&#34;&gt;catastrophic&lt;/a&gt; &lt;a href=&#34;https://github.com/bling/vim-airline/issues/45&#34;&gt;way&lt;/a&gt; &lt;a href=&#34;https://github.com/spf13/spf13-vim/issues/397&#34;&gt;possible&lt;/a&gt;.  I jumped from my bed to the computer in record time to revert that change.  After a lot of (manual) investigation, I narrowed it down to the exact &lt;a href=&#34;https://code.google.com/p/vim/source/detail?r=66e615ce7f61948a2a4a8615d703a42d56763490&amp;amp;name=v7-3-1058&#34;&gt;patch&lt;/a&gt; (1058) in Vim that affected my code.  That&amp;rsquo;s what I get for using bleeding edge software&amp;hellip;&lt;/p&gt;

&lt;p&gt;Since this incident I&amp;rsquo;ve been testing with Vim 7.2 prior to pushing any code changes to the core.&lt;/p&gt;

&lt;h1 id=&#34;destination-to-be-determined:602ff5bea17444c399dd8101b9427cef&#34;&gt;Destination to be determined&amp;hellip;&lt;/h1&gt;

&lt;p&gt;Popularity continued to grow, and as of now, after being live for only 2 weeks, the project has 772 stars, 36 forks, and 15 contributors.  6 themes have been contributed.&lt;/p&gt;

&lt;p&gt;It&amp;rsquo;s hard to describe the feeling I&amp;rsquo;m having &amp;ndash; I guess I&amp;rsquo;m just really thrilled to have so many people take interest in something I built.  I had no idea it would be this popular, and now I&amp;rsquo;m just trying to keep up with the issues.&lt;/p&gt;

&lt;p&gt;The community aspect of open source is incredible.  I don&amp;rsquo;t know where the project will go from here, but for the time being, I&amp;rsquo;m going to sit back, relax, and enjoy the flight.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unite.vim, The plugin you didn&#39;t know you need</title>
      <link>http://bling.github.io/blog/2013/06/02/unite-dot-vim-the-plugin-you-didnt-know-you-need/</link>
      <pubDate>Sun, 02 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2013/06/02/unite-dot-vim-the-plugin-you-didnt-know-you-need/</guid>
      <description>

&lt;h1 id=&#34;unite-vim-f:08996c7cd171fcce7b6bf83dac7e5aa6&#34;&gt;&lt;a href=&#34;https://github.com/Shougo/unite.vim&#34;&gt;Unite.vim&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;What is this?  If you&amp;rsquo;ve never heard of this Vim plugin, then this post is for you.  This is one of those hidden gems in the Vim plugin world that is truly life changing.  I think this plugin is so awesome that I&amp;rsquo;ve decided to write a post dedicated to it so that more people know about it.&lt;/p&gt;

&lt;p&gt;The plugin is written by &lt;a href=&#34;https://github.com/Shougo&#34;&gt;Shougo Matsushita&lt;/a&gt;.  He has written a lot of other popular plugins, notably &lt;a href=&#34;https://github.com/Shougo/neocomplcache.vim&#34;&gt;neocomplcache&lt;/a&gt; and &lt;a href=&#34;https://github.com/Shougo/vimshell.vim&#34;&gt;vimshell&lt;/a&gt;.  I use a lot of his plugins, so I started to notice when certain plugins started using Unite as a dependency, like &lt;a href=&#34;https://github.com/Shougo/neobundle.vim&#34;&gt;neobundle&lt;/a&gt; and &lt;a href=&#34;https://github.com/Shougo/vimfiler.vim&#34;&gt;vimfiler&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;At first it looked like Unite was just a general purpose library, but I was in for a surprise because it is so much more than that.&lt;/p&gt;

&lt;h1 id=&#34;what-is-it:08996c7cd171fcce7b6bf83dac7e5aa6&#34;&gt;What is it?&lt;/h1&gt;

&lt;p&gt;This is the problem I had initially.  The project &lt;a href=&#34;https://github.com/Shougo/unite.vim&#34;&gt;homepage&lt;/a&gt; describes it as &amp;ldquo;&amp;hellip;can search and display information from arbitrary sources like files, buffers, recently used files or registers.&amp;rdquo;  It goes on to show some usage samples, but there is no &amp;ldquo;wow&amp;rdquo; factor.  After reading the readme I still didn&amp;rsquo;t have a clue what the plugin could do.&lt;/p&gt;

&lt;p&gt;(edit: After I wrote blog post, Unite&amp;rsquo;s homepage has been dramatically improved with screenshots, animated gifs, and even a kickass logo.  It definitely has a lot of &amp;ldquo;wow&amp;rdquo; now.)&lt;/p&gt;

&lt;p&gt;It wasn&amp;rsquo;t until I stumbled upon terryma&amp;rsquo;s &lt;a href=&#34;https://github.com/terryma/dotfiles/blob/master/.vimrc&#34;&gt;vimrc&lt;/a&gt; (the author of &lt;a href=&#34;https://github.com/terryma/vim-multiple-cursors&#34;&gt;multiple-cursors&lt;/a&gt; and realized that he replaced &lt;a href=&#34;https://github.com/kien/ctrlp.vim&#34;&gt;ctrlp&lt;/a&gt; entirely with unite).  ctrlp is by far one of the best/most popular plugins and for it to be replacable is no easy feat.&lt;/p&gt;

&lt;p&gt;So how do you do it?&lt;/p&gt;

&lt;h1 id=&#34;first-things-first-configuration:08996c7cd171fcce7b6bf83dac7e5aa6&#34;&gt;First things first, configuration&lt;/h1&gt;

&lt;p&gt;Unite is geared towards experienced vim users &amp;ndash; it does not create any bindings by default.  To make any use of it, you will need to create the bindings yourself.  And in certain cases, rather than declaring &lt;code&gt;g:variables&lt;/code&gt;, you configure it with method calls, like &lt;code&gt;unite#filters#matcher_default#use([&#39;matcher_fuzzy&#39;])&lt;/code&gt;, but thankfully, like all of Shougo&amp;rsquo;s plugins, the plugin is &lt;em&gt;very&lt;/em&gt; well documented, so feel free to &lt;code&gt;:help unite&lt;/code&gt; to figure out how to use the plugin.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re lazy, you can go directly to my &lt;a href=&#34;https://github.com/bling/dotvim&#34;&gt;vim distribution&lt;/a&gt; and take the configuration out of there.&lt;/p&gt;

&lt;p&gt;But enough talking, here&amp;rsquo;s some quick demos of what Unite can do&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;what-can-it-do:08996c7cd171fcce7b6bf83dac7e5aa6&#34;&gt;What can it do?&lt;/h1&gt;

&lt;h2 id=&#34;file-searching-like-ctrlp-vim-h:08996c7cd171fcce7b6bf83dac7e5aa6&#34;&gt;File searching like &lt;a href=&#34;https://github.com/kien/ctrlp.vim&#34;&gt;ctrlp.vim&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;nnoremap &amp;lt;C-p&amp;gt; :Unite file_rec/async&amp;lt;cr&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://bling.github.io/img/unite-ctrlp.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Did you notice the async flag?  Unite uses &lt;a href=&#34;https://github.com/Shougo/vimproc.vim&#34;&gt;vimproc&lt;/a&gt; behind the scenes, which affords for searching while it populates the file list in the background.  That is amazing!&lt;/p&gt;

&lt;h2 id=&#34;content-searching-like-ack-vim-k-or-ag-vim-l:08996c7cd171fcce7b6bf83dac7e5aa6&#34;&gt;Content searching like &lt;a href=&#34;https://github.com/mileszs/ack.vim&#34;&gt;ack.vim&lt;/a&gt; (or &lt;a href=&#34;https://github.com/rking/ag.vim&#34;&gt;ag.vim&lt;/a&gt;)&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;nnoremap &amp;lt;space&amp;gt;/ :Unite grep:.&amp;lt;cr&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://bling.github.io/img/unite-grep.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Unite can be configured to use &lt;code&gt;grep&lt;/code&gt;, &lt;code&gt;ack&lt;/code&gt;, or &lt;code&gt;ag&lt;/code&gt;; whichever is available.&lt;/p&gt;

&lt;h2 id=&#34;yank-history-like-yankring-m-yankstack-n:08996c7cd171fcce7b6bf83dac7e5aa6&#34;&gt;Yank history like &lt;a href=&#34;https://github.com/vim-scripts/YankRing.vim&#34;&gt;yankring&lt;/a&gt;/&lt;a href=&#34;https://github.com/maxbrunsfeld/vim-yankstack&#34;&gt;yankstack&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;let g:unite_source_history_yank_enable = 1
nnoremap &amp;lt;space&amp;gt;y :Unite history/yank&amp;lt;cr&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://bling.github.io/img/unite-yanks.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;To be fair, unite cannot bind to a key to cycle the history, so it&amp;rsquo;s not a 100% replacement.  However, if you only rarely use the yankring then this is a pretty good alternative.&lt;/p&gt;

&lt;h2 id=&#34;buffer-switching-like-lustyjuggler-o:08996c7cd171fcce7b6bf83dac7e5aa6&#34;&gt;Buffer switching like &lt;a href=&#34;https://github.com/sjbach/lusty&#34;&gt;LustyJuggler&lt;/a&gt;&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;nnoremap &amp;lt;space&amp;gt;s :Unite -quick-match buffer&amp;lt;cr&amp;gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://bling.github.io/img/unite-juggle.gif&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;Notice that &lt;code&gt;-quick-match&lt;/code&gt; is just a flag, which means you can apply this to any source.&lt;/p&gt;

&lt;h2 id=&#34;bonus:08996c7cd171fcce7b6bf83dac7e5aa6&#34;&gt;Bonus&lt;/h2&gt;

&lt;p&gt;Ever been jealous of Sublime&amp;rsquo;s auto preview feature?  Well, turns out unite has an &lt;code&gt;-auto-preview&lt;/code&gt; flag that you can add.&lt;/p&gt;

&lt;h1 id=&#34;finale:08996c7cd171fcce7b6bf83dac7e5aa6&#34;&gt;Finale&lt;/h1&gt;

&lt;p&gt;And that&amp;rsquo;s all I got for now.  I&amp;rsquo;m still learning more about what this plugin can do, but it&amp;rsquo;s definitely earned its place in my vim toolbox.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>On TypeScript</title>
      <link>http://bling.github.io/blog/2013/04/19/on-typescript/</link>
      <pubDate>Fri, 19 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2013/04/19/on-typescript/</guid>
      <description>

&lt;h1 id=&#34;what-s-the-deal:2eaa3d5702d7bfa3dcdaf47ea31e215c&#34;&gt;What&amp;rsquo;s the deal?&lt;/h1&gt;

&lt;p&gt;For the past week I&amp;rsquo;ve been fortunate to work on an internal project which was purely greenfield and built on Node/Express on the backend, and AngularJS on the front-end.  It was a ton of fun and I learned a lot in the process, most particularly TypeScript and CoffeeScript.&lt;/p&gt;

&lt;p&gt;TypeScript was of interest because the application I was writing contained some pretty complex calculations.  The existing implementation was in Java, and at first glance it seemed like it would be a good idea to have some type safety whilst reimplementing the algorithm.&lt;/p&gt;

&lt;h1 id=&#34;getting-started:2eaa3d5702d7bfa3dcdaf47ea31e215c&#34;&gt;Getting Started&lt;/h1&gt;

&lt;p&gt;I don&amp;rsquo;t know why there&amp;rsquo;s this misconception that you need to have Microsoft tooling to use Typescript, but it is 100% false and a myth.  To install it you just run &lt;code&gt;npm install typescript&lt;/code&gt;.  Yes!  It&amp;rsquo;s just a standard node package.  Once it&amp;rsquo;s installed you have access to a &lt;code&gt;tsc&lt;/code&gt; command, similar to how you would use the &lt;code&gt;coffee&lt;/code&gt;, i.e. you give it input, and it spits output.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;ve ever been to &lt;a href=&#34;http://typescriptlang.org&#34;&gt;TypeScript&lt;/a&gt;&amp;rsquo;s website, you will have seen the rather impressive playground where you can see side by side Javascript vs Typescript.  This is a trick!  It gives you the illusion that you can simply annotate variables with types and it will automatically check only those types.  This is only half true.  Let&amp;rsquo;s look at a innocent Node application:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;require&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;createServer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;req&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;write&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;hello world&amp;#39;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;nx&#34;&gt;res&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}).&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;listen&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;3000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That is just plain &amp;lsquo;ol Javascript, and if the claim that all Javascript is valid Typescript, this should compile fine.  Except that it doesn&amp;rsquo;t&amp;hellip;we are greeted with the following error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;The name &amp;#39;require&amp;#39; does not exist in the current scope.
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As it turns out, if you&amp;rsquo;re using Typescript you need to tell the compiler of &lt;em&gt;every&lt;/em&gt; object and function that you&amp;rsquo;re using.  In the above example, the compiler doesn&amp;rsquo;t know anything about &lt;code&gt;require&lt;/code&gt;, so it threw an error.&lt;/p&gt;

&lt;p&gt;The way to correct this is with definition files.  These are like header files and they define the API of a module.  The pseudo standard for definition files currently lives in a GitHub repository named &lt;a href=&#34;https://github.com/borisyankov/DefinitelyTyped&#34;&gt;DefinitedlyTyped&lt;/a&gt;.  This contains definition files for many popular libraries and is actively updated by the community.&lt;/p&gt;

&lt;p&gt;Once you have a definition file, you add &lt;code&gt;///&amp;lt;reference path=&amp;quot;./d.ts/requirejs/require.d.ts&amp;quot;/&amp;gt;&lt;/code&gt; to the top of the file, and the code will compile.&lt;/p&gt;

&lt;p&gt;The second option is to add &lt;code&gt;declare var require: any;&lt;/code&gt; to the top of the file, effectively telling the compiler to ignore anything to do with that variable.&lt;/p&gt;

&lt;p&gt;Either way, this was completely different from my initial expectations.  I thought that I would be able to take a large application, rename everything from &lt;code&gt;js&lt;/code&gt; to &lt;code&gt;ts&lt;/code&gt;, and then slowly upgrade the code to Typescript.  This is obviously not possible.  For this to work, you would need to define an application definition file, which references all other definition files (or declare variables for those that do not have definition files), and then for &lt;em&gt;every file in your project&lt;/em&gt;, you would ///reference the application definition file.&lt;/p&gt;

&lt;p&gt;I suppose this is a necessary evil for type checking, although it would have been nice to have this baked into the compiler to ease the migration path of existing applications.&lt;/p&gt;

&lt;h1 id=&#34;clean-output:2eaa3d5702d7bfa3dcdaf47ea31e215c&#34;&gt;Clean output&lt;/h1&gt;

&lt;p&gt;One of the nice things about TypeScript is that the output is very clean and predictable.  For example, here is an empty class:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kr&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It will compile to this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;})();&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All classes are done so with an immediately executed anonymous function.  If you define &lt;code&gt;Foo&lt;/code&gt; as &lt;code&gt;export class Foo&lt;/code&gt;, then the output will have an extra line at the bottom: &lt;code&gt;exports.Foo = Foo;&lt;/code&gt;.  In other words, it&amp;rsquo;s got first class support for the CommonJS syntax (as well as AMD).&lt;/p&gt;

&lt;h1 id=&#34;competing-thought-processes:2eaa3d5702d7bfa3dcdaf47ea31e215c&#34;&gt;Competing thought processes&lt;/h1&gt;

&lt;p&gt;For people coming from C#, it will feel very comfortable, because it is &lt;em&gt;extremely&lt;/em&gt; similar to C#.  You have classes, methods, modules (aka namespaces), just like you have in C#.  If you try to use a method that doesn&amp;rsquo;t exist, the compiler will complain.  These features are the bread and butter of compiled languages and people coming from Visual Studio (the majority of the audience) will feel very comfortable.&lt;/p&gt;

&lt;p&gt;Then why is it that I did &lt;em&gt;not&lt;/em&gt; enjoy writing in Typescript?&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;m about 99% sure that I was just so used to working in untyped Javascript that I became annoyed that I had to &amp;ldquo;annotate yet another variable&amp;rdquo;.  TypeScript doesn&amp;rsquo;t force you to annotate every variable, in fact, you could annotate nothing and it&amp;rsquo;ll still compile (as long as you have the definition files).  But if you&amp;rsquo;re going to use TypeScript it seems silly not to use types.&lt;/p&gt;

&lt;p&gt;But what this comes down to is the classic static vs dynamic languages.  Static proponents will state that the compiler saves you from a lot of mistakes earlier on.  Dynamic proponents will state that &amp;ldquo;if it quacks like a duck, it&amp;rsquo;s a duck, I shouldn&amp;rsquo;t need to declare it&amp;rdquo;.  They&amp;rsquo;re both right.&lt;/p&gt;

&lt;p&gt;Either way, given an open mind and some time, you can be productive in either environment, and makes you a better developer in the end.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>.NET/WPF to HTML/CSS/Javscript</title>
      <link>http://bling.github.io/blog/2013/04/13/dot-net-slash-wpf-to-html-slash-css-slash-javscript/</link>
      <pubDate>Sat, 13 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2013/04/13/dot-net-slash-wpf-to-html-slash-css-slash-javscript/</guid>
      <description>

&lt;h1 id=&#34;in-the-beginning:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;In the beginning&amp;hellip;&lt;/h1&gt;

&lt;p&gt;For the vast majority of my career I&amp;rsquo;d say I was a Microsoft guy.  I took Java in university and toyed around with Linux at home, but what paid the bills was my knowledge and expertise in Microsoft technologies that I&amp;rsquo;ve built up over the years.&lt;/p&gt;

&lt;p&gt;Then Metro and Windows 8 came, and the writing was on the wall.  Microsoft really screwed up.  In their efforts to play catch up, they alienated their business customers and came up with solutions that consumers did not want.  Despite their best efforts they could not stop the avalanche that was Node and HTML5.  Everyone was moving to HTML5, and even Microsoft themselves could not ignore this as now they&amp;rsquo;re supporting hosting Node on Azure.&lt;/p&gt;

&lt;p&gt;People who have been in the industry for a long time will say this is just the same desktop vs web debacle and that it is cyclical and that people will realize that the web isn&amp;rsquo;t good enough and go back to desktop applications.  But I think this time is different.  This time around, the browser has hardware acceleration.&lt;/p&gt;

&lt;p&gt;Performance has always been the deciding factor for going back to the desktop.  I don&amp;rsquo;t think that argument holds true anymore.  It&amp;rsquo;s clear you can build some amazing applications on the web now that perform well.  You can build an IDE in the browser, like &lt;a href=&#34;http://c9.io&#34;&gt;Cloud9&lt;/a&gt;, or you could create impressive animations like &lt;a href=&#34;http://famo.us&#34;&gt;Famous&lt;/a&gt; demonstrates.  And even 3D games are possible now.&lt;/p&gt;

&lt;p&gt;The web is here to stay, and with more and more people having phones and tablets as their primary computing devices (and &lt;em&gt;not&lt;/em&gt; a desktop), naturally the technologies we use to build around these devices become more important, i.e. technologies that are cross platform and work on every device from phone to desktop.&lt;/p&gt;

&lt;p&gt;So what happens when you throw a C#/WPF guru into the water with no knowledge of HTML, CSS, or Javascript?&lt;/p&gt;

&lt;h1 id=&#34;and-then-there-was-pain:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;And then there was pain&amp;hellip;&lt;/h1&gt;

&lt;p&gt;From Friday to Monday, I went from a Windows 7 machine with Visual Studio, Resharper, PowerShell, Blend to a OSX machine.  I left out the tools on purpose, because literally I had none.  The only thing I knew was that I would be working on HTML/Javascript and I&amp;rsquo;d have to bring my own knives to the kitchen.&lt;/p&gt;

&lt;p&gt;Except that I had no knives&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;baby-steps:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Baby steps&lt;/h1&gt;

&lt;p&gt;I was comfortable with the command line, since I&amp;rsquo;m a huge Linux fan and prefer a CLI over a GUI most of the time.  But it became clear that I had acquired quite a bit of PowerShell knowledge in my previous efforts to force myself to learn it, i.e. replace &lt;code&gt;cmd.exe&lt;/code&gt; with &lt;code&gt;powershell.exe&lt;/code&gt;.  When I tried to do &lt;code&gt;ls | % { $_.Length }&lt;/code&gt; I was in for a sad realization&amp;hellip;these aren&amp;rsquo;t objects anymore.  Damn, all that muscle memory can&amp;rsquo;t be used here.  Damn you vendor lock in!&lt;/p&gt;

&lt;p&gt;But as you can see, I still used &lt;code&gt;ls&lt;/code&gt; instead of &lt;code&gt;dir&lt;/code&gt; or &lt;code&gt;gcm&lt;/code&gt;, so I was already in this weird world of mixing UNIX with PowerShell, and moving back to UNIX wasn&amp;rsquo;t too bad since I didn&amp;rsquo;t have to remember a whole new set of commands for common use cases.  Although it annoys me from time to time that I cannot just &lt;code&gt;(get-date).addweeks(3)&lt;/code&gt; from the command line anymore, I&amp;rsquo;m going to have to live without it.&lt;/p&gt;

&lt;p&gt;Next up was getting my environment set up.  A quick Google search showed that &lt;a href=&#34;https://github.com/mxcl/homebrew&#34;&gt;Homebrew&lt;/a&gt; was the hotness, so I installed it, and yes, it was pretty cool.  It still has a ways to go before it&amp;rsquo;s comparable to Linux package managers like &lt;code&gt;apt-get&lt;/code&gt; or my favorite, Archlinux&amp;rsquo;s &lt;code&gt;pacman&lt;/code&gt;, but that is understandable since OSX is not built from the ground up using package managers like Linux distributions typically are.  For the most part, it worked as advertised, and after &lt;code&gt;brew install git&lt;/code&gt; I was ready to check out the source code.&lt;/p&gt;

&lt;h1 id=&#34;making-the-first-commit:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Making the first commit&lt;/h1&gt;

&lt;p&gt;Naturally, the first thing I did was download &lt;a href=&#34;http://www.jetbrains.com/webstorm/&#34;&gt;Webstorm&lt;/a&gt;.  Programming without an IDE, yeah right!  I&amp;rsquo;m a professional!&lt;/p&gt;

&lt;p&gt;Alright, let&amp;rsquo;s get working.  Let&amp;rsquo;s start up Webstorm.  OK, it&amp;rsquo;s loading&amp;hellip;loading&amp;hellip;loading&amp;hellip;loading.  OK, great, that&amp;rsquo;s a little faster than Visual Studio, so I&amp;rsquo;m happy.  OK, it looks familiar.  It&amp;rsquo;s got a side bar with my files, it&amp;rsquo;s got navigation like Resharper, let&amp;rsquo;s start working!&lt;/p&gt;

&lt;p&gt;Blah blah blah, type type type, &lt;code&gt;this.&lt;/code&gt; bam!  What the hell?  Why did autocomplete just list everything in the project?  I&amp;rsquo;m in the current file and clearly it only has 4 properties defined.&lt;/p&gt;

&lt;h1 id=&#34;and-so-it-starts:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;And so it starts&lt;/h1&gt;

&lt;p&gt;As it turns out, &lt;code&gt;this.foo&lt;/code&gt; is the same as &lt;code&gt;this[&#39;foo&#39;]&lt;/code&gt; in Javascript, effectively making every object into a dictionary.  Webstorm&amp;rsquo;s take on this dynamic behavior is to give you every possible option in the project, effectively turning the feature into a glorified spell checker.  Webstorm has an option to disable this, so I did and now it behaved more like what I expected.  Nonetheless, one thing was crystal clear &amp;ndash; the &amp;ldquo;this dot&amp;rdquo; method of working (and discovering the API) is not possible anymore in the Javascript world.&lt;/p&gt;

&lt;p&gt;It was apparent now that the IDE was still in its infant stages.  It had some refactorings built in, but for the most part it was not remotely comparable to what was available in Resharper/C# or IntelliJ.&lt;/p&gt;

&lt;p&gt;I have always been a big proponent of tools.  And back in the .NET days I found it incredibly frustrating when some coworkers preferred working &lt;em&gt;without&lt;/em&gt; Resharper.  Yes, it was much faster.  But even so, even after waiting for Resharper during its sluggish moments, it saved you time in the end, which in my mind meant you were more efficient with your time.&lt;/p&gt;

&lt;p&gt;I consider myself lucky because if it weren&amp;rsquo;t for Webstorm being in its infant stages, I probably would not have done what I was going to do next&amp;hellip;venture into vim.&lt;/p&gt;

&lt;h1 id=&#34;vim:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Vim&lt;/h1&gt;

&lt;p&gt;I still can&amp;rsquo;t remember the exact reason why I decided to learn Vim.  The majority of my coworkers were using Sublime Text.  Maybe I was stubborn and wanted to be different.  Maybe I was curious and wanted to see why this 30 year old editor was still so popular.  Whatever the reason, I decided to use Vim code turkey and refused to open anything else up until I convinced myself that I gave it a fair chance.&lt;/p&gt;

&lt;p&gt;The rest is &lt;a href=&#34;http://bling.github.io/blog/2013/02/10/love-affair-with-vim/&#34;&gt;history&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Don&amp;rsquo;t get me wrong, I was &lt;em&gt;hugely&lt;/em&gt; unproductive for the first couple weeks.  But I can confidently say that as a proficient Vim user that I am now, I am &lt;em&gt;far&lt;/em&gt; more efficient than I was before.&lt;/p&gt;

&lt;h1 id=&#34;how-much-is-your-time-worth:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;How much is your time worth?&lt;/h1&gt;


&lt;figure &gt;
    
        &lt;img src=&#34;http://bling.github.io/img/editor-learning-curve.png&#34; /&gt;
    
    
&lt;/figure&gt;


&lt;p&gt;I can vouch for this popular comic because I have tried every editor on there (yes even Emacs) and I can confirm that it is true.  There really is no contestant that can match the speed and flexibility of modal editing (and why most other editors out there have a vi emulation mode).  New users are often confused why the default mode in vim&amp;rsquo;s default mode is&amp;hellip;normal mode and not insert mode (like every other editor).&lt;/p&gt;

&lt;p&gt;As it turns out, the majority of our time as programmers are spent &lt;em&gt;reading and editing&lt;/em&gt; text, not writing it.  And that is why vim&amp;rsquo;s default mode is normal mode.  Right off the bat you have 26 different commands that you can use to operate on text.  Add a shift, and you have another 26 commands.  In normal mode, you have 52 unique operations that is a single/double keystroke away!&lt;/p&gt;

&lt;p&gt;Whether it&amp;rsquo;s vim, or emacs, or Sublime text, invest in your editor and learn what it can do for you.  Even if it&amp;rsquo;s just a couple seconds saved here and a couple seconds saved there, do realize that as programmers we stare at a text editor the vast majority of our working hours.  And all those seconds add up.&lt;/p&gt;

&lt;h1 id=&#34;javascipt-was-easy-to-learn:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Javascipt was easy to learn&lt;/h1&gt;

&lt;p&gt;Well, for me it was.  &lt;a href=&#34;http://jshint.com&#34;&gt;JSHint&lt;/a&gt; caught all the newbie mistakes.  C# already had lambdas and closures, so programming in the functional style of Javascript was weird at first, but ultimately it was a subset of the features available to C#.  Basically, if I were to program in C# like I did in Javascript, it would look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// this is effectively window&lt;/span&gt;
    &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;namespace&lt;/span&gt; &lt;span class=&#34;err&#34;&gt;= &lt;/span&gt;&lt;span class=&#34;nn&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
        &lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
            &lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                &lt;span class=&#34;n&#34;&gt;create&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                        &lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
                            &lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;hello world&amp;quot;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
                        &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
                    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
            &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
    &lt;span class=&#34;p&#34;&gt;};&lt;/span&gt;
    &lt;span class=&#34;n&#34;&gt;namespace&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;bar&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Yes, there is variable hoisting, privileged vs public functions, truthy and falsey values, prototypical inheritance, etc. but like any language, this is just syntax.  You read tutorials, you try it out, you struggle against your previous habits, but then you figure it out.&lt;/p&gt;

&lt;h1 id=&#34;javascript-changed-the-way-i-think:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Javascript changed the way I think&lt;/h1&gt;

&lt;p&gt;There is something incredibly liberating to just add some random property to an existing object, or change its prototype altogether.  At first I fought against this quite heavily.  We need constants!  We need well defined interfaces!  But in the end, it didn&amp;rsquo;t matter.  We had some conventions, we followed them, and everything worked just fine.&lt;/p&gt;

&lt;p&gt;Over time all the things I thought I needed, like intellisense, well defined interfaces, static analysis, I didn&amp;rsquo;t actually need them.  Sure, they are nice to have around, but I was productive all the same without them.  And the users using our application didn&amp;rsquo;t care whether it was written in C#/WPF or in HTML/Javascript, as long as it did was it was supposed to do.&lt;/p&gt;

&lt;p&gt;Ultimately, what still mattered were architectural decisions.  We still had services, models, and views for properly separating data from business logic and presentation.  We had unit tests which tested all the functionality.  All of these concepts were very important in C# and WPF, and they are just as important here.&lt;/p&gt;

&lt;h1 id=&#34;javascript-made-me-a-better-developer:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Javascript made me a better developer&lt;/h1&gt;

&lt;p&gt;Writing in Javascript made me realize just how much I relied on IDEs and static analysis.  Sometimes I would purposely abuse the IDE to do the job faster.  For example, if I wanted to refactor something, rather than using refactoring tools, sometimes the easier way is to just delete code and then go through the error list one by one.  Obviously you can&amp;rsquo;t use this technique in Javascript.&lt;/p&gt;

&lt;p&gt;Another thing I would do is purposely write bad code, wait for Resharper to come up with the suggestion, and then auto-correct it.&lt;/p&gt;

&lt;p&gt;These were backwards patterns.&lt;/p&gt;

&lt;p&gt;With Javascript, I found myself being proactive again.  I understood the code more.  I used snippets a lot more.  And since I was using vim, I never &lt;em&gt;ever&lt;/em&gt; had to wait for the IDE anymore, which that in itself changed the way I worked.&lt;/p&gt;

&lt;h1 id=&#34;css-is-one-big-hack:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;CSS is one big hack&lt;/h1&gt;

&lt;p&gt;Going from XAML to CSS was extremely annoying and where I&amp;rsquo;ve struggled the most with the transition.  If you want to vertical center something in XAML, you set &lt;code&gt;VerticalAlignment=Center&lt;/code&gt; on it and you&amp;rsquo;re done.  How do you do that in CSS?  Well, you could hack it with &lt;code&gt;table-cell&lt;/code&gt;, or you could hack it with negative margins, or you could hack it with absolute positioning, or &lt;code&gt;line-height&lt;/code&gt; or something else.  But point is, they are all hacks.&lt;/p&gt;

&lt;p&gt;Coming from XAML, CSS is one big hack.  I want to create a grid that resizes to the window size, and is always 30% left side and 70% right side.  In XAML, I just do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span class=&#34;nt&#34;&gt;&amp;lt;Grid&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;Grid.ColumnDefinitions&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;ColumnDefinition&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Width=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;3*&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span class=&#34;nt&#34;&gt;&amp;lt;ColumnDefinition&lt;/span&gt; &lt;span class=&#34;na&#34;&gt;Width=&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;7*&amp;quot;&lt;/span&gt; &lt;span class=&#34;nt&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span class=&#34;nt&#34;&gt;&amp;lt;/Grid.ColumnDefinitions&amp;gt;&lt;/span&gt;
&lt;span class=&#34;nt&#34;&gt;&amp;lt;/Grid&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In CSS, here&amp;rsquo;s one way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nf&#34;&gt;#left&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;float&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;30%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;100%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;#right&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;margin-left&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;30%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;width&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;100%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;height&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;100%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Again, more hacks.  And it&amp;rsquo;ll only work if the parent element has a size defined.&lt;/p&gt;

&lt;p&gt;Or you could do it this way:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-css&#34; data-lang=&#34;css&#34;&gt;&lt;span class=&#34;nf&#34;&gt;#left&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;absolute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;70%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;bottom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;nf&#34;&gt;#right&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;position&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;absolute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;left&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;30%&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;right&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;bottom&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;top&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;But it&amp;rsquo;s not going to work if the parent element doesn&amp;rsquo;t have a position of &lt;code&gt;absolute&lt;/code&gt; or &lt;code&gt;relative&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Once I let go of trying to be &amp;ldquo;correct&amp;rdquo; from a XAML point of view and just accepted that CSS is just hacks over top of a document model that was never designed to be used like it is today, I actually really enjoyed CSS.&lt;/p&gt;

&lt;p&gt;It became a fun challenge, to be presented with a UX design and then think about what kind of hacks I&amp;rsquo;d have to do to make it look exactly the same.  Pseudo elements became my new best friend.&lt;/p&gt;

&lt;p&gt;There was no such kind of fun in the XAML world &amp;ndash; if the UX designer could do something in Illustrator, I could do the same in Blend no problem.  There was no challenge.&lt;/p&gt;

&lt;p&gt;It was all fun and games until&amp;hellip;&lt;/p&gt;

&lt;h1 id=&#34;enter-the-beast-internet-explorer:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Enter the beast&amp;hellip;Internet Explorer&lt;/h1&gt;

&lt;p&gt;If you charged X amount of dollars for a project, it should be X raised to the number of versions older than IE10 you have to support.  If it&amp;rsquo;s IE9, it&amp;rsquo;s X^1.  If it&amp;rsquo;s IE8, it&amp;rsquo;s X^2.  How about IE7, X^3 !&lt;/p&gt;

&lt;p&gt;That would cover the cost of sheer annoyance and frustration that developers and UX designers will have to face, not to mention the increased amount of time to support these older browsers.  Oh, you want to support responsive design?  Ooops, IE8 doesn&amp;rsquo;t support media queries.  Oh, you want to have shadows and gradients, well you&amp;rsquo;re only going to get mono colored boxes instead.  Oh, you want it to run fast?  Here, take a 20x performance hit instead.&lt;/p&gt;

&lt;p&gt;If you could do it, my recommendation for supporting IE is to have the page be one big fat button that spans the entire screen that says inside with two buttons: install Chrome, or install Firefox.  It worked for Flash and Silverlight!&lt;/p&gt;

&lt;h1 id=&#34;back-to-an-ide-maybe:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Back to an IDE&amp;hellip;maybe?&lt;/h1&gt;

&lt;p&gt;I never did venture back.  With my stubbornness to stick with Vim, I ended up installing plugins and optimizing my workflow around it.  I even created my own &lt;a href=&#34;http://bling.github.io/dotvim&#34;&gt;distribution&lt;/a&gt;.  Chrome became my pseudo-IDE and I used its debugging tools heavily.  I used &lt;a href=&#34;http://livereload.com&#34;&gt;LiveReload&lt;/a&gt; from time to time.  And coupled with a zsh terminal I had an extremely productive development environment.  In the end I didn&amp;rsquo;t have a reason to use Webstorm anymore because at this point it &lt;em&gt;slowed me down&lt;/em&gt;.&lt;/p&gt;

&lt;h1 id=&#34;programming-became-fun-again:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Programming became fun again&lt;/h1&gt;

&lt;p&gt;Perhaps the biggest change I experienced, once I got over the initial pains, was that I really enjoyed programming again.  When I was writing in Javascript, I felt like a hacker.  When I was programming in C#, I felt like a programmer.  Maybe this is temporary and I&amp;rsquo;ll feel the same way when my experience level in Javascript matches with C#.  But for now, I&amp;rsquo;m enjoying that feeling of rediscovering my inner child of building something from nothing.&lt;/p&gt;

&lt;h1 id=&#34;finale:9b2e7ddde05b080e216d2058db8cb984&#34;&gt;Finale&lt;/h1&gt;

&lt;p&gt;Wow.  I didn&amp;rsquo;t expect this blog post to be this long.  But if you got this far I hope you enjoyed the read, because I had fun writing about my experiences.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Jumping on the hacker blog bandwagon</title>
      <link>http://bling.github.io/blog/2013/04/10/jumping-on-the-hacker-blog-bandwagon/</link>
      <pubDate>Wed, 10 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2013/04/10/jumping-on-the-hacker-blog-bandwagon/</guid>
      <description>

&lt;h1 id=&#34;following-the-tutorial:2d4cff6cca7d29a5c1b9fcff26b4d01c&#34;&gt;Following the tutorial&amp;hellip;&lt;/h1&gt;

&lt;p&gt;Not much to say here&amp;hellip;I went to &lt;a href=&#34;http://octopress.org&#34;&gt;Octopress&amp;rsquo;&lt;/a&gt; website, followed the instructions, and now I have a working blog.  Pretty cool.&lt;/p&gt;

&lt;p&gt;It definitely feels liberating to blog using plain &amp;lsquo;ol markdown text editing.&lt;/p&gt;

&lt;p&gt;So I guess the next step I&amp;rsquo;ll do is import my existing blog content, and then add some personal styling to this thing :)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Writing Macros with Vim</title>
      <link>http://bling.github.io/blog/2013/02/11/writing-macros-with-vim/</link>
      <pubDate>Mon, 11 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2013/02/11/writing-macros-with-vim/</guid>
      <description>

&lt;p&gt;First, let’s start with a Javascript function:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
             &lt;span class=&#34;nx&#34;&gt;how&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;are&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;
             &lt;span class=&#34;nx&#34;&gt;you&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let’s convert that to the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span class=&#34;kd&#34;&gt;function&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;foo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;parameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;hello&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;world&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;how&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;how&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;are&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;are&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
    &lt;span class=&#34;kd&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;you&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;parameters&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;you&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here are the macros I used to do this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-vim&#34; data-lang=&#34;vim&#34;&gt;&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; @&lt;span class=&#34;k&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;di(iparameters^[/\{^M2o^[kpg`[v`]Jgv:s/\s//g^M0:try|exe &amp;quot;norm! @q&amp;quot;|endtry^MA;^[V:s/,/;\r/g^Mv``=&amp;#39;&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;let&lt;/span&gt; @&lt;span class=&#34;k&#34;&gt;q&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s1&#34;&gt;&amp;#39;ywivar ^[pa = parameters.^[f,^[l@q&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Note that if you copy paste the above into your vimrc it will not work. The &lt;code&gt;^[&lt;/code&gt; and &lt;code&gt;^M&lt;/code&gt; found are actually single characters, not two. To input this properly you will need to chord it in input mode with &lt;code&gt;&amp;lt;Ctrl-V&amp;gt;&lt;/code&gt;. So for &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; you would chord &lt;code&gt;&amp;lt;Ctrl+V&amp;gt;&amp;lt;Ctrl+[&amp;gt;&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So, when I&amp;rsquo;m inside the parameters of the function, I can hit &lt;code&gt;@r&lt;/code&gt; and it will perform the refactoring. Now let’s break it down step by step.&lt;/p&gt;

&lt;h1 id=&#34;q-the-first-macro:934b4114c71a5b8036a3d4286b75e7ae&#34;&gt;@q The first macro&lt;/h1&gt;

&lt;p&gt;This is a recursive macro which takes something like &lt;code&gt;a,b,c&lt;/code&gt; and turns it into &lt;code&gt;var a = p.a,var b = p.b,var c = p.c&lt;/code&gt;. Let’s see how that’s done.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;yw&lt;/code&gt; &lt;code&gt;i&lt;/code&gt; &lt;code&gt;var&lt;/code&gt; &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; Yanks the word and enter insert mode, type var, exit insert mode and paste the just yanked word.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;a = parameters.&lt;/code&gt; Append and fill in parameters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; &lt;code&gt;f&lt;/code&gt;, &lt;code&gt;l&lt;/code&gt; Exit insert mode, find the next &lt;code&gt;,&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;l&lt;/code&gt; &lt;code&gt;@q&lt;/code&gt; Adjust the cursor position and recursively call itself.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Recursive macros terminate when the first error occurs. In this macro, that error is when there are no more commas left.&lt;/p&gt;

&lt;h1 id=&#34;r-the-second-macro:934b4114c71a5b8036a3d4286b75e7ae&#34;&gt;@r The second macro&lt;/h1&gt;

&lt;p&gt;The is the macro that should be invoked, and references the &lt;code&gt;@q&lt;/code&gt; macro.&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;code&gt;di(&lt;/code&gt; Deletes everything inside the brackets.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;i&lt;/code&gt; parameters Enter insert mode and type parameters.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; &lt;code&gt;/{&lt;/code&gt; &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; Leaves insert mode and finds the next brace.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;2o&lt;/code&gt; &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; &lt;code&gt;k&lt;/code&gt; &lt;code&gt;p&lt;/code&gt; Creates two empty lines and pastes what we deleted into the first line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;g`[v`]&lt;/code&gt; &lt;code&gt;J&lt;/code&gt; Visually select what we just pasted and join them all into a single line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;gv&lt;/code&gt; &lt;code&gt;:s/\s//g&lt;/code&gt; &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; Reselect the visually and delete all whitespace.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;0&lt;/code&gt; Move to the beginning of the line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;:try|exe &amp;quot;norm! @q&amp;quot;|endtry&lt;/code&gt; &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; Macros will terminate on the first error, even if referencing another macro. Wrapping the other macro with try|endtry swallows the error and lets the current macro continue.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;A;&lt;/code&gt; &lt;code&gt;&amp;lt;Esc&amp;gt;&lt;/code&gt; Append ; to the end of the line.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;V&lt;/code&gt; &lt;code&gt;:s/,/;\r/g&lt;/code&gt; &lt;code&gt;&amp;lt;CR&amp;gt;&lt;/code&gt; Visually select the line, replace with carriage returns.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;v=``&lt;/code&gt;  Visually select from the current cursor position back to where it was originally was, and format.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now is this the best way to do it? Probably not. I would not be surprised if someone was able to do it with less keystrokes or a single macro.  But hey, it was fun learning experience, and ultimately I turned all of that into two keystrokes that can be reused many times.&lt;/p&gt;

&lt;p&gt;I posted this on &lt;a href=&#34;http://vimgolf.com/challenges/511991607729fb0002000003&#34;&gt;vimgolf&lt;/a&gt; so let’s see how other people solved the same refactoring!&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>