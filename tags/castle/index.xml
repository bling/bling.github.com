<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Castle on bling on software</title>
    <link>http://bling.github.io/tags/castle/</link>
    <description>Recent content in Castle on bling on software</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 11 Dec 2010 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://bling.github.io/tags/castle/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Auto Mocking NSubstitute with Castle Windsor</title>
      <link>http://bling.github.io/blog/2010/12/11/auto-mocking-nsubstitute-with-castle/</link>
      <pubDate>Sat, 11 Dec 2010 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2010/12/11/auto-mocking-nsubstitute-with-castle/</guid>
      <description>&lt;p&gt;I was debating whether to make this blog post because it’s so damn
simple to implement, but hey, if it saves someone else time, I did some
good.&lt;/p&gt;

&lt;p&gt;First of all, register an ILazyComponentLoader into Windsor:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;WindsorContainer&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Register&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Component&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;For&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LazyComponentAutoMocker&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;());&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then, the implementation of LazyComponentAutoMocker is simply this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;LazyComponentAutoMocker&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ILazyComponentLoader&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IRegistration&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Load&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;key&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Type&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;IDictionary&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;arguments&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Component&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;For&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;).&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Instance&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Substitute&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;For&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;null&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;));&lt;/span&gt;
  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And you’re done!  Here’s a simple unit test example using &lt;strong&gt;only&lt;/strong&gt; the
code from above:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;na&#34;&gt;[Test]&lt;/span&gt;
&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;IDictionary_Add_Invoked&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;dict&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Resolve&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;IDictionary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;dict&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Received&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;().&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That was almost too easy.&lt;/p&gt;

&lt;p&gt;&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class=&#39;comments&#39;&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Randy&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
For what it&amp;#39;s worth, I found this helpful. I&amp;#39;m new to Castle Windsor as well as NSubstitute. This post was able to get me going a lot quicker than sifting through documentation. Thanks.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Contextual Lifestyle with Castle Windsor</title>
      <link>http://bling.github.io/blog/2010/05/14/contextual-lifestyle-with-castle/</link>
      <pubDate>Fri, 14 May 2010 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2010/05/14/contextual-lifestyle-with-castle/</guid>
      <description>&lt;div class=&#39;post&#39;&gt;
&lt;b&gt;EDIT:&lt;/b&gt;&amp;nbsp;As of version 3, scoped lifestyles are now a first class citizen supported out of the box (&lt;a href=&#34;http://docs.castleproject.org/Windsor.Whats-New-In-Windsor-3.ashx&#34;&gt;http://docs.castleproject.org/Windsor.Whats-New-In-Windsor-3.ashx&lt;/a&gt;)&lt;br /&gt;
&lt;strong&gt;EDIT:&lt;/strong&gt; A much better implementation can be found at &lt;a href=&#34;https://github.com/castleprojectcontrib/Castle.Windsor.Lifestyles&#34; title=&#34;https://github.com/castleprojectcontrib/Castle.Windsor.Lifestyles&#34;&gt;https://github.com/castleprojectcontrib/Castle.Windsor.Lifestyles&lt;/a&gt;&lt;br /&gt;
&lt;br /&gt;
IMO, one of the big missing features of Castle Windsor is that it doesn’t come with a built-in way for dealing with contextual lifestyles.&amp;nbsp; It handles transients and singletons fairly well, but once you get to other lifestyles it’s pretty heavily dependent on having some “state manager” handling the instances.&amp;nbsp; For example, PerWebRequest uses the HttpContext, PerThread uses thread static variables, etc.&lt;br /&gt;
Contextual lifestyles is one of those things where it doesn’t seem all that useful at first, and then when you see the possibilities it’s like getting hit with a huge truck.&lt;br /&gt;
A question was posted to the Castle Google Group recently, which I follow, which illustrates a relatively common example of why someone would want to have a contextual lifestyle.&amp;nbsp; Basically, you have a whole bunch of components you want to resolve, but only within a context.&lt;br /&gt;
Here’s some boiler plate code of the domain model:&lt;br /&gt;
&lt;pre class=&#34;csharpcode&#34;&gt;&lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;interface&lt;/span&gt; IRepository { ISession Session { get; } }
&lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;interface&lt;/span&gt; ISession : IDisposable { &lt;span class=&#34;kwrd&#34;&gt;bool&lt;/span&gt; IsDisposed { get; } }
&lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;class&lt;/span&gt; Session : ISession
{
    &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;bool&lt;/span&gt; IsDisposed { get; set; }
    &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;void&lt;/span&gt; Dispose() { IsDisposed = &lt;span class=&#34;kwrd&#34;&gt;true&lt;/span&gt;; }
}
&lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;class&lt;/span&gt; Repository1 :IRepository
{
    &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; ISession Session { get; &lt;span class=&#34;kwrd&#34;&gt;private&lt;/span&gt; set; }
    &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; Repository1(ISession session){ Session = session; }
}
&lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;class&lt;/span&gt; Repository2 : IRepository
{
    &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; ISession Session { get; &lt;span class=&#34;kwrd&#34;&gt;private&lt;/span&gt; set; }
    &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; Repository2(ISession session){ Session = session; }
}
&lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;class&lt;/span&gt; Model1
{
    &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; IRepository First { get; &lt;span class=&#34;kwrd&#34;&gt;private&lt;/span&gt; set; }
    &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; IRepository Second { get; &lt;span class=&#34;kwrd&#34;&gt;private&lt;/span&gt; set; }
    &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; Model1(IRepository first, IRepository second) { First = first; Second = second; }
}
&lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;class&lt;/span&gt; Model2
{
    &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; IRepository Second { get; &lt;span class=&#34;kwrd&#34;&gt;private&lt;/span&gt; set; }
    &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; Model2(IRepository second) { Second = second; }
}&lt;/pre&gt;&lt;style type=&#34;text/css&#34;&gt;
.csharpcode, .csharpcode pre
{
 font-size: small;
 color: black;
 font-family: consolas, &#34;Courier New&#34;, courier, monospace;
 background-color: #ffffff;
 /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
 background-color: #f4f4f4;
 width: 100%;
 margin: 0em;
}
.csharpcode .lnum { color: #606060; }
&lt;/style&gt;And here’s the unit test I want to pass:&lt;br /&gt;
&lt;pre class=&#34;csharpcode&#34;&gt;[Test]
        &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;void&lt;/span&gt; ResolutionsByContext()
        {
            IWindsorContainer root = &lt;span class=&#34;kwrd&#34;&gt;new&lt;/span&gt; WindsorContainer();
            root.Register(Component.For&amp;lt;Model1&amp;gt;().LifeStyle.Transient,
                          Component.For&amp;lt;Model2&amp;gt;().LifeStyle.Transient,
                          Component.For&amp;lt;IRepository&amp;gt;().ImplementedBy&amp;lt;Repository1&amp;gt;().LifeStyle.Transient,
                          Component.For&amp;lt;IRepository&amp;gt;().ImplementedBy&amp;lt;Repository2&amp;gt;().LifeStyle.Transient,
                          Component.For&amp;lt;ISession&amp;gt;().ImplementedBy&amp;lt;Session&amp;gt;().LifeStyle.PerContextScope());

            Model1 model1;
            Model2 model2;
            ISession session1, session2;
            &lt;span class=&#34;kwrd&#34;&gt;using&lt;/span&gt; (var context1 = root.BeginLifetimeScope())
            {
                model1 = context1.Resolve&amp;lt;Model1&amp;gt;();
                session1 = model1.First.Session;
                Assert.AreSame(model1.First.Session, model1.Second.Session);
                Assert.AreSame(context1.Resolve&amp;lt;ISession&amp;gt;(), context1.Resolve&amp;lt;ISession&amp;gt;());

                &lt;span class=&#34;kwrd&#34;&gt;using&lt;/span&gt; (var context2 = root.BeginLifetimeScope())
                {
                    model2 = context2.Resolve&amp;lt;Model2&amp;gt;();
                    session2 = model2.Second.Session;
                    Assert.AreNotSame(model1.First.Session, model2.Second.Session);

                    var anotherModel2 = context2.Resolve&amp;lt;Model2&amp;gt;();
                    Assert.AreSame(anotherModel2.Second.Session, model2.Second.Session);

                    Assert.AreSame(session2, context2.Resolve&amp;lt;ISession&amp;gt;());
                    Assert.AreNotSame(context1.Resolve&amp;lt;ISession&amp;gt;(), context2.Resolve&amp;lt;ISession&amp;gt;());
                }
                Assert.IsTrue(session2.IsDisposed);
                Assert.IsFalse(session1.IsDisposed);
            }
            Assert.IsTrue(session1.IsDisposed);
        }&lt;/pre&gt;&lt;style type=&#34;text/css&#34;&gt;
.csharpcode, .csharpcode pre
{
 font-size: small;
 color: black;
 font-family: consolas, &#34;Courier New&#34;, courier, monospace;
 background-color: #ffffff;
 /*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
 background-color: #f4f4f4;
 width: 100%;
 margin: 0em;
}
.csharpcode .lnum { color: #606060; }
&lt;/style&gt;  &lt;br /&gt;
I copied the name BeginLifetimeScope from Autofac, which inherently supports contextual scopes as a first-class citizen (of which the test passes).&amp;nbsp; The question now, is how do we get Castle Windsor to do the same?&lt;br /&gt;
Initially, I took a look at ISubDependencyResolver and caching variables.&amp;nbsp; Unfortunately, this didn’t work too well because sub resolvers never got hit if they were resolved from the container directly.&lt;br /&gt;
The next step I tried was with lifestyle managers, but alas, the CreationContext was always transient and I was unable to store any state that distinguished between different context resolutions.&lt;br /&gt;
After digging deeper into the Windsor codebase and getting into the subsystems and handlers, I found a solution that seems to work.&amp;nbsp; It passes the test above, but that’s about it.&amp;nbsp; Test well if you’re gonna use this in production code!!!&lt;br /&gt;
Here goes!&lt;br /&gt;
First, you have a lifestyle manager to distinguish between other lifestyles.&lt;br /&gt;
&lt;pre class=&#34;csharpcode&#34;&gt;&lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;class&lt;/span&gt; ContextualLifestyleManager : AbstractLifestyleManager
    {
        &lt;span class=&#34;kwrd&#34;&gt;private&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;object&lt;/span&gt; instance;
        &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;object&lt;/span&gt; Resolve(CreationContext context)
        {
            &lt;span class=&#34;kwrd&#34;&gt;return&lt;/span&gt; instance ?? (instance = &lt;span class=&#34;kwrd&#34;&gt;base&lt;/span&gt;.Resolve(context));
        }
        &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;void&lt;/span&gt; Dispose()
        {
        }
    }&lt;/pre&gt;And finally, the magic happens with this:&lt;br /&gt;
&lt;pre class=&#34;csharpcode&#34;&gt;&lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;static&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;class&lt;/span&gt; ContextualExtensions
    {
        &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;static&lt;/span&gt; ComponentRegistration&amp;lt;T&amp;gt; PerContextScope&amp;lt;T&amp;gt;(&lt;span class=&#34;kwrd&#34;&gt;this&lt;/span&gt; LifestyleGroup&amp;lt;T&amp;gt; group)
        {
            &lt;span class=&#34;kwrd&#34;&gt;return&lt;/span&gt; group.Custom&amp;lt;ContextualLifestyleManager&amp;gt;();
        }
        &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;static&lt;/span&gt; IWindsorContainer BeginLifetimeScope(&lt;span class=&#34;kwrd&#34;&gt;this&lt;/span&gt; IWindsorContainer parent)
        {
            var child = &lt;span class=&#34;kwrd&#34;&gt;new&lt;/span&gt; WindsorContainer();
            var ss = (INamingSubSystem)parent.Kernel.GetSubSystem(SubSystemConstants.NamingKey);
            &lt;span class=&#34;kwrd&#34;&gt;foreach&lt;/span&gt; (var handler &lt;span class=&#34;kwrd&#34;&gt;in&lt;/span&gt; ss.GetHandlers())
            {
                &lt;span class=&#34;kwrd&#34;&gt;if&lt;/span&gt; (handler.ComponentModel.CustomLifestyle == &lt;span class=&#34;kwrd&#34;&gt;typeof&lt;/span&gt;(ContextualLifestyleManager))
                {
                    child.Kernel.AddCustomComponent(handler.ComponentModel);
                }
            }
            parent.AddChildContainer(child);
            &lt;span class=&#34;kwrd&#34;&gt;return&lt;/span&gt; child;
        }
    }&lt;/pre&gt;First method is just a helper method to be a little more fluent in the registration for when you want many things to have contextual lifestyle.&amp;nbsp; The second method is the guts.&amp;nbsp; Long story short, we create a child container, and duplicate all component models of contextual lifestyle.&amp;nbsp; Thus, whenever components are resolved, the “override” is found in the child and resolved.&amp;nbsp; Anything else will be found in the parent.&lt;br /&gt;
I was initially pretty happy with this, until I profiled the performance.&amp;nbsp; With Autofac, creating and disposing 100,000 contexts took 5ms on my computer.&amp;nbsp; Doing the same with with Windsor took 3.8 &lt;strong&gt;seconds&lt;/strong&gt;.&amp;nbsp; Out of curiosity, I profiled again, but this time just creating child containers without copying handlers down: 1.9 seconds.&amp;nbsp; So while this implementation works, it’s not as performant as I’d like it to be….&lt;br /&gt;
Maybe I’ll come up with another solution, but for now if the performance is acceptable maybe this would be useful for others!&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class=&#39;comments&#39;&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;bling&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
LOL I need to check these comments more often.  Thanks for responding!&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Krzysztof Koźmic (2)&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
That&amp;#39;s my quick and dirty impl based on per-web-request lifestyle that is far more lightweight and should have similar perf characteristics to other lifestyles&lt;br /&gt;&lt;br /&gt;http://gist.github.com/400979&lt;br /&gt;http://gist.github.com/400980&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Krzysztof Koźmic (2)&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
No wonder it is taking so long, you&amp;#39;re doing it in very heavyweight fashion.&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;It can be done w/o nested containers, much more lightweight.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Forcing Castle Windsor to Generate Class Proxies</title>
      <link>http://bling.github.io/blog/2010/04/21/forcing-castle-windsor-to-generate/</link>
      <pubDate>Wed, 21 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2010/04/21/forcing-castle-windsor-to-generate/</guid>
      <description>&lt;div class=&#39;post&#39;&gt;
I don&#39;t know why it took me so long to come up with this idea, but to save others potential headaches...have you ever thought &#34;hmmmm, I registered this as an interface with an implementation, but I want Windsor to use a class proxy, not an interface proxy, how do I do that?&#34;&lt;br /&gt;
&lt;br /&gt;
For me, initially I &lt;i&gt;almost&lt;/i&gt; went as far as implementing my own ProxyFactory to force it to use class proxy no matter what, and then the light bulb hit me and it turns out that there&#39;s a much easier way to accomplish this.&lt;br /&gt;
&lt;br /&gt;
c.Register(Component.For&amp;lt;ConcreteImpl, IService&amp;gt;().Interceptors&amp;lt;AnInterceptor&amp;gt;());&lt;br /&gt;
&lt;br /&gt;
Tada!&amp;nbsp; The actual service is now a concrete type, so Windsor will go, OK, I need to create a class proxy.&amp;nbsp; But since it&#39;s forwarded to the interface as well, all your dependencies can simply use the interface and everything magically works.&lt;br /&gt;
&lt;br /&gt;
Yay!&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class=&#39;comments&#39;&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;bling&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
void IService.SomeLongRunningOperation() {&lt;br /&gt;  Action1();&lt;br /&gt;  Action2();&lt;br /&gt;  Action3();&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;protected virtual void Action1() {}&lt;br /&gt;protected virtual void Action2() {}&lt;br /&gt;protected virtual void Action3() {}&lt;br /&gt;&lt;br /&gt;Without class proxies, those action methods could not be intercepted, and in our case, we would not be able to collect metrics/statistics on those methods.&lt;/div&gt;
&lt;/div&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Krzysztof Koźmic (2)&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
Why did you want a class proxy for interface service?&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Windsor/DynamicProxy/Mixin Powers!</title>
      <link>http://bling.github.io/blog/2010/04/05/windsordynamicproxymixin-powers/</link>
      <pubDate>Mon, 05 Apr 2010 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2010/04/05/windsordynamicproxymixin-powers/</guid>
      <description>&lt;div class=&#39;post&#39;&gt;
Hmmm, I couldn’t really think of a good title except that this blog post has a little bit of everything of the title.&lt;br /&gt;
&lt;br /&gt;
As with any multithreaded program, deadlocks are a huge pain in the butt, and when they happen it costs time, money, and stress.&lt;br /&gt;
&lt;br /&gt;
In my code base I’ve introduced something called an ExtendedLock, which basically has something like this inside:&lt;br /&gt;
&lt;div class=&#34;csharpcode&#34;&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;   1:  &lt;/span&gt;&lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;class&lt;/span&gt; ExtendedLock : IExtendedLock {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;   2:  &lt;/span&gt;  &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; IDisposable Lock() {&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;   3:  &lt;/span&gt;    &lt;span class=&#34;kwrd&#34;&gt;while&lt;/span&gt; (!Monitor.TryEnter(&lt;span class=&#34;kwrd&#34;&gt;this&lt;/span&gt;, 5000)) {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;   4:  &lt;/span&gt;      IncrementLockTime();&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;   5:  &lt;/span&gt;    }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;   6:  &lt;/span&gt;    &lt;span class=&#34;kwrd&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;new&lt;/span&gt; Disposer(() =&amp;gt; Release());&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;   7:  &lt;/span&gt;  }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;   8:    public event Deadlock;&lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;9&lt;span class=&#34;lnum&#34;&gt;: &lt;/span&gt;}&lt;/pre&gt;&lt;/div&gt;&lt;style type=&#34;text/css&#34;&gt;
.csharpcode, .csharpcode pre
{
font-size: small;
color: black;
font-family: consolas, &#34;Courier New&#34;, courier, monospace;
background-color: #ffffff;
/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
background-color: #f4f4f4;
width: 100%;
margin: 0em;
}
.csharpcode .lnum { color: #606060; }
&lt;/style&gt;&lt;br /&gt;
&lt;br /&gt;
Pretty simple.&amp;nbsp; IncrementLockTime, as the name implies keeps track of how long the current thread has been attempting to acquire the lock.&amp;nbsp; It returns a Disposer which takes an Action, which releases the lock.&amp;nbsp; This allows us to take advantage of the &lt;b&gt;using&lt;/b&gt; syntax, and avoid boiler plate try/finally (oh, and it avoids typos in Monitor.Exit).&amp;nbsp; After some configurable amount of time, if the lock cannot be acquired within, say, 2 minutes, it’s probably a good probability your application is blocked somewhere.&lt;br /&gt;
&lt;br /&gt;
Now, using this class basically means replacing lock(_syncRoot) type code with _elock.Lock().&amp;nbsp; Also, I believe it’s a good candidate for “mixing” into any other component.&amp;nbsp; Mixins are sort of like multiple-inheritance, but not.&amp;nbsp; I like to think of mixins as a “can do” rather than “is a.”&lt;br /&gt;
&lt;br /&gt;
Now, we know that C# doesn’t let you do multiple inheritance, but with libraries like Castle’s DynamicProxy2, it lets you do something very similar, and is extremely powerful.&amp;nbsp; In a sense, it will automatically generate the following code for you:&lt;br /&gt;
&lt;br /&gt;
&lt;div class=&#34;csharpcode&#34;&gt;&lt;br /&gt;
&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;   1:  &lt;/span&gt;&lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;class&lt;/span&gt; SomeService : ISomeService, IExtendedLock {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;   2:  &lt;/span&gt;  IExtendedLock _lock = &lt;span class=&#34;kwrd&#34;&gt;new&lt;/span&gt; ExtendedLock();&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;   3:  &lt;/span&gt;  &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;void&lt;/span&gt; DoSomething() { }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;   4:  &lt;/span&gt;  IDisposable IExtendedLock.Lock() { &lt;span class=&#34;kwrd&#34;&gt;return&lt;/span&gt; _lock.Lock(); }&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;   5:  &lt;/span&gt;}&lt;/pre&gt;&lt;br /&gt;
&lt;/div&gt;&lt;style type=&#34;text/css&#34;&gt;
.csharpcode, .csharpcode pre
{
font-size: small;
color: black;
font-family: consolas, &#34;Courier New&#34;, courier, monospace;
background-color: #ffffff;
/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
background-color: #f4f4f4;
width: 100%;
margin: 0em;
}
.csharpcode .lnum { color: #606060; }
&lt;/style&gt;&lt;style type=&#34;text/css&#34;&gt;
.csharpcode, .csharpcode pre
{
font-size: small;
color: black;
font-family: consolas, &#34;Courier New&#34;, courier, monospace;
background-color: #ffffff;
/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
background-color: #f4f4f4;
width: 100%;
margin: 0em;
}
.csharpcode .lnum { color: #606060; }
&lt;/style&gt;&lt;br /&gt;
&lt;br /&gt;
_lock is a private instance variable, SomeService implements IExtendedLock, and simply redirects all the interface methods to _lock.&amp;nbsp; This seems pretty simple and straightforward, but becomes tedious when the type you want to mix in has many methods (as my actual IExtendedLock is).&lt;br /&gt;
&lt;br /&gt;
With Windsor/DynamicProxy, you can do this automatically with minimal amount of code.&amp;nbsp; For example, first you define something like this:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&#34;csharpcode&#34;&gt;&lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;interface&lt;/span&gt; ILockableDictionary : IDictionary, IExtendedLock { }&lt;/pre&gt;&lt;br /&gt;
Then, you register it in the container:&lt;br /&gt;
&lt;div class=&#34;csharpcode&#34;&gt;&lt;br /&gt;
&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;   1:  &lt;/span&gt;var container = &lt;span class=&#34;kwrd&#34;&gt;new&lt;/span&gt; WindsorContainer();&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;   2:  &lt;/span&gt;container.Register(Component.For(&lt;span class=&#34;kwrd&#34;&gt;typeof&lt;/span&gt;(ILockableHashtable))&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;   3:  &lt;/span&gt;                                   .LifeStyle.Transient&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;   4:  &lt;/span&gt;                                   .Activator&amp;lt;LockableHashtableActivator&amp;gt;());&lt;/pre&gt;&lt;/div&gt;&lt;style type=&#34;text/css&#34;&gt;
.csharpcode, .csharpcode pre
{
font-size: small;
color: black;
font-family: consolas, &#34;Courier New&#34;, courier, monospace;
background-color: #ffffff;
/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
background-color: #f4f4f4;
width: 100%;
margin: 0em;
}
.csharpcode .lnum { color: #606060; }
&lt;/style&gt;&lt;br /&gt;
&lt;br /&gt;
Now, whenever you need an instance of a lockable hashtable you can simply do something like this:&lt;br /&gt;
&lt;br /&gt;
&lt;pre class=&#34;csharpcode&#34;&gt;var hash = container.Resolve&amp;lt;ILockableHashtable&amp;gt;();
&lt;span class=&#34;kwrd&#34;&gt;using&lt;/span&gt; (hash.Lock()) {
hash[&lt;span class=&#34;str&#34;&gt;&#34;1&#34;&lt;/span&gt;] = 1;
}&lt;/pre&gt;&lt;style type=&#34;text/css&#34;&gt;
.csharpcode, .csharpcode pre
{
font-size: small;
color: black;
font-family: consolas, &#34;Courier New&#34;, courier, monospace;
background-color: #ffffff;
/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
background-color: #f4f4f4;
width: 100%;
margin: 0em;
}
.csharpcode .lnum { color: #606060; }
&lt;/style&gt;&lt;br /&gt;
&lt;br /&gt;
You might be wondering why it’s worth all this trouble, and what’s wrong with regular locks and Monitor.&amp;nbsp; For our system it’s pretty critical that it stays running 24/7, and every minute it’s down is money lost, so it is in our best interest to detect any problematic condition.&lt;br /&gt;
&lt;br /&gt;
Last but not least, here’s the important code that actually generates the proxy:&lt;br /&gt;
&lt;div class=&#34;csharpcode&#34;&gt;&lt;br /&gt;
&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;   1:  &lt;/span&gt;&lt;span class=&#34;kwrd&#34;&gt;internal&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;class&lt;/span&gt; LockableHashtableActivator : DefaultComponentActivator&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;   2:  &lt;/span&gt;{&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;   3:  &lt;/span&gt;    &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; LockableHashtableActivator(ComponentModel model, IKernel kernel, ComponentInstanceDelegate onCreation, ComponentInstanceDelegate onDestruction)&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;   4:  &lt;/span&gt;        : &lt;span class=&#34;kwrd&#34;&gt;base&lt;/span&gt;(model, kernel, onCreation, onDestruction)&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;   5:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;   6:  &lt;/span&gt;    }&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;   7:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;   8:  &lt;/span&gt;    &lt;span class=&#34;kwrd&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;override&lt;/span&gt; &lt;span class=&#34;kwrd&#34;&gt;object&lt;/span&gt; Create(CreationContext context)&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;   9:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;  10:  &lt;/span&gt;        IExtendedLock lockMixin = Kernel.Resolve&amp;lt;IExtendedLock&amp;gt;();&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;  11:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;  12:  &lt;/span&gt;        &lt;span class=&#34;rem&#34;&gt;// an additional object we want to &#34;mix&#34; with the implementation to provide combined functionality&lt;/span&gt;&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;  13:  &lt;/span&gt;        ProxyGenerationOptions options = &lt;span class=&#34;kwrd&#34;&gt;new&lt;/span&gt; ProxyGenerationOptions();&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;  14:  &lt;/span&gt;        options.AddMixinInstance(lockMixin);&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;  15:  &lt;/span&gt;        &lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;  16:  &lt;/span&gt;        &lt;span class=&#34;kwrd&#34;&gt;return&lt;/span&gt; Kernel.Resolve&amp;lt;ProxyGenerator&amp;gt;().CreateInterfaceProxyWithTarget(&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;  17:  &lt;/span&gt;            &lt;span class=&#34;kwrd&#34;&gt;typeof&lt;/span&gt;(IDictionary), &lt;span class=&#34;rem&#34;&gt;// the interface of the implementation&lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;  18:  &lt;/span&gt;            &lt;span class=&#34;kwrd&#34;&gt;new&lt;/span&gt;[] { &lt;span class=&#34;kwrd&#34;&gt;typeof&lt;/span&gt;(ILockableHashtable) }, &lt;span class=&#34;rem&#34;&gt;// additional interfaces to use&lt;/span&gt;&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;  19:  &lt;/span&gt;            Activator.CreateInstance&amp;lt;Hashtable&amp;gt;(), &lt;span class=&#34;rem&#34;&gt;// concrete implementation to mix into&lt;/span&gt;&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;  20:  &lt;/span&gt;            options);&lt;/pre&gt;&lt;pre class=&#34;alt&#34;&gt;&lt;span class=&#34;lnum&#34;&gt;  21:  &lt;/span&gt;    }&lt;/pre&gt;&lt;pre&gt;&lt;span class=&#34;lnum&#34;&gt;  22:  &lt;/span&gt;}&lt;/pre&gt;&lt;br /&gt;
&lt;/div&gt;&lt;style type=&#34;text/css&#34;&gt;
.csharpcode, .csharpcode pre
{
font-size: small;
color: black;
font-family: consolas, &#34;Courier New&#34;, courier, monospace;
background-color: #ffffff;
/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
background-color: #f4f4f4;
width: 100%;
margin: 0em;
}
.csharpcode .lnum { color: #606060; }
&lt;/style&gt;&lt;style type=&#34;text/css&#34;&gt;
.csharpcode, .csharpcode pre
{
font-size: small;
color: black;
font-family: consolas, &#34;Courier New&#34;, courier, monospace;
background-color: #ffffff;
/*white-space: pre;*/
}
.csharpcode pre { margin: 0em; }
.csharpcode .rem { color: #008000; }
.csharpcode .kwrd { color: #0000ff; }
.csharpcode .str { color: #006080; }
.csharpcode .op { color: #0000c0; }
.csharpcode .preproc { color: #cc6633; }
.csharpcode .asp { background-color: #ffff00; }
.csharpcode .html { color: #800000; }
.csharpcode .attr { color: #ff0000; }
.csharpcode .alt 
{
background-color: #f4f4f4;
width: 100%;
margin: 0em;
}
.csharpcode .lnum { color: #606060; }
&lt;/style&gt;&lt;br /&gt;
For those who are familiar with Windsor and wondering why I didn’t use the fluent Proxy.Mixins method, it’s because those mixins are created once per registration.&amp;nbsp; In this case, it is very important that each mixin (which is an extended lock), is transient, otherwise every lockable hashtable ends up with the same extended lock, which is just asking for trouble.&lt;/div&gt;
&lt;h2&gt;Comments&lt;/h2&gt;
&lt;div class=&#39;comments&#39;&gt;
&lt;div class=&#39;comment&#39;&gt;
&lt;div class=&#39;author&#39;&gt;Krzysztof Koźmic&lt;/div&gt;
&lt;div class=&#39;content&#39;&gt;
actually, with the trunk version the limitation &amp;quot;one mixin per registration&amp;quot; was lifted off. Now Mixins behave pretty much like interceptors, which means they can have any lifestyle, including being transient.&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Dynamic proxies</title>
      <link>http://bling.github.io/blog/2009/08/08/dynamic-proxies/</link>
      <pubDate>Sat, 08 Aug 2009 00:00:00 +0000</pubDate>
      
      <guid>http://bling.github.io/blog/2009/08/08/dynamic-proxies/</guid>
      <description>

&lt;p&gt;Life has sure been a roller coaster lately ever since I started working on my new project. I&amp;rsquo;ve learned a lot about WCF in the past week. There&amp;rsquo;s really nothing that can teach you faster than trying something out yourself.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ve joined the ranks of countless others who have had to deal with implementing service behaviors to handle WCF exceptions (because by default thrown exceptions fault the communication channel), realized that WCF proxy clients breaks the &amp;lsquo;using&amp;rsquo; keyword because someone thought it was a good idea to throw exceptions in Dispose(), and even Unity&amp;rsquo;s InterfaceInterceptor not &lt;a href=&#34;http://unity.codeplex.com/WorkItem/View.aspx?WorkItemId=3685&#34;&gt;supporting more than 1 interface&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;But now that we&amp;rsquo;re talking about proxies, I&amp;rsquo;ve been thinking for a while about switching out Unity with a more mature IoC container like Windsor or StructureMap. There are little touches that other containers have that I miss in Unity. For example, auto-wiring.&lt;/p&gt;

&lt;p&gt;But then again, the integration that Unity has with the rest of the Enterprise Library is very nice, of which I&amp;rsquo;m using the Logging and Exception Policy blocks, so it made sense in a way that everything in my bin folder just had Microsoft.Practices.*.dll.&lt;/p&gt;

&lt;p&gt;But now I&amp;rsquo;m seriously reconsidering.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre&gt;&lt;code class=&#34;language-csharp&#34; data-lang=&#34;csharp&#34;&gt;&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;interface&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ITestService&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Count&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;DoWork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ShouldDoWork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;class&lt;/span&gt; &lt;span class=&#34;nc&#34;&gt;TestService&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ITestService&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Count&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;get&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;set&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;DoWork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Count&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;ShouldDoWork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;

&lt;span class=&#34;k&#34;&gt;public&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;HowDoTheyCompare&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unity&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ITestService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Microsoft&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Practices&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Unity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InterceptionExtension&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;InterfaceInterceptor&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateProxy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;typeof&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ITestService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;),&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TestService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;
  &lt;span class=&#34;kt&#34;&gt;var&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;castle&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Castle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DynamicProxy&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ProxyGenerator&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;
                   &lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;CreateInterfaceProxyWithTarget&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ITestService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;&amp;gt;(&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TestService&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;());&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;Thread&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Sleep&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;m&#34;&gt;1000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;Stopwatch&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;new&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;Stopwatch&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1000000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;unity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ShouldDoWork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;unity&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DoWork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;unity: &amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ElapsedMilliseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;

  &lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Reset&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1000000&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;castle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ShouldDoWork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;castle&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;DoWork&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Stop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;
  &lt;span class=&#34;n&#34;&gt;Console&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;WriteLine&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;quot;castle: &amp;quot;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;+&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;sw&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ElapsedMilliseconds&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;
&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Results?
&lt;br&gt;
unity: 1787
castle: 136&lt;/p&gt;

&lt;p&gt;From this test it looks like the Unity interception is 13x slower&amp;hellip;.but wait! I mentioned before that Unity has a bug where it can only proxy one interface&amp;hellip;.so to resolve that we would need to use the TransparentProxyInterceptor.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s change it and test again&amp;hellip;
&lt;br&gt;
unity: 30462
castle: 142&lt;/p&gt;

&lt;p&gt;Hmmmm&amp;hellip;.214x slower. I guess we can try the VirtualMethodInterceptor for completeness. After making all methods virtual, here&amp;rsquo;s the results.
&lt;br&gt;
unity: 3843
castle: 132&lt;/p&gt;

&lt;p&gt;Still 29x slower. Whatever DynamicProxy is doing&amp;hellip;it&amp;rsquo;s orders of magnitude faster than what Unity&amp;rsquo;s doing.&lt;/p&gt;

&lt;h2 id=&#34;comments:909c8e253e5e7d59a7dd0c20344284cd&#34;&gt;Comments&lt;/h2&gt;

&lt;div class=&#34;comments&#34;&gt;

&lt;div class=&#34;comment&#34;&gt;

&lt;div class=&#34;author&#34;&gt;

Krzysztof Koźmic (2)

&lt;/div&gt;

&lt;div class=&#34;content&#34;&gt;

Not only that. Castle has integration with logging, validation
framework, much more mature and powerful IoC container, and also nice
proxy library.

&lt;/div&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;

&lt;p&gt;&lt;/div&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>